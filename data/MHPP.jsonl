{"id": 1, "difficulty_types": 1, "question": "def table_tennis_results(marks: str) -> int:\n    \"\"\"Adham Sharara was elected as the sixth President of the International Table Tennis Federation(ITTF) in 1999.\n    Under his leadership, the ITTF underwent several reforms in the table tennis events to promote the sport globally.\n    For instance, they changed the scoring system from the 21-point format to an 11-point format. Since then, matches\n    have been played with an 11-point system, with a requirement of achieving a two-point lead upon reaching 11 points.\n\n\tRecently, Alice and Bob had a table tennis match. The match progress is represented by a string composed of 'A's \n\tfor Alice's points and 'B's for Bob's points. Please analyze the scores of each game and determine who is currently\n    leading overall. If Alice is leading, output 1; if Bob is leading, output -1; if they are tied, output 0.\n    >>> table_tennis_results(\"AAAAAAAAAAA\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBB\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABABABABAAAABBBABABABBAABBABB\")\n    0\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBBBBBBBB\")\n    -1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef table_tennis_results(marks: str) -> int:\n    \"\"\"Adham Sharara was elected as the sixth President of the International Table Tennis Federation(ITTF) in 1999.\n    Under his leadership, the ITTF underwent several reforms in the table tennis events to promote the sport globally.\n    For instance, they changed the scoring system from the 21-point format to an 11-point format. Since then, matches\n    have been played with an 11-point system, with a requirement of achieving a two-point lead upon reaching 11 points.\n\n\tRecently, Alice and Bob had a table tennis match. The match progress is represented by a string composed of 'A's \n\tfor Alice's points and 'B's for Bob's points. Please analyze the scores of each game and determine who is currently\n    leading overall. If Alice is leading, output 1; if Bob is leading, output -1; if they are tied, output 0.\n    >>> table_tennis_results(\"AAAAAAAAAAA\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBB\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABABABABAAAABBBABABABBAABBABB\")\n    0\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBBBBBBBB\")\n    -1\n    \"\"\"", "function_name": "table_tennis_results", "parameters": ["marks"], "assert_statements": ["assert table_tennis_results(\"AAAAABBAAA\") == 1", "assert table_tennis_results(\"ABABABBBAA\") ==  0", "assert table_tennis_results(\"AAAAAAAAAAABBBBBBBBBBB\") == 0"]}
{"id": 2, "difficulty_types": 1, "question": "from typing import List\n\ndef expectation_number(scores: List[int]) -> int:\n    \"\"\"The annual spring recruitment has begun at an internet company, and a total of n candidates have been selected.\n    Each candidate submits a resume, and the company generates an estimated ability value based on the provided resume\n    information, where a higher numerical value indicates a higher likelihood of passing the interview.\n\n    Alice and Bob are responsible for reviewing the candidates. They each have all the resumes and will review them in\n    descending order of the candidates' ability values. Since the resumes have been shuffled in advance, the order of\n    appearance of resumes with the same ability values is taken uniformly at random from their permutations.\n\n    Now, given the ability values of n candidates as scores, let X represent the number of resumes that appear at the\n    same position in the review order of both Alice and Bob. Calculate the expected value of X.\n\n    Hint: The formula for calculating the expected value of a discrete non-negative random variable is shown below:\n    E(X) = sum([k * probability_of_k for k in list])\n    >>> expectation_number([1, 2, 3, 4])\n    4\n    >>> expectation_number([1, 1, 2])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef expectation_number(scores: List[int]) -> int:\n    \"\"\"The annual spring recruitment has begun at an internet company, and a total of n candidates have been selected.\n    Each candidate submits a resume, and the company generates an estimated ability value based on the provided resume\n    information, where a higher numerical value indicates a higher likelihood of passing the interview.\n\n    Alice and Bob are responsible for reviewing the candidates. They each have all the resumes and will review them in\n    descending order of the candidates' ability values. Since the resumes have been shuffled in advance, the order of\n    appearance of resumes with the same ability values is taken uniformly at random from their permutations.\n\n    Now, given the ability values of n candidates as scores, let X represent the number of resumes that appear at the\n    same position in the review order of both Alice and Bob. Calculate the expected value of X.\n\n    Hint: The formula for calculating the expected value of a discrete non-negative random variable is shown below:\n    E(X) = sum([k * probability_of_k for k in list])\n    >>> expectation_number([1, 2, 3, 4])\n    4\n    >>> expectation_number([1, 1, 2])\n    2\n    \"\"\"", "function_name": "expectation_number", "parameters": ["scores"], "assert_statements": ["assert expectation_number([1, 2, 3]) == 3", "assert expectation_number([37, 82, 19, 53, 65, 7, 91, 14, 46, 28]) == 10", "assert expectation_number([3, 2, 9, 3, 5, 7, 1, 4, 6, 8]) == 9"]}
{"id": 3, "difficulty_types": 1, "question": "from typing import List\n\ndef get_maximum_capital(n: int, c: int, profits: List[int], capital: List[int]) -> int:\n    \"\"\"As AI products like ChatGPT become popular worldwide, many artificial intelligence companies are eager\n    to try their luck. One company is about to start an IPO, and in order to sell its stocks to venture capital \n    firms at a higher price, the company wants to undertake some projects before the IPO to increase its capital.\n    Due to limited resources, it can only complete up to n different projects before the IPO. Help the company\n    design a way to complete at most n different projects after which it can obtain the maximum total capital.\n\n    You are given m projects. For each project i, it has a net profit profits[i] and the minimum capital capital[i]\n    required to start the project.\n\n    Initially, your capital is c. When you complete a project, you will gain the net profit, and the profit will \n    be added to your total capital.\n\n    In summary, choose a list of up to n different projects from the given projects to maximize the final capital,\n    and output the maximum capital that can be obtained in the end.\n    >>> get_maximum_capital(3, 0, [1,2,3], [0,1,2])\n    6\n    >>> get_maximum_capital(2, 0, [1,2,3], [0,1,1])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_maximum_capital(n: int, c: int, profits: List[int], capital: List[int]) -> int:\n    \"\"\"As AI products like ChatGPT become popular worldwide, many artificial intelligence companies are eager\n    to try their luck. One company is about to start an IPO, and in order to sell its stocks to venture capital \n    firms at a higher price, the company wants to undertake some projects before the IPO to increase its capital.\n    Due to limited resources, it can only complete up to n different projects before the IPO. Help the company\n    design a way to complete at most n different projects after which it can obtain the maximum total capital.\n\n    You are given m projects. For each project i, it has a net profit profits[i] and the minimum capital capital[i]\n    required to start the project.\n\n    Initially, your capital is c. When you complete a project, you will gain the net profit, and the profit will \n    be added to your total capital.\n\n    In summary, choose a list of up to n different projects from the given projects to maximize the final capital,\n    and output the maximum capital that can be obtained in the end.\n    >>> get_maximum_capital(3, 0, [1,2,3], [0,1,2])\n    6\n    >>> get_maximum_capital(2, 0, [1,2,3], [0,1,1])\n    4\n    \"\"\"", "function_name": "get_maximum_capital", "parameters": ["n", "c", "profits", "capital"], "assert_statements": ["assert get_maximum_capital(5, 1, [1,2,3,4,5], [0,1,1,2,3]) == 16", "assert get_maximum_capital(7, 3, [1,2,3,4,2], [1,1,2,3,2]) == 15", "assert get_maximum_capital(10, 2, [10,4,2,4,1,2,3,4,2], [8,2,1,3,2,1,4,3,2]) == 34"]}
{"id": 4, "difficulty_types": 1, "question": "def least_goods_number(n: int) -> int:\n    \"\"\"Given a list of products where the first column represents the product name and the second column\n    represents the product price. You have n dollers, please calculate and return the minimum number of products\n    required to spend the total amount exactly. If no combination of products can add up to the total amount,\n    return -1. You can assume that the quantity of each product is unlimited.\n    +---------------+---------------+\n    |     Milk      |       2       |\n    |---------------|---------------|\n    |     Soap      |       3       |\n    |---------------|---------------|\n    |   Batteries   |       5       |\n    |---------------|---------------|\n    |     Eggs      |       1       |\n    +---------------+---------------+\n    >>> least_goods_number(11)\n    3\n    >>> least_goods_number(5)\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef least_goods_number(n: int) -> int:\n    \"\"\"Given a list of products where the first column represents the product name and the second column\n    represents the product price. You have n dollers, please calculate and return the minimum number of products\n    required to spend the total amount exactly. If no combination of products can add up to the total amount,\n    return -1. You can assume that the quantity of each product is unlimited.\n    +---------------+---------------+\n    |     Milk      |       2       |\n    |---------------|---------------|\n    |     Soap      |       3       |\n    |---------------|---------------|\n    |   Batteries   |       5       |\n    |---------------|---------------|\n    |     Eggs      |       1       |\n    +---------------+---------------+\n    >>> least_goods_number(11)\n    3\n    >>> least_goods_number(5)\n    1\n    \"\"\"", "function_name": "least_goods_number", "parameters": ["n"], "assert_statements": ["assert least_goods_number(599) == 121", "assert least_goods_number(10000) == 2000", "assert least_goods_number(17) == 4"]}
{"id": 5, "difficulty_types": 1, "question": "from typing import List\n\ndef arrange_ark_pairs(ark_deck: List[int]) -> int:\n    \"\"\"Legend tells of a great Ark built by Noah to survive an immense flood that would cover the Earth.\n    To preserve the natural world, Noah invited animals to join him on the Ark, inviting them in pairs so\n    that each species could continue in the new world.\n\n    As the animals boarded the Ark, they were assigned places in a linear formation across the Ark's deck.\n    However, in the rush to board before the rain began, the animal pairs became separated across the 2n available spaces.\n    Each animal is known by a unique identifier, and the list of these identifiers as they are arranged on the Ark\n    is given by an integer array `arkDeck` where `arkDeck[i]` represents the animal occupying the ith space.\n    The pairs were meant to board in order, with the first pair being (0, 1), the second pair (2, 3), and so on,\n    up to the last pair being (2n - 2, 2n - 1).\n\n    Your task is to help Noah figure out the minimum number of exchanges necessary to reposition the animals so that\n    each pair is resting side by side. An exchange is the act of two animals, regardless of their species, standing\n    up from their places and switching spots on the deck.\n    >>> arrange_ark_pairs([0,1,3,2])\n    0\n    >>> arrange_ark_pairs([0,3,2,1])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef arrange_ark_pairs(ark_deck: List[int]) -> int:\n    \"\"\"Legend tells of a great Ark built by Noah to survive an immense flood that would cover the Earth.\n    To preserve the natural world, Noah invited animals to join him on the Ark, inviting them in pairs so\n    that each species could continue in the new world.\n\n    As the animals boarded the Ark, they were assigned places in a linear formation across the Ark's deck.\n    However, in the rush to board before the rain began, the animal pairs became separated across the 2n available spaces.\n    Each animal is known by a unique identifier, and the list of these identifiers as they are arranged on the Ark\n    is given by an integer array `arkDeck` where `arkDeck[i]` represents the animal occupying the ith space.\n    The pairs were meant to board in order, with the first pair being (0, 1), the second pair (2, 3), and so on,\n    up to the last pair being (2n - 2, 2n - 1).\n\n    Your task is to help Noah figure out the minimum number of exchanges necessary to reposition the animals so that\n    each pair is resting side by side. An exchange is the act of two animals, regardless of their species, standing\n    up from their places and switching spots on the deck.\n    >>> arrange_ark_pairs([0,1,3,2])\n    0\n    >>> arrange_ark_pairs([0,3,2,1])\n    1\n    \"\"\"", "function_name": "arrange_ark_pairs", "parameters": ["ark_deck"], "assert_statements": ["assert arrange_ark_pairs([0,6,7,3,2,1,4,5]) == 2", "assert arrange_ark_pairs([0,6,7,3,2,8,9,10,11,1,4,5]) == 4", "assert arrange_ark_pairs([0,6,13,14,15,8,7,3,2,4,21,5,19,20,10,11,1,16,17,18,12,9]) == 8"]}
{"id": 6, "difficulty_types": 1, "question": "def artemis_game(beta: int, theta: int, upperBound: int) -> float:\n    \"\"\"\n    Artemis, engages in a strategic computational challenge.\n\n    Initiating with a tally of zero, Artemis partakes in sequential computational operations with the aim to accumulate a numerical aggregate less than a predefined threshold, denoted by the variable theta. Throughout each computational cycle, Artemis is awarded a quantified increment, discretely and uniformly distributed, within the confines of [1, upperBound], where upperBound defines the maximum achievable singular increment and is a fixed integer value. It is of importance to note that each operation occurs autonomously and the potential outcomes are equitably probable.\n\n    The process of numerical acquisition is suspended when Artemis' aggregate meets or exceeds the marker theta.\n\n    The objective is to assess the likelihood that Artemis concludes these operations possessing a tally not surpassing beta.\n\n    Estimations deviating from the true likelihood by no more than a margin of 10^-5 are deemed satisfactory.\n\n    >>> artemis_game(10, 1, 10)\n    1.00000\n    Rationale: Artemis completes a solitary computational operation and ceases further actions.\n    >>> artemis_game(6, 1, 10)\n    0.60000\n    Rationale: Artemis finalizes a solitary computational operation and refrains from continuing.\n    In 6 out of the 10 equitable scenarios, Artemis' score is confined to or less than 6 points.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef artemis_game(beta: int, theta: int, upperBound: int) -> float:\n    \"\"\"\n    Artemis, engages in a strategic computational challenge.\n\n    Initiating with a tally of zero, Artemis partakes in sequential computational operations with the aim to accumulate a numerical aggregate less than a predefined threshold, denoted by the variable theta. Throughout each computational cycle, Artemis is awarded a quantified increment, discretely and uniformly distributed, within the confines of [1, upperBound], where upperBound defines the maximum achievable singular increment and is a fixed integer value. It is of importance to note that each operation occurs autonomously and the potential outcomes are equitably probable.\n\n    The process of numerical acquisition is suspended when Artemis' aggregate meets or exceeds the marker theta.\n\n    The objective is to assess the likelihood that Artemis concludes these operations possessing a tally not surpassing beta.\n\n    Estimations deviating from the true likelihood by no more than a margin of 10^-5 are deemed satisfactory.\n\n    >>> artemis_game(10, 1, 10)\n    1.00000\n    Rationale: Artemis completes a solitary computational operation and ceases further actions.\n    >>> artemis_game(6, 1, 10)\n    0.60000\n    Rationale: Artemis finalizes a solitary computational operation and refrains from continuing.\n    In 6 out of the 10 equitable scenarios, Artemis' score is confined to or less than 6 points.\n    \"\"\"", "function_name": "artemis_game", "parameters": ["beta", "theta", "upperBound"], "assert_statements": ["assert abs((artemis_game(10, 1, 10) - 1.00000)) < 10 ** -5", "assert abs((artemis_game(6, 1, 10) - 0.60000)) < 10 ** -5", "assert abs((artemis_game(21, 17, 10) - 0.73278)) < 10 ** -5"]}
{"id": 7, "difficulty_types": 1, "question": "from typing import List\n\nclass UnionFind(object):\n    def __init__(self, names):\n        self.parent = {}\n        for name in names:\n            self.parent[name] = name\n\n    def union(self, a, b):\n        if a not in self.parent:\n            self.parent[a] = a\n        if b not in self.parent:\n            self.parent[b] = b\n        root_a = self.find_root(a)\n        root_b = self.find_root(b)\n        if root_a < root_b:\n            self.parent[root_b] = root_a\n        else:\n            self.parent[root_a] = root_b\n\n    def find_root(self, node):\n        while node != self.parent[node]:\n            self.parent[node] = self.parent[self.parent[node]]\n            node = self.parent[node]\n        return node\n\ndef popular_names(names: List[str], synonyms: List[str]) -> List[str]:\n    \"\"\"\n    Each year, the national statistics agency releases a list of the 10,000 most commonly chosen names for new babies, along with the frequency of each name's use. While variations in spelling can make certain names seem different, they may indeed refer to the same moniker. For instance, \"Aiden\" and \"Aidan\" are treated as separate entries in the statistics, even though they actually stem from the same name.\n\n    Given two datasets - one featuring names and their popularity, the other containing pairs of names deemed to be versions of the same underlying name - we wish to devise a method to effectively compute and present the cumulative frequency of each distinct name. This requires that we account for the fact that name equivalency is both transitive and symmetrical. This means that if \"Aiden\" is equivalent to \"Aidan\" and \"Aidan\" is deemed identical to \"Ayden\" then \"Aiden\" and \"Ayden\" must also be considered the same.\n\n    In the resulting list, choose the lexicographically smallest name as the representative for the true name.\n\n    In developing this procedure, we must ensure a systematic approach that can handle the numerous relations between equivalent names and their different spellings. By accounting for these equivalences, a name's total frequency could potentially be much different than what's indicated in the raw newborn name statistics. Thus, this method should more accurately reflect the true popularity of distinct names.\n\n    >>> popular_names([\"Aiden(10)\",\"Aidan(5)\",\"Alex(20)\",\"Lex(2)\",\"Alexander(30)\"], [\"(Aidan,Aiden)\",\"(Aiden,Ayden)\",\"(Alex,Lex)\",\"(Alex,Alexander)\"])\n    [\"Aiden(15)\",\"Alex(52)\"]\n    >>> popular_names([\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Christopher(19)\"], [\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\",\"(Chris,Christopher)\"])\n    [\"John(27)\",\"Chris(36)\"]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\nclass UnionFind(object):\n    def __init__(self, names):\n        self.parent = {}\n        for name in names:\n            self.parent[name] = name\n\n    def union(self, a, b):\n        if a not in self.parent:\n            self.parent[a] = a\n        if b not in self.parent:\n            self.parent[b] = b\n        root_a = self.find_root(a)\n        root_b = self.find_root(b)\n        if root_a < root_b:\n            self.parent[root_b] = root_a\n        else:\n            self.parent[root_a] = root_b\n\n    def find_root(self, node):\n        while node != self.parent[node]:\n            self.parent[node] = self.parent[self.parent[node]]\n            node = self.parent[node]\n        return node\n\ndef popular_names(names: List[str], synonyms: List[str]) -> List[str]:\n    \"\"\"\n    Each year, the national statistics agency releases a list of the 10,000 most commonly chosen names for new babies, along with the frequency of each name's use. While variations in spelling can make certain names seem different, they may indeed refer to the same moniker. For instance, \"Aiden\" and \"Aidan\" are treated as separate entries in the statistics, even though they actually stem from the same name.\n\n    Given two datasets - one featuring names and their popularity, the other containing pairs of names deemed to be versions of the same underlying name - we wish to devise a method to effectively compute and present the cumulative frequency of each distinct name. This requires that we account for the fact that name equivalency is both transitive and symmetrical. This means that if \"Aiden\" is equivalent to \"Aidan\" and \"Aidan\" is deemed identical to \"Ayden\" then \"Aiden\" and \"Ayden\" must also be considered the same.\n\n    In the resulting list, choose the lexicographically smallest name as the representative for the true name.\n\n    In developing this procedure, we must ensure a systematic approach that can handle the numerous relations between equivalent names and their different spellings. By accounting for these equivalences, a name's total frequency could potentially be much different than what's indicated in the raw newborn name statistics. Thus, this method should more accurately reflect the true popularity of distinct names.\n\n    >>> popular_names([\"Aiden(10)\",\"Aidan(5)\",\"Alex(20)\",\"Lex(2)\",\"Alexander(30)\"], [\"(Aidan,Aiden)\",\"(Aiden,Ayden)\",\"(Alex,Lex)\",\"(Alex,Alexander)\"])\n    [\"Aiden(15)\",\"Alex(52)\"]\n    >>> popular_names([\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Christopher(19)\"], [\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\",\"(Chris,Christopher)\"])\n    [\"John(27)\",\"Chris(36)\"]\n    \"\"\"", "function_name": "popular_names", "parameters": ["names", "synonyms"], "assert_statements": ["assert set(popular_names([\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Christopher(19)\"],[\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\",\"(Chris,Christopher)\"])) == {\"John(27)\",\"Chris(36)\"}", "assert set(popular_names([\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Chuck(19)\"],[\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\"])) == {\"John(27)\",\"Chris(17)\",\"Chuck(19)\"}", "assert set(popular_names([\"Aiden(10)\",\"Aidan(5)\",\"Alex(20)\",\"Lex(2)\",\"Alexander(30)\"],[\"(Aidan,Aiden)\",\"(Aiden,Ayden)\",\"(Alex,Lex)\",\"(Alex,Alexander)\"])) == {\"Alex(52)\",\"Aidan(15)\"}"]}
{"id": 8, "difficulty_types": 1, "question": "from typing import List\n\ndef bridge_beams(shorter: int, longer: int, k: int) -> List[int]:\n    \"\"\"\n    The task at hand is both a practical and mathematical challenge, as constructing a bridge requires thorough understanding of engineering principles and creative problem-solving skills. The small stream represents a physical obstacle that needs to be overcome by establishing a steady connection from one side to the other. Metal beams are chosen for their durability and strength, essential for ensuring the longevity and safety of the bridge.\n\n    With two distinct types of beams, the \"shorter\" and the \"longer,\" your solution must accommodate a variety of circumstances. The shorter beams, while potentially more manageable due to their shorter length, might only be appropriate for narrow sections of the stream or for supporting lighter loads. On the other hand, the longer beams, offering a greater span, might be used to cover broader gaps or to bear more weight, but could also require additional support structures to maintain the necessary stability.\n\n    The project requires the precise integration of k beams. Your task is to develop a strategy to establish all potential bridge spans.\n\n    These spans should be organized from the shortest to the longest.\n\n    >>> bridge_beams(1,2,3)\n    [3, 4, 5, 6]\n    Explanation: By using the shorter beam three times, you create a span of 3; mixing two shorter beams with one longer beam results in a span of 4. Continue with this sequence to acquire the exhaustive list of spans.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef bridge_beams(shorter: int, longer: int, k: int) -> List[int]:\n    \"\"\"\n    The task at hand is both a practical and mathematical challenge, as constructing a bridge requires thorough understanding of engineering principles and creative problem-solving skills. The small stream represents a physical obstacle that needs to be overcome by establishing a steady connection from one side to the other. Metal beams are chosen for their durability and strength, essential for ensuring the longevity and safety of the bridge.\n\n    With two distinct types of beams, the \"shorter\" and the \"longer,\" your solution must accommodate a variety of circumstances. The shorter beams, while potentially more manageable due to their shorter length, might only be appropriate for narrow sections of the stream or for supporting lighter loads. On the other hand, the longer beams, offering a greater span, might be used to cover broader gaps or to bear more weight, but could also require additional support structures to maintain the necessary stability.\n\n    The project requires the precise integration of k beams. Your task is to develop a strategy to establish all potential bridge spans.\n\n    These spans should be organized from the shortest to the longest.\n\n    >>> bridge_beams(1,2,3)\n    [3, 4, 5, 6]\n    Explanation: By using the shorter beam three times, you create a span of 3; mixing two shorter beams with one longer beam results in a span of 4. Continue with this sequence to acquire the exhaustive list of spans.\n    \"\"\"", "function_name": "bridge_beams", "parameters": ["shorter", "longer", "k"], "assert_statements": ["assert bridge_beams(1,2,3) == [3, 4, 5, 6]", "assert bridge_beams(1,1,0) == []", "assert bridge_beams(30,31,10) == [300,301,302,303,304,305,306,307,308,309,310]"]}
{"id": 9, "difficulty_types": 1, "question": "from typing import List\n\ndef pokemon(pokemons: List[List[int]], balls: List[List[int]], r: int)->int:\n    \"\"\"In the Pokémon world, Professor Oak invites Ash to participate in a Pokémon-catching drill. A vast field is dotted with many Pokémon, and each Pokémon's information is recorded as [xi, yi, ri], with (xi, yi) being their Global Positioning System (GPS) coordinates and ri as their catch radius. Ash has a set of Master Balls, each with a fixed catch radius R, and the coordinates of each Master Ball are recorded as [xj, yj] in the array balls[j]. The rules for catching Pokémon with Master Balls in this drill are as follows:\n        If any part of a Pokémon, including its edges, is inside or on the border of a Master Ball, then it is considered successfully caught.\n        If a Pokémon is simultaneously caught by multiple Master Balls, it only counts as one successful catch.\n        Please help Ash to calculate how many Pokémon he has successfully caught in total.\n    Note:\n        The input data guarantees that no two Pokémon have the same GPS coordinates; however, their catch radiuses may overlap.\n    >>> pokemon([[1,3,2],[4,3,1],[7,1,2]], [[1,0],[3,3]], 4)\n    2\n    >>> pokemon([[3,3,1],[3,2,1]], [[4,3]], 2)\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef pokemon(pokemons: List[List[int]], balls: List[List[int]], r: int)->int:\n    \"\"\"In the Pokémon world, Professor Oak invites Ash to participate in a Pokémon-catching drill. A vast field is dotted with many Pokémon, and each Pokémon's information is recorded as [xi, yi, ri], with (xi, yi) being their Global Positioning System (GPS) coordinates and ri as their catch radius. Ash has a set of Master Balls, each with a fixed catch radius R, and the coordinates of each Master Ball are recorded as [xj, yj] in the array balls[j]. The rules for catching Pokémon with Master Balls in this drill are as follows:\n        If any part of a Pokémon, including its edges, is inside or on the border of a Master Ball, then it is considered successfully caught.\n        If a Pokémon is simultaneously caught by multiple Master Balls, it only counts as one successful catch.\n        Please help Ash to calculate how many Pokémon he has successfully caught in total.\n    Note:\n        The input data guarantees that no two Pokémon have the same GPS coordinates; however, their catch radiuses may overlap.\n    >>> pokemon([[1,3,2],[4,3,1],[7,1,2]], [[1,0],[3,3]], 4)\n    2\n    >>> pokemon([[3,3,1],[3,2,1]], [[4,3]], 2)\n    1\n    \"\"\"", "function_name": "pokemon", "parameters": ["pokemons", "balls", "r"], "assert_statements": ["assert pokemon([[5,1,1],[3,1,2],[2,2,1]],[[1,1]],3) == 1", "assert pokemon([[1,3,1],[4,6,2],[7,6,1]],[[2,3],[6,7]],2) == 1", "assert pokemon([[11,2,2],[8,32,1],[7,1,3]],[[0,0],[3,3]], 2) == 0"]}
{"id": 10, "difficulty_types": 1, "question": "from typing import List\n\ndef shingen_impact_explore(nums: List[int]) -> int:\n    \"\"\"In a game called Shingen Impact, an explorer finds a series of ancient barriers in an undeveloped region\n    named Vateyt. These barriers are numbered from 0 to N-1. Each barrier conceals either a Healing Stele, \n    a Cursed Trap, or a neutral passage with nothing within:\n\n    - Healing Stele: Upon contact, it can restore vitality and elemental energy;\n    - Cursed Trap: Approaching it will incur a curse, consuming a certain amount of life;\n    - Neutral Passage: It will not impact the explorer in any way.\n\n    The effects of each barrier on the numeric value are recorded in the array 'nums'. The explorer must dispel the\n    influence of these barriers one by one to further explore new areas and uncover hidden secrets. Initially, the \n    explorer's life is at 1 (with no upper limit) and the plan was to explore each one according to the arrangement\n    order of the barriers. However, it was quickly discovered that heading directly into adventure might result in \n    life depletion. Thus, rearrangement of the exploration sequence is required, strategically placing those Cursed Traps\n    toward the end.\n\n    Therefore, the explorer needs to strategize. The explorer aims to minimally adjust the sequence order, ensuring his life\n    remains positive throughout the process. If there is no possible way to arrange the sequence of barriers to maintain \n    positive life, then the explorer must seek help from the deities and return a result of -1 (indicating the task is \n    unachievable).\n    >>> shingen_impact_explore([-300, 500, 0, -400, 0])\n    -1\n    >>> shingen_impact_explore([110,130,110,-250,-70,-110,-50,-50,90,150])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef shingen_impact_explore(nums: List[int]) -> int:\n    \"\"\"In a game called Shingen Impact, an explorer finds a series of ancient barriers in an undeveloped region\n    named Vateyt. These barriers are numbered from 0 to N-1. Each barrier conceals either a Healing Stele, \n    a Cursed Trap, or a neutral passage with nothing within:\n\n    - Healing Stele: Upon contact, it can restore vitality and elemental energy;\n    - Cursed Trap: Approaching it will incur a curse, consuming a certain amount of life;\n    - Neutral Passage: It will not impact the explorer in any way.\n\n    The effects of each barrier on the numeric value are recorded in the array 'nums'. The explorer must dispel the\n    influence of these barriers one by one to further explore new areas and uncover hidden secrets. Initially, the \n    explorer's life is at 1 (with no upper limit) and the plan was to explore each one according to the arrangement\n    order of the barriers. However, it was quickly discovered that heading directly into adventure might result in \n    life depletion. Thus, rearrangement of the exploration sequence is required, strategically placing those Cursed Traps\n    toward the end.\n\n    Therefore, the explorer needs to strategize. The explorer aims to minimally adjust the sequence order, ensuring his life\n    remains positive throughout the process. If there is no possible way to arrange the sequence of barriers to maintain \n    positive life, then the explorer must seek help from the deities and return a result of -1 (indicating the task is \n    unachievable).\n    >>> shingen_impact_explore([-300, 500, 0, -400, 0])\n    -1\n    >>> shingen_impact_explore([110,130,110,-250,-70,-110,-50,-50,90,150])\n    1\n    \"\"\"", "function_name": "shingen_impact_explore", "parameters": ["nums"], "assert_statements": ["assert shingen_impact_explore([-60,-140,0,0,20,150]) == -1", "assert shingen_impact_explore([-60,-140,100,100,-250,-50,-50,200,150]) == 3", "assert shingen_impact_explore([-70,-50,90,0,160,-110,-50,-170,-300,350,0,120,40]) == 4"]}
{"id": 11, "difficulty_types": 1, "question": "from typing import List\n\ndef can_square(bucket_list: List[int]) -> str:\n    \"\"\" Given a bucket_list with each entry as the number of squares in the bucket, determin if we can build a square using all the given squares. Output \"YES\" if we can, otherwise \"No\".\n    >>> can_square([14, 2])\n    YES\n    >>> can_square([1, 2, 3, 4, 5, 6, 7])\n    NO\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef can_square(bucket_list: List[int]) -> str:\n    \"\"\" Given a bucket_list with each entry as the number of squares in the bucket, determin if we can build a square using all the given squares. Output \"YES\" if we can, otherwise \"No\".\n    >>> can_square([14, 2])\n    YES\n    >>> can_square([1, 2, 3, 4, 5, 6, 7])\n    NO\n    \"\"\"", "function_name": "can_square", "parameters": ["bucket_list"], "assert_statements": ["assert can_square([1,2]) == \"NO\"", "assert can_square([3,4,5]) == \"NO\"", "assert can_square([9]) == \"YES\""]}
{"id": 12, "difficulty_types": 1, "question": "from typing import List\n\ndef find_champion(grid: List[List[int]]) -> int:\n    \"\"\"\n    In a competition with 'n' teams numbered from 0 to n - 1, you have a 2D boolean matrix 'grid' of size n x n.\n    For all pairs of teams 'i' and 'j' where 0 <= i, j <= n - 1 and i != j: if grid[i][j] == 1, team 'i' is stronger than team 'j'; otherwise, team 'j' is stronger.\n    A team will be the champion if no other team is stronger than it.\n    Return the team that will be the champion.\n    >>>find_champion([[0,1],[0,0]])\n    0\n    >>>find_champion([[0,0,1],[1,0,1],[0,0,0]])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_champion(grid: List[List[int]]) -> int:\n    \"\"\"\n    In a competition with 'n' teams numbered from 0 to n - 1, you have a 2D boolean matrix 'grid' of size n x n.\n    For all pairs of teams 'i' and 'j' where 0 <= i, j <= n - 1 and i != j: if grid[i][j] == 1, team 'i' is stronger than team 'j'; otherwise, team 'j' is stronger.\n    A team will be the champion if no other team is stronger than it.\n    Return the team that will be the champion.\n    >>>find_champion([[0,1],[0,0]])\n    0\n    >>>find_champion([[0,0,1],[1,0,1],[0,0,0]])\n    1\n    \"\"\"", "function_name": "find_champion", "parameters": ["grid"], "assert_statements": ["assert find_champion([[0,0,0],[1,0,0],[1,1,0]]) == 2", "assert find_champion([[0,0,0,0],[1,0,0,0],[1,1,0,1],[1,1,0,0]]) == 2", "assert find_champion([[0,0,1],[1,0,1],[0,0,0]]) ==1"]}
{"id": 13, "difficulty_types": 1, "question": "from typing import List\n\ndef get_highest_occurrence_count(number_list: List[int]) -> int:\n    \"\"\"\n    I was recently talking with my friend John who works as a data analyst.\n    He was telling me about some of the common tasks he has to do with the data sets he works with.\n    John mentioned he often needs to write little functions to calculate these frequencies. Last week, he was working with a data set of numbers and needed to find the total frequency of the number(s) that appear most often.\n    He asked if I could help him turn this task into a simple function. Here is a concise description of what it needs to do:\n\n    Given an array `nums` of positive integers, return the total frequency of the most frequent element(s) in the array `nums`.\n    The frequency of an element is the number of times it appears in the array.\n    >>>get_highest_occurrence_count([2,2,3,3])\n    4\n    >>>get_highest_occurrence_count([4,3,2,1])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_highest_occurrence_count(number_list: List[int]) -> int:\n    \"\"\"\n    I was recently talking with my friend John who works as a data analyst.\n    He was telling me about some of the common tasks he has to do with the data sets he works with.\n    John mentioned he often needs to write little functions to calculate these frequencies. Last week, he was working with a data set of numbers and needed to find the total frequency of the number(s) that appear most often.\n    He asked if I could help him turn this task into a simple function. Here is a concise description of what it needs to do:\n\n    Given an array `nums` of positive integers, return the total frequency of the most frequent element(s) in the array `nums`.\n    The frequency of an element is the number of times it appears in the array.\n    >>>get_highest_occurrence_count([2,2,3,3])\n    4\n    >>>get_highest_occurrence_count([4,3,2,1])\n    4\n    \"\"\"", "function_name": "get_highest_occurrence_count", "parameters": ["number_list"], "assert_statements": ["assert get_highest_occurrence_count([1,2,2,3,1,4]) == 4", "assert get_highest_occurrence_count([6,13,15,15,11,6,7,12,4,11]) == 6", "assert get_highest_occurrence_count([5]) == 1"]}
{"id": 14, "difficulty_types": 1, "question": "from typing import List\n\ndef get_max_diagonal_area(dimensions: List[List[int]]) -> int:\n    \"\"\"\n    You were given a 2D array of integers called dimensions representing the lengths and widths of different rectangles. For each index i (where 0 <= i < dimensions.length), dimensions[i][0] is the length of rectangle i and dimensions[i][1] is the width.\n    You needed to find the area of the rectangle with the longest diagonal.\n    If there were multiple rectangles with the same longest diagonal length, he needed to return the area of the rectangle with the largest area.\n    So in summary, given a 2D array of rectangle dimensions, the problem is asking:\n\n    Return the area of the rectangle with the longest diagonal. If there are multiple rectangles with the same max diagonal length, return the one with the largest area.\n    >>>get_max_diagonal_area([[1,2],[3,4]])\n    12\n    >>>get_max_diagonal_area([[10,8],[7,6]])\n    80\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_max_diagonal_area(dimensions: List[List[int]]) -> int:\n    \"\"\"\n    You were given a 2D array of integers called dimensions representing the lengths and widths of different rectangles. For each index i (where 0 <= i < dimensions.length), dimensions[i][0] is the length of rectangle i and dimensions[i][1] is the width.\n    You needed to find the area of the rectangle with the longest diagonal.\n    If there were multiple rectangles with the same longest diagonal length, he needed to return the area of the rectangle with the largest area.\n    So in summary, given a 2D array of rectangle dimensions, the problem is asking:\n\n    Return the area of the rectangle with the longest diagonal. If there are multiple rectangles with the same max diagonal length, return the one with the largest area.\n    >>>get_max_diagonal_area([[1,2],[3,4]])\n    12\n    >>>get_max_diagonal_area([[10,8],[7,6]])\n    80\n    \"\"\"", "function_name": "get_max_diagonal_area", "parameters": ["dimensions"], "assert_statements": ["assert get_max_diagonal_area([[3,4],[4,3]]) == 12", "assert get_max_diagonal_area([[4,7],[10,10],[3,7],[9,1],[5,7],[3,9],[10,4],[4,8]]) == 100", "assert get_max_diagonal_area([[3,7],[2,10],[3,4],[9,9],[5,10]]) == 81"]}
{"id": 15, "difficulty_types": 1, "question": "from typing import List\n\ndef find_smallest_missing_integer(nums: List[int]) -> int:\n    \"\"\"\n    You are given an integer array nums indexed from 0.\n\n    A prefix nums[0..i] is called an ordered prefix if for every 1 <= j <= i, nums[j] equals nums[j - 1] + 1. Note that a prefix with only nums[0] is considered an ordered prefix.\n\n    Return the smallest integer x such that x is greater than or equal to the sum of the longest ordered prefix of nums.\n\n    Note that x cannot already exist in the array nums.\n    >>>find_smallest_missing_integer([1,2,3,4,5])\n    15\n    >>>find_smallest_missing_integer([6,1])\n    7\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_smallest_missing_integer(nums: List[int]) -> int:\n    \"\"\"\n    You are given an integer array nums indexed from 0.\n\n    A prefix nums[0..i] is called an ordered prefix if for every 1 <= j <= i, nums[j] equals nums[j - 1] + 1. Note that a prefix with only nums[0] is considered an ordered prefix.\n\n    Return the smallest integer x such that x is greater than or equal to the sum of the longest ordered prefix of nums.\n\n    Note that x cannot already exist in the array nums.\n    >>>find_smallest_missing_integer([1,2,3,4,5])\n    15\n    >>>find_smallest_missing_integer([6,1])\n    7\n    \"\"\"", "function_name": "find_smallest_missing_integer", "parameters": ["nums"], "assert_statements": ["assert find_smallest_missing_integer([1]) == 2", "assert find_smallest_missing_integer([38]) == 39", "assert find_smallest_missing_integer([19,20,21,22]) == 82"]}
{"id": 16, "difficulty_types": 1, "question": "def find_calling_steps(ring: str, key: str) -> int:\n    \"\"\"Baba is the only country on the planet Padamiya. This country has absolute political power, is rich and powerful. Their forward King Abanov is the best generation of leaders in history, and has promoted the Baba country to unprecedented prosperity. But something happened recently that made him very distressed, because fewer and fewer people can find their destiny in this life.\n\n    There is a romantic legend in this ancient and mysterious country: the local telephone route consists of an unfixed rotation of a string of characters. There is a button in the center of the route. Only by spelling out the specific keyword in the fewest possible steps can you navigate the route. This will allow you to successfully contact the person destined for you in this life.\n    Here's how the phone dial is used: Initially, the first character of the ring is aligned with the 12:00 direction. Rotate the ring clockwise or counterclockwise to align the key character key[i] with the 12:00 direction. Then, click the center button. In this way, the keyword key[i] is considered to be correctly inputted. Each rotation of the dial to a new position and each click of the center button are counted as one step.\n\n    Can you provide the key words in the smallest steps that spell out all the characters to help local residents find their loved ones?\n\n    Among them, the ring and key only contain lowercase English letters. At the same time, the key can definitely be written through the ring.\n\n    1 <= ring.length, key.length <= 100\n    ring and key consist of only lower case English letters.\n    It is guaranteed that key could always be spelled by rotating ring.\n\n    >>> find_calling_steps(\"godding\", \"gd\")\n    4\n    >>> find_calling_steps(\"godding\", \"godding\")\n    13\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef find_calling_steps(ring: str, key: str) -> int:\n    \"\"\"Baba is the only country on the planet Padamiya. This country has absolute political power, is rich and powerful. Their forward King Abanov is the best generation of leaders in history, and has promoted the Baba country to unprecedented prosperity. But something happened recently that made him very distressed, because fewer and fewer people can find their destiny in this life.\n\n    There is a romantic legend in this ancient and mysterious country: the local telephone route consists of an unfixed rotation of a string of characters. There is a button in the center of the route. Only by spelling out the specific keyword in the fewest possible steps can you navigate the route. This will allow you to successfully contact the person destined for you in this life.\n    Here's how the phone dial is used: Initially, the first character of the ring is aligned with the 12:00 direction. Rotate the ring clockwise or counterclockwise to align the key character key[i] with the 12:00 direction. Then, click the center button. In this way, the keyword key[i] is considered to be correctly inputted. Each rotation of the dial to a new position and each click of the center button are counted as one step.\n\n    Can you provide the key words in the smallest steps that spell out all the characters to help local residents find their loved ones?\n\n    Among them, the ring and key only contain lowercase English letters. At the same time, the key can definitely be written through the ring.\n\n    1 <= ring.length, key.length <= 100\n    ring and key consist of only lower case English letters.\n    It is guaranteed that key could always be spelled by rotating ring.\n\n    >>> find_calling_steps(\"godding\", \"gd\")\n    4\n    >>> find_calling_steps(\"godding\", \"godding\")\n    13\n    \"\"\"", "function_name": "find_calling_steps", "parameters": ["ring", "key"], "assert_statements": ["assert find_calling_steps(\"Padamiya\", \"daad\") == 8", "assert find_calling_steps(\"nature\", \"art\") == 9", "assert find_calling_steps(\"yivnov\", \"vion\") == 11"]}
{"id": 17, "difficulty_types": 1, "question": "def get_palindromic_string(string1: str, string2: str) -> str:\n    \"\"\"If the reverse of a string is the same as the original string, the string is called a palindrome string.  \n    You are given two strings, please find a substring in the longer string that can be concatenated after the shorter string to form a palindrome string. \n    If it can be found, return the concatenated palindromic string. Otherwise, return None. \n    Note that if more than one substring matches, you need to return the longest one.\n    >>> get_palindromic_string(\"ab\", \"deba\")\n    \"abeba\"\n    >>> get_palindromic_string(\"uvw\", \"v\")\n    \"vv\"\n    >>> get_palindromic_string(\"abc\", \"abcd\")\n    \"\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_palindromic_string(string1: str, string2: str) -> str:\n    \"\"\"If the reverse of a string is the same as the original string, the string is called a palindrome string.  \n    You are given two strings, please find a substring in the longer string that can be concatenated after the shorter string to form a palindrome string. \n    If it can be found, return the concatenated palindromic string. Otherwise, return None. \n    Note that if more than one substring matches, you need to return the longest one.\n    >>> get_palindromic_string(\"ab\", \"deba\")\n    \"abeba\"\n    >>> get_palindromic_string(\"uvw\", \"v\")\n    \"vv\"\n    >>> get_palindromic_string(\"abc\", \"abcd\")\n    \"\"\n    \"\"\"", "function_name": "get_palindromic_string", "parameters": ["string1", "string2"], "assert_statements": ["assert get_palindromic_string(\"abcde\", \"dcba1234\") == \"abcdedcba\"", "assert get_palindromic_string(\"ab\", \"1234ba5665ba78\") == \"ab5665ba\"", "assert get_palindromic_string(\"ddc\", \"123d456dd789\") == \"ddcdd\""]}
{"id": 18, "difficulty_types": 1, "question": "from typing import List\n\ndef mahjong_practice(tiles:List[int])->int:\n    \"\"\"The game of mahjong requires four players, 144 tiles and two dice to roll. The goal of mahjong is similar to poker, in that the aim is to make matching sets and pairs. A set is three or four identical tiles (e.g. 111, 1111) or three consecutive tiles (e.g. 123), and a pair is two of the same tiles (often called ‘eyes’). To win mahjong a player must form four sets and one pair. A complete mahjong set of 144 tiles includes three suits, each suit contains four sets of tiles numbered one to nine. As mentioned, the goal is to create four sets of three tiles and a pair. The three types of sets a player can make are:\n    Pong! – a set of three identical tiles\n    Gang! – a set of four identical tiles\n    Chi! – a sequence of three consecutive tiles of the same suit \n    Now, for practice, regardless of the suits, just look at the numbers. Given a list of tiles, calculate the maximum number of groups that can form \"Pong\" or \"Chi\".\n    >>> mahjong_practice([2,2,2,3,4])\n    1\n    >>> mahjong_practice([2,2,2,3,4,1,3])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef mahjong_practice(tiles:List[int])->int:\n    \"\"\"The game of mahjong requires four players, 144 tiles and two dice to roll. The goal of mahjong is similar to poker, in that the aim is to make matching sets and pairs. A set is three or four identical tiles (e.g. 111, 1111) or three consecutive tiles (e.g. 123), and a pair is two of the same tiles (often called ‘eyes’). To win mahjong a player must form four sets and one pair. A complete mahjong set of 144 tiles includes three suits, each suit contains four sets of tiles numbered one to nine. As mentioned, the goal is to create four sets of three tiles and a pair. The three types of sets a player can make are:\n    Pong! – a set of three identical tiles\n    Gang! – a set of four identical tiles\n    Chi! – a sequence of three consecutive tiles of the same suit \n    Now, for practice, regardless of the suits, just look at the numbers. Given a list of tiles, calculate the maximum number of groups that can form \"Pong\" or \"Chi\".\n    >>> mahjong_practice([2,2,2,3,4])\n    1\n    >>> mahjong_practice([2,2,2,3,4,1,3])\n    2\n    \"\"\"", "function_name": "mahjong_practice", "parameters": ["tiles"], "assert_statements": ["assert mahjong_practice([9,9,8,8,7,7,6,6,6]) == 3", "assert mahjong_practice([1,2,2,4,5,5,8,8,9,1]) == 0", "assert mahjong_practice([1,2,3,3,4,5,5,6,7,7,8,9]) == 4"]}
{"id": 19, "difficulty_types": 1, "question": "from typing import List\n\n\ndef find_duplicate(nums: List[int]) -> int:\n    \"\"\"Floyd's cycle detection algorithm, also known as the \"tortoise and hare algorithm,\" is used to detect whether a linked list contains a cycle or loop.\n\n    In this algorithm, two pointers are used: the slow pointer (tortoise) and the fast pointer (hare). The slow pointer moves one step at a time, while the fast pointer moves two steps at a time. If there is a cycle in the linked list, eventually the fast pointer will catch up to the slow pointer and they will meet at a node in the cycle.\n\n    To detect the cycle, the algorithm starts by initializing both pointers to the head of the linked list. Then, the pointers move through the linked list as described above. If the fast pointer reaches the end of the list (i.e. it encounters a null pointer), then there is no cycle in the list. However, if the fast pointer catches up to the slow pointer, then there is a cycle in the list.\n\n    Once a cycle is detected, the algorithm can also find the starting point of the cycle. After the two pointers meet, the slow pointer is reset to the head of the list, and both pointers move one step at a time until they meet again. The node where they meet is the starting point of the cycle.\n\n    Floyd's cycle detection algorithm has a time complexity of O(n), where n is the length of the linked list. It is named after Robert W. Floyd, who described the algorithm in 1967.\n\n    Based on the above background, please find the repeated number in the array 'nums' of length n+1. The numbers in this array are all in the range [1, n].\n\n    1 <= n <= 10^5\n    nums.length == n + 1\n    1 <= nums[i] <= n\n    All the integers in nums appear only once except for precisely one integer which appears two or more times.\n\n    >>> find_duplicate([1,3,4,2,2])\n    2\n    >>> find_duplicate([3,1,3,4,2])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef find_duplicate(nums: List[int]) -> int:\n    \"\"\"Floyd's cycle detection algorithm, also known as the \"tortoise and hare algorithm,\" is used to detect whether a linked list contains a cycle or loop.\n\n    In this algorithm, two pointers are used: the slow pointer (tortoise) and the fast pointer (hare). The slow pointer moves one step at a time, while the fast pointer moves two steps at a time. If there is a cycle in the linked list, eventually the fast pointer will catch up to the slow pointer and they will meet at a node in the cycle.\n\n    To detect the cycle, the algorithm starts by initializing both pointers to the head of the linked list. Then, the pointers move through the linked list as described above. If the fast pointer reaches the end of the list (i.e. it encounters a null pointer), then there is no cycle in the list. However, if the fast pointer catches up to the slow pointer, then there is a cycle in the list.\n\n    Once a cycle is detected, the algorithm can also find the starting point of the cycle. After the two pointers meet, the slow pointer is reset to the head of the list, and both pointers move one step at a time until they meet again. The node where they meet is the starting point of the cycle.\n\n    Floyd's cycle detection algorithm has a time complexity of O(n), where n is the length of the linked list. It is named after Robert W. Floyd, who described the algorithm in 1967.\n\n    Based on the above background, please find the repeated number in the array 'nums' of length n+1. The numbers in this array are all in the range [1, n].\n\n    1 <= n <= 10^5\n    nums.length == n + 1\n    1 <= nums[i] <= n\n    All the integers in nums appear only once except for precisely one integer which appears two or more times.\n\n    >>> find_duplicate([1,3,4,2,2])\n    2\n    >>> find_duplicate([3,1,3,4,2])\n    3\n    \"\"\"", "function_name": "find_duplicate", "parameters": ["nums"], "assert_statements": ["assert find_duplicate([2, 2, 2, 2]) == 2", "assert find_duplicate([1, 1]) == 1", "assert find_duplicate([1, 2, 4, 4, 3]) == 4"]}
{"id": 20, "difficulty_types": 1, "question": "from typing import List\n\n\ndef majority_vote(nums: List[int]) -> List[int]:\n    \"\"\"The core idea of Majority voting method is consumption. First, we consider the basic Majority voting problem, such as finding a number that appears more than 1/2 of the total number of times in a set of number sequences (and assuming that this number always exists). We can directly use proof by contradiction to prove that there may be only one such number. The core idea of Majority voting algorithm is based on this fact:\n\n    Select two different numbers from the sequence and delete them every time. Finally, one number or several identical numbers are left, which is the element that appears more than half of the total. Assume that the elements that exist half of the maximum number of times in the current sequence are x, and the total length of the sequence is n. Then we can divide the array into two parts, one part is the same k elements x, and the other part is (n-k)/2 pairs of different elements. At this time, we assume that there is another element y with a frequency greater than half of the total, Then y should satisfy y>n/2 at this time, but according to our previous reasoning y should satisfy y<=(n-k)/2, which is contradictory.\n\n    Please follow the principle of Majority voting to find elements that appear more than n/3 times in a sequence of size n.\n\n    1 <= nums.length <= 5 * 10^4\n    -10^9 <= nums[i] <= 10^9\n\n    >>> majority_vote([3,2,3])\n    [3]\n    >>> majority_vote([1])\n    [1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef majority_vote(nums: List[int]) -> List[int]:\n    \"\"\"The core idea of Majority voting method is consumption. First, we consider the basic Majority voting problem, such as finding a number that appears more than 1/2 of the total number of times in a set of number sequences (and assuming that this number always exists). We can directly use proof by contradiction to prove that there may be only one such number. The core idea of Majority voting algorithm is based on this fact:\n\n    Select two different numbers from the sequence and delete them every time. Finally, one number or several identical numbers are left, which is the element that appears more than half of the total. Assume that the elements that exist half of the maximum number of times in the current sequence are x, and the total length of the sequence is n. Then we can divide the array into two parts, one part is the same k elements x, and the other part is (n-k)/2 pairs of different elements. At this time, we assume that there is another element y with a frequency greater than half of the total, Then y should satisfy y>n/2 at this time, but according to our previous reasoning y should satisfy y<=(n-k)/2, which is contradictory.\n\n    Please follow the principle of Majority voting to find elements that appear more than n/3 times in a sequence of size n.\n\n    1 <= nums.length <= 5 * 10^4\n    -10^9 <= nums[i] <= 10^9\n\n    >>> majority_vote([3,2,3])\n    [3]\n    >>> majority_vote([1])\n    [1]\n    \"\"\"", "function_name": "majority_vote", "parameters": ["nums"], "assert_statements": ["assert majority_vote([0, 0, 0]) == [0]", "assert majority_vote([2, 3]) == [2, 3]", "assert majority_vote([]) == []"]}
{"id": 21, "difficulty_types": 2, "question": "from typing import List\n\n\ndef complete_combustion(numbers: List[int]) -> List[float]:\n    \"\"\"Input to this function is a list representing the number of elements C, H and O in a\n    compound CxHyOz (z is not equal to 0). When this compound undergoes complete combustion with O2,\n    it produces only CO2 and H2O. The chemical equation is as follows:\n    CxHyOz + aO2 → bCO2 + cH2O\n    Please calculate a, b and c to balance the equation and ensure that the quantities of the three\n    elements are equal on both sides. The input list represents the quantities of C, H, and O in order.\n    Please return a list where the elements represent the quantities of O2, CO2 and H2O respectively.\n    >>> complete_combustion([1,2,1])\n    [1, 1, 1]\n    >>> complete_combustion([2,6,1])\n    [3, 2, 3]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef complete_combustion(numbers: List[int]) -> List[float]:\n    \"\"\"Input to this function is a list representing the number of elements C, H and O in a\n    compound CxHyOz (z is not equal to 0). When this compound undergoes complete combustion with O2,\n    it produces only CO2 and H2O. The chemical equation is as follows:\n    CxHyOz + aO2 → bCO2 + cH2O\n    Please calculate a, b and c to balance the equation and ensure that the quantities of the three\n    elements are equal on both sides. The input list represents the quantities of C, H, and O in order.\n    Please return a list where the elements represent the quantities of O2, CO2 and H2O respectively.\n    >>> complete_combustion([1,2,1])\n    [1, 1, 1]\n    >>> complete_combustion([2,6,1])\n    [3, 2, 3]\n    \"\"\"", "function_name": "complete_combustion", "parameters": ["numbers"], "assert_statements": ["assert complete_combustion([1, 4, 1]) == [1.5, 1, 2.0]", "assert complete_combustion([2, 4, 2]) == [2.0, 2, 2.0]", "assert complete_combustion([6, 12, 6]) == [6.0, 6, 6.0]"]}
{"id": 22, "difficulty_types": 2, "question": "from typing import List\n\ndef max_balance_factor(weights: List[int]) -> int:\n    \"\"\"Write a function to find the maximum balance factor of the given list 'weights'.\n    The maximum balance factor is the sum of a subset of 'weights' that can be removed to split\n    the remaining elements into two parts with equal sums. If no such balance factor exists, return 0.\n\n    Write a function to find the maximum balance factor of object w.\n    The maximum balance factor refers to the size of the sum that results from extracting\n    some or all elements from w, dividing them into two parts, and ensuring that the sums\n    of these two parts are equal. If such a maximum balance factor does not exist. return 0\n    >>> max_balance_factor([4, 2, 3, 9])\n    9\n    >>> max_balance_factor([7, 1, 9])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_balance_factor(weights: List[int]) -> int:\n    \"\"\"Write a function to find the maximum balance factor of the given list 'weights'.\n    The maximum balance factor is the sum of a subset of 'weights' that can be removed to split\n    the remaining elements into two parts with equal sums. If no such balance factor exists, return 0.\n\n    Write a function to find the maximum balance factor of object w.\n    The maximum balance factor refers to the size of the sum that results from extracting\n    some or all elements from w, dividing them into two parts, and ensuring that the sums\n    of these two parts are equal. If such a maximum balance factor does not exist. return 0\n    >>> max_balance_factor([4, 2, 3, 9])\n    9\n    >>> max_balance_factor([7, 1, 9])\n    0\n    \"\"\"", "function_name": "max_balance_factor", "parameters": ["weights"], "assert_statements": ["assert max_balance_factor([1, 2]) ==  0", "assert max_balance_factor([1, 2, 3, 4, 5, 6]) == 10", "assert max_balance_factor([1, 2, 3, 6]) == 6"]}
{"id": 23, "difficulty_types": 2, "question": "def laser_arrangement(m):\n    \"\"\"A military restricted area, represented by a square matrix with side length m,\n    requires the installation of laser defense systems. These lasers can be emitted horizontally,\n    vertically, or diagonally at a 45-degree angle to both ends. However, mutually intersecting\n    lasers will destroy each other. How many arrangements are there to reasonably arrange the\n    lasers to ensure complete coverage of the entire area without mutual destruction?\n    >>> laser_arrangement(4)\n    2\n    >>> laser_arrangement(2)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef laser_arrangement(m):\n    \"\"\"A military restricted area, represented by a square matrix with side length m,\n    requires the installation of laser defense systems. These lasers can be emitted horizontally,\n    vertically, or diagonally at a 45-degree angle to both ends. However, mutually intersecting\n    lasers will destroy each other. How many arrangements are there to reasonably arrange the\n    lasers to ensure complete coverage of the entire area without mutual destruction?\n    >>> laser_arrangement(4)\n    2\n    >>> laser_arrangement(2)\n    0\n    \"\"\"", "function_name": "laser_arrangement", "parameters": ["m"], "assert_statements": ["assert laser_arrangement(3) == 0", "assert laser_arrangement(9) == 352", "assert laser_arrangement(6) == 4"]}
{"id": 24, "difficulty_types": 2, "question": "from typing import List\n\ndef dice_probability(num: int) -> List[float]:\n    \"\"\"There is a regular tetrahedral dice with numbers 1, 2, 3, 4, and the mass distribution is uniform.\n    If you roll n of these dice, please return the probabilities of all possible sums in ascending order using a list.\n    >>> dice_probabitliy(1)\n    [0.25, 0.25, 0.25, 0.25]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef dice_probability(num: int) -> List[float]:\n    \"\"\"There is a regular tetrahedral dice with numbers 1, 2, 3, 4, and the mass distribution is uniform.\n    If you roll n of these dice, please return the probabilities of all possible sums in ascending order using a list.\n    >>> dice_probabitliy(1)\n    [0.25, 0.25, 0.25, 0.25]\n    \"\"\"", "function_name": "dice_probability", "parameters": ["num"], "assert_statements": ["assert dice_probability(2) == [1/16, 2/16, 3/16, 4/16, 3/16, 2/16, 1/16]", "assert dice_probability(3) == [1/64, 3/64, 6/64, 10/64, 12/64, 12/64, 10/64, 6/64, 3/64, 1/64]", "assert dice_probability(4) == [0.00390625, 0.015625, 0.0390625, 0.078125, 0.12109375, 0.15625, 0.171875, 0.15625, 0.12109375, 0.078125, 0.0390625, 0.015625, 0.00390625]"]}
{"id": 25, "difficulty_types": 2, "question": "from typing import List\n\ndef extract_times(water_map:List[List[str]]) -> int:\n    \"\"\"Given a water map which is a 2-D array representing underground water(\"1\") and soil(\"0\"), you are using a water pump\n    to extract water. Please calculate how many times do you need to turn on the pump. Note that if underground water is\n    interconnected, you only need to turn on the pump once. Connected underground water is formed by connecting adjacent lands\n    horizontally or vertically. You can assume that outside the grid is all surrounded by soil.\n    >>> extract_times([[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]])\n    3\n    >>> extract_times([[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"],[\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\"]])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef extract_times(water_map:List[List[str]]) -> int:\n    \"\"\"Given a water map which is a 2-D array representing underground water(\"1\") and soil(\"0\"), you are using a water pump\n    to extract water. Please calculate how many times do you need to turn on the pump. Note that if underground water is\n    interconnected, you only need to turn on the pump once. Connected underground water is formed by connecting adjacent lands\n    horizontally or vertically. You can assume that outside the grid is all surrounded by soil.\n    >>> extract_times([[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]])\n    3\n    >>> extract_times([[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"],[\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\"]])\n    2\n    \"\"\"", "function_name": "extract_times", "parameters": ["water_map"], "assert_statements": ["assert extract_times([[\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\"]]) == 1", "assert extract_times([[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]) == 1", "assert extract_times([[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"0\",\"0\"],[\"0\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"0\",\"0\"]]) == 5"]}
{"id": 26, "difficulty_types": 2, "question": "def pod_probability(m: int) -> float:\n    \"\"\"\n    An interstellar transport vessel is equipped with precisely m individual passenger pods, each uniquely assigned to m traveling spacefarers based on their purchased tickets. As a result of a minor malfunction in the boarding protocol, the initial spacefarer misplaces their boarding pass upon entry and subsequently selects a pod through a randomized selection process. The subsequent spacefarers will:\n\n    - Proceed to their pre-designated pod if it remains unoccupied, and\n    - Resort to an arbitrary choice of any remaining available pods whenever they encounter their designated pod to be already taken.\n\n    Considering this scenario, devise a function capable of determining with what probability the final spacefarer will occupy their originally assigned pod.\n\n    >>> pod_probability(1)\n    1.00000\n    >>> pod_probability(2)\n    0.50000\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef pod_probability(m: int) -> float:\n    \"\"\"\n    An interstellar transport vessel is equipped with precisely m individual passenger pods, each uniquely assigned to m traveling spacefarers based on their purchased tickets. As a result of a minor malfunction in the boarding protocol, the initial spacefarer misplaces their boarding pass upon entry and subsequently selects a pod through a randomized selection process. The subsequent spacefarers will:\n\n    - Proceed to their pre-designated pod if it remains unoccupied, and\n    - Resort to an arbitrary choice of any remaining available pods whenever they encounter their designated pod to be already taken.\n\n    Considering this scenario, devise a function capable of determining with what probability the final spacefarer will occupy their originally assigned pod.\n\n    >>> pod_probability(1)\n    1.00000\n    >>> pod_probability(2)\n    0.50000\n    \"\"\"", "function_name": "pod_probability", "parameters": ["m"], "assert_statements": ["assert pod_probability(1) == 1.0000", "assert pod_probability(2) == 0.50000", "assert pod_probability(5) == 0.50000"]}
{"id": 27, "difficulty_types": 2, "question": "def state_element(n: int) -> int:\n    \"\"\"\n    There is a sequence of x elements that are initially in a specific state. You first change the state of all the elements, then you change the state of every second element.\n\n    On the third iteration, you change the state of every third element (changing it from its current state to the opposite state). For the ith iteration, you change the state of every i-th element. For the nth iteration, you only change the state of the last element.\n\n    Return the number of elements that are in a specific state after x iterations.\n\n    >>> state_element(121)\n    11\n    >>> state_element(20)\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef state_element(n: int) -> int:\n    \"\"\"\n    There is a sequence of x elements that are initially in a specific state. You first change the state of all the elements, then you change the state of every second element.\n\n    On the third iteration, you change the state of every third element (changing it from its current state to the opposite state). For the ith iteration, you change the state of every i-th element. For the nth iteration, you only change the state of the last element.\n\n    Return the number of elements that are in a specific state after x iterations.\n\n    >>> state_element(121)\n    11\n    >>> state_element(20)\n    4\n    \"\"\"", "function_name": "state_element", "parameters": ["n"], "assert_statements": ["assert state_element(3) == 1", "assert state_element(0) == 0", "assert state_element(1) == 1"]}
{"id": 28, "difficulty_types": 2, "question": "from typing import List\n\ndef arrange_conference(windowsA: List[List[int]], windowsB: List[List[int]], conferenceTime: int) -> List[int]:\n    \"\"\"\n    Consider the time windows of availability for two separate parties, labeled as windowsA and windowsB, and the time span needed for a conference. Your task is to coordinate the earliest overlap in their schedules that can accommodate the conference length.\n\n    Should there be no compatible overlap allowing for the conference, the function should result in an empty list.\n\n    Each time window is structured as [opening, closing], composed of an opening time opening and a closing time closing, reflecting the period from opening to closing.\n\n    The input assures the integrity of the data: each party's time windows do not intersect amongst themselves. So for any pair of time windows [opening1, closing1] and [opening2, closing2] for the same party, it will be true that either opening1 > closing2 or opening2 > closing1.\n\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 8)\n    [60,68]\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 12)\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef arrange_conference(windowsA: List[List[int]], windowsB: List[List[int]], conferenceTime: int) -> List[int]:\n    \"\"\"\n    Consider the time windows of availability for two separate parties, labeled as windowsA and windowsB, and the time span needed for a conference. Your task is to coordinate the earliest overlap in their schedules that can accommodate the conference length.\n\n    Should there be no compatible overlap allowing for the conference, the function should result in an empty list.\n\n    Each time window is structured as [opening, closing], composed of an opening time opening and a closing time closing, reflecting the period from opening to closing.\n\n    The input assures the integrity of the data: each party's time windows do not intersect amongst themselves. So for any pair of time windows [opening1, closing1] and [opening2, closing2] for the same party, it will be true that either opening1 > closing2 or opening2 > closing1.\n\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 8)\n    [60,68]\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 12)\n    []\n    \"\"\"", "function_name": "arrange_conference", "parameters": ["windowsA", "windowsB", "conferenceTime"], "assert_statements": ["assert arrange_conference([[10,50],[60,120],[140,210]], [[0,15],[60,70]], 8) == [60,68]", "assert arrange_conference([[10,50],[60,120],[140,210]], [[0,15],[60,70]], 12) == []", "assert arrange_conference([[10,11],[60,70],[140,141]], [[10,15],[68,70], [140,150]], 10) == []"]}
{"id": 29, "difficulty_types": 2, "question": "from typing import List\n\ndef top_records(entry: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Imagine a dataset containing multiple records of athletes with different identification numbers, where each record is marked as entry, such that entry[i] = [IDi, pointsi] signifies the points earned by athlete IDi in a particular event. Your job is to determine the average of the highest five point totals for every athlete.\n\n    The response should be structured as a list of tuples, summary, where summary[j] = [IDj, topFiveAveragej] matches the IDj of the athlete and their average of the five highest point totals. This list, summary, must be ordered by the athlete's ID in ascending sequence.\n\n    To derive the average of the top five point totals for each athlete, add together the points of their five best performances and then apply integer division by 5.\n\n    >>> top_records(entry = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]])\n    [[1,87],[2,88]]\n    >>> top_records(entry = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]])\n    [[1,100],[7,100]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef top_records(entry: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Imagine a dataset containing multiple records of athletes with different identification numbers, where each record is marked as entry, such that entry[i] = [IDi, pointsi] signifies the points earned by athlete IDi in a particular event. Your job is to determine the average of the highest five point totals for every athlete.\n\n    The response should be structured as a list of tuples, summary, where summary[j] = [IDj, topFiveAveragej] matches the IDj of the athlete and their average of the five highest point totals. This list, summary, must be ordered by the athlete's ID in ascending sequence.\n\n    To derive the average of the top five point totals for each athlete, add together the points of their five best performances and then apply integer division by 5.\n\n    >>> top_records(entry = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]])\n    [[1,87],[2,88]]\n    >>> top_records(entry = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]])\n    [[1,100],[7,100]]\n    \"\"\"", "function_name": "top_records", "parameters": ["entry"], "assert_statements": ["assert top_records([[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]) == [[1,87],[2,88]]", "assert top_records([[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]) == [[1,100],[7,100]]", "assert top_records([[1,0],[2,0],[3,0],[4,0],[5,0],[1,0],[2,0],[3,0],[4,0],[5,0],[1,0],[2,0],[3,0],[4,0],[5,0],[1,0],[2,0],[3,0],[4,0],[5,0],[1,0],[2,0],[3,0],[4,0],[5,0]]) == [[1,0],[2,0],[3,0],[4,0],[5,0]]"]}
{"id": 30, "difficulty_types": 2, "question": "def sum_perfect_integer(lower_bound: int, higher_bound: int, n: int):\n    \"\"\"You are given positive integers lower_bound, higher_bound, and n.\n\n    A number is perfect if it meets both of the following conditions:\n\n    - The count of odd digits in the number is equal to the count of even digits.\n    - The number is divisible by n.\n    Return the number of perfect integers in the range [lower_bound, higher_bound].\n    >>> sum_perfect_integer(4, 4, 1)\n    0\n    >>> sum_perfect_integer(1, 10, 1)\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef sum_perfect_integer(lower_bound: int, higher_bound: int, n: int):\n    \"\"\"You are given positive integers lower_bound, higher_bound, and n.\n\n    A number is perfect if it meets both of the following conditions:\n\n    - The count of odd digits in the number is equal to the count of even digits.\n    - The number is divisible by n.\n    Return the number of perfect integers in the range [lower_bound, higher_bound].\n    >>> sum_perfect_integer(4, 4, 1)\n    0\n    >>> sum_perfect_integer(1, 10, 1)\n    1\n    \"\"\"", "function_name": "sum_perfect_integer", "parameters": ["lower_bound", "higher_bound", "n"], "assert_statements": ["assert sum_perfect_integer(4, 4, 1) == 0", "assert sum_perfect_integer(11, 23, 3) == 3", "assert sum_perfect_integer(2000, 2024, 5) == 1"]}
{"id": 31, "difficulty_types": 2, "question": "from typing import List\n\ndef maximum_size_after_removal(nums1: List[int], nums2: List[int]):\n    \"\"\" You are given two memory quantities nums1 and nums2 whose subscripts start from 0, and their lengths are both even n.\n\nYou\t must delete n / 2 elements from nums1 and n / 2 elements from nums2. After deletion, you insert the remaining elements from nums1 and nums2 into the set s.\n\nReturns the maximum number of possible collections\n     >>>  maximum_size_after_removal([3,4], [1,2])\n     2\n     >>>  maximum_size_after_removal([1,2,1,2], [1,1,1,1])\n     2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef maximum_size_after_removal(nums1: List[int], nums2: List[int]):\n    \"\"\" You are given two memory quantities nums1 and nums2 whose subscripts start from 0, and their lengths are both even n.\n\nYou\t must delete n / 2 elements from nums1 and n / 2 elements from nums2. After deletion, you insert the remaining elements from nums1 and nums2 into the set s.\n\nReturns the maximum number of possible collections\n     >>>  maximum_size_after_removal([3,4], [1,2])\n     2\n     >>>  maximum_size_after_removal([1,2,1,2], [1,1,1,1])\n     2\n    \"\"\"", "function_name": "maximum_size_after_removal", "parameters": ["nums1", "nums2"], "assert_statements": ["assert maximum_size_after_removal([7,1],[6,10]) == 2", "assert maximum_size_after_removal([3,6],[6,6]) == 2", "assert maximum_size_after_removal([10,3],[5,6]) == 2"]}
{"id": 32, "difficulty_types": 2, "question": "def get_maximum_special_substring(s: str) -> int:\n    \"\"\"Determine the length of the longest substring in a given string 's', which consists solely of a single lower English character and the entire substring appears at least three times in the string 's'.\nIf no such substring exists, return -1.\n    >>>get_maximum_special_substring(\"aaaa\")\n    2\n    >>>get_maximum_special_substring(\"aeebcccdd\")\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_maximum_special_substring(s: str) -> int:\n    \"\"\"Determine the length of the longest substring in a given string 's', which consists solely of a single lower English character and the entire substring appears at least three times in the string 's'.\nIf no such substring exists, return -1.\n    >>>get_maximum_special_substring(\"aaaa\")\n    2\n    >>>get_maximum_special_substring(\"aeebcccdd\")\n    1\n    \"\"\"", "function_name": "get_maximum_special_substring", "parameters": ["s"], "assert_statements": ["assert get_maximum_special_substring(\"ccc\") == 1", "assert get_maximum_special_substring(\"abcaba\") == 1", "assert get_maximum_special_substring(\"kkk\") == 1"]}
{"id": 33, "difficulty_types": 2, "question": "from typing import List\n\ndef find_peak(mountain: List[int]) -> List[int]:\n    \"\"\"\n    You need to identify all the peaks in a given array named 'mountain'.\n    A peak is defined as any element that is strictly greater than its neighbors.\n    Keep in mind that the first and last elements of the array cannot be considered as peaks.\n    Return the indices (positions) of all the peaks in the array, in any order.\n    >>> find_peak([1,2,4])\n    []\n    >>> find_peak([9,2,4,7,3])\n    [3]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_peak(mountain: List[int]) -> List[int]:\n    \"\"\"\n    You need to identify all the peaks in a given array named 'mountain'.\n    A peak is defined as any element that is strictly greater than its neighbors.\n    Keep in mind that the first and last elements of the array cannot be considered as peaks.\n    Return the indices (positions) of all the peaks in the array, in any order.\n    >>> find_peak([1,2,4])\n    []\n    >>> find_peak([9,2,4,7,3])\n    [3]\n    \"\"\"", "function_name": "find_peak", "parameters": ["mountain"], "assert_statements": ["assert find_peak([1,4,3,8,5]) == [1,3]", "assert find_peak([3,6,4,7]) == [1]", "assert find_peak([5,2,1]) == []"]}
{"id": 34, "difficulty_types": 2, "question": "from typing import List\n\ndef similar_matrix(mat: List[List[int]], k: int) -> bool:\n    \"\"\"\n    You have a matrix 'mat' sized m x n, starting with index 0.\n    Shift odd-numbered rows right and even-numbered rows left by 'k' positions.\n    Check if the final matrix is the same as the initial one.\n    Return True if they match, otherwise False.\n    >>>similar_matrix([[2,2]], 3)\n    True\n    >>>similar_matrix([[3,1,4,1],[1,4,3,1],[2,4,1,2]], 2)\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef similar_matrix(mat: List[List[int]], k: int) -> bool:\n    \"\"\"\n    You have a matrix 'mat' sized m x n, starting with index 0.\n    Shift odd-numbered rows right and even-numbered rows left by 'k' positions.\n    Check if the final matrix is the same as the initial one.\n    Return True if they match, otherwise False.\n    >>>similar_matrix([[2,2]], 3)\n    True\n    >>>similar_matrix([[3,1,4,1],[1,4,3,1],[2,4,1,2]], 2)\n    False\n    \"\"\"", "function_name": "similar_matrix", "parameters": ["mat", "k"], "assert_statements": ["assert similar_matrix([[2,2],[2,2]], 3) == True", "assert similar_matrix([[4,9,10,10],[9,3,8,4],[2,5,3,8],[6,1,10,4]], 5) == False", "assert similar_matrix([[1,2]], 1) == False"]}
{"id": 35, "difficulty_types": 2, "question": "from typing import List\n\ndef find_k_or(nums: List[int], k: int) -> int:\n    \"\"\"\n    You have an array of integers named 'nums' and an integer 'k'.\n    The 'K-or' of nums is a non-negative integer defined by the following condition:\n    The i-th bit of K-or is 1 if and only if there are at least 'k' elements in 'nums' with their i-th bit as 1.\n    Return the K-or value of nums.\n    Note: For an integer 'x', the i-th bit value is 1 if (2^i AND x) == 2^i, where AND is the bitwise AND operator.\n    >>>find_k_or([8,11,9,7],1)\n    15\n    >>>find_k_or([2,12,1,11,4,5],6)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_k_or(nums: List[int], k: int) -> int:\n    \"\"\"\n    You have an array of integers named 'nums' and an integer 'k'.\n    The 'K-or' of nums is a non-negative integer defined by the following condition:\n    The i-th bit of K-or is 1 if and only if there are at least 'k' elements in 'nums' with their i-th bit as 1.\n    Return the K-or value of nums.\n    Note: For an integer 'x', the i-th bit value is 1 if (2^i AND x) == 2^i, where AND is the bitwise AND operator.\n    >>>find_k_or([8,11,9,7],1)\n    15\n    >>>find_k_or([2,12,1,11,4,5],6)\n    0\n    \"\"\"", "function_name": "find_k_or", "parameters": ["nums", "k"], "assert_statements": ["assert find_k_or([9],1) == 9", "assert find_k_or([7],1) == 7", "assert find_k_or([8],1) == 8"]}
{"id": 36, "difficulty_types": 2, "question": "from typing import List\n\ndef max_profit(prices: List[int]) -> int:\n    \"\"\"\n    Given an array, its i-th element represents the price per ton of water on the i-th day. You can store water in a reservoir, and your reservoir has a capacity of 5 tons. Design an algorithm to calculate the maximum profit you can achieve. You can perform up to 2 storage and release operations for buying and selling.\n    Note: You must release water before storing it.\n\n    >>> max_profit([3,3,5,0,0,3,1,4])\n    30\n    >>> max_profit([1,2,3,4,5])\n    20\n    >>> max_profit([7,6,4,3,1])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_profit(prices: List[int]) -> int:\n    \"\"\"\n    Given an array, its i-th element represents the price per ton of water on the i-th day. You can store water in a reservoir, and your reservoir has a capacity of 5 tons. Design an algorithm to calculate the maximum profit you can achieve. You can perform up to 2 storage and release operations for buying and selling.\n    Note: You must release water before storing it.\n\n    >>> max_profit([3,3,5,0,0,3,1,4])\n    30\n    >>> max_profit([1,2,3,4,5])\n    20\n    >>> max_profit([7,6,4,3,1])\n    0\n    \"\"\"", "function_name": "max_profit", "parameters": ["prices"], "assert_statements": ["assert max_profit([3, 3, 5, 0, 0, 3, 1, 4]) == 30", "assert max_profit([1, 2, 3, 4, 5]) == 20", "assert max_profit([7, 6, 4, 3, 1]) == 0"]}
{"id": 37, "difficulty_types": 2, "question": "from typing import List\n\ndef winning_probability(numbers: List[int]) -> float:\n    \"\"\"In a raffle, lucky number is defined as containing only the factors 3, 5, 7, e.g. 15, 21. The system will generates a random set of numbers, \n    whoever picks the lucky number wins the prize. And no one knows the rules. Everyone picks numbers according to their preferences.\n    Everyone has their own lucky number. For Li, his lucky number is a number that contains 1, so in this raffle, Li will choose his lucky number first. \n    If there's no Li's lucky number in the set, he'll pick it at random.  \n    Can you help Li calculate the probability of winning the prize? \n    >>> winning_probability([1, 4, 12, 21, 33])\n    0.333\n    >>> winning_probability([35, 22, 11])\n    0\n    >>> winning_probability([2, 50, 24, 49])\n    0.25\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef winning_probability(numbers: List[int]) -> float:\n    \"\"\"In a raffle, lucky number is defined as containing only the factors 3, 5, 7, e.g. 15, 21. The system will generates a random set of numbers, \n    whoever picks the lucky number wins the prize. And no one knows the rules. Everyone picks numbers according to their preferences.\n    Everyone has their own lucky number. For Li, his lucky number is a number that contains 1, so in this raffle, Li will choose his lucky number first. \n    If there's no Li's lucky number in the set, he'll pick it at random.  \n    Can you help Li calculate the probability of winning the prize? \n    >>> winning_probability([1, 4, 12, 21, 33])\n    0.333\n    >>> winning_probability([35, 22, 11])\n    0\n    >>> winning_probability([2, 50, 24, 49])\n    0.25\n    \"\"\"", "function_name": "winning_probability", "parameters": ["numbers"], "assert_statements": ["assert abs(winning_probability([11, 42, 12, 21, 53])-0.33333) <= 1e-5", "assert abs(winning_probability([2, 50, 24, 49])-0.25) <= 1e-5", "assert abs(winning_probability([9, 27, 11, 31])-0) <= 1e-5"]}
{"id": 38, "difficulty_types": 2, "question": "from typing import List\n\ndef symmetry_number(n: int) -> List[int]:\n    \"\"\"If a number is equal to its inverse order, it is called a symmetric number, e.g., '121'. Noting that all single digits are symmetric numbers. If the binary of this symmetric number is also equal to the inverse order of its binary, it is called a binary symmetric number, e.g., '9', whose binary number is '1001'. Further, performing a 01 swap on the binary of the symmetric number to form a flipped binary. If the decimal number corresponding to the flipped binary is a symmetric number, it is called a flipped symmetric number, e.g., '9', whose binary is '1001' , the binary flip number is '0110' and the corresponding decimal number is '6'. Find the count of symmetric numbers, binary symmetric numbers, and flipped symmetric numbers for all natural numbers not greater than the given number.\n    >>> symmetry_number(10)\n    [9, 5, 6]\n    >>> symmetry_number(50)\n    [13, 6, 8]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef symmetry_number(n: int) -> List[int]:\n    \"\"\"If a number is equal to its inverse order, it is called a symmetric number, e.g., '121'. Noting that all single digits are symmetric numbers. If the binary of this symmetric number is also equal to the inverse order of its binary, it is called a binary symmetric number, e.g., '9', whose binary number is '1001'. Further, performing a 01 swap on the binary of the symmetric number to form a flipped binary. If the decimal number corresponding to the flipped binary is a symmetric number, it is called a flipped symmetric number, e.g., '9', whose binary is '1001' , the binary flip number is '0110' and the corresponding decimal number is '6'. Find the count of symmetric numbers, binary symmetric numbers, and flipped symmetric numbers for all natural numbers not greater than the given number.\n    >>> symmetry_number(10)\n    [9, 5, 6]\n    >>> symmetry_number(50)\n    [13, 6, 8]\n    \"\"\"", "function_name": "symmetry_number", "parameters": ["n"], "assert_statements": ["assert symmetry_number(1000) == [108, 10, 15]", "assert symmetry_number(2000) == [118, 10, 17]", "assert symmetry_number(10000) == [198, 12, 19]"]}
{"id": 39, "difficulty_types": 2, "question": "from typing import List\n\n\ndef brew_capability(brew_counts: List[int]) -> int:\n    \"\"\"\n    You are given an integer array `brew_counts`, where `brew_counts[i]` represents the number of brews needed for different batches of a certain brand of tea leaves. Calculate and return the brewing capacity of this brand of tea leaves.\n\n    A brand's brewing capacity is defined as the maximum value of b such that the given brand has b batches of tea leaves that have each been brewed at least b times. If there are multiple possible values for the brewing capacity, the brewing capacity is the maximum among them.\n\n    **Constraints:**\n\n    - `n == brew_counts.length`\n    - `1 <= n <= 5000`\n    - `0 <= brew_counts[i] <= 1000`\n\n    >>> brew_capability([3, 0, 6, 1, 5])\n    3\n    >>> brew_capability([1, 3, 1])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef brew_capability(brew_counts: List[int]) -> int:\n    \"\"\"\n    You are given an integer array `brew_counts`, where `brew_counts[i]` represents the number of brews needed for different batches of a certain brand of tea leaves. Calculate and return the brewing capacity of this brand of tea leaves.\n\n    A brand's brewing capacity is defined as the maximum value of b such that the given brand has b batches of tea leaves that have each been brewed at least b times. If there are multiple possible values for the brewing capacity, the brewing capacity is the maximum among them.\n\n    **Constraints:**\n\n    - `n == brew_counts.length`\n    - `1 <= n <= 5000`\n    - `0 <= brew_counts[i] <= 1000`\n\n    >>> brew_capability([3, 0, 6, 1, 5])\n    3\n    >>> brew_capability([1, 3, 1])\n    1\n    \"\"\"", "function_name": "brew_capability", "parameters": ["brew_counts"], "assert_statements": ["assert brew_capability([3, 0, 6, 1, 5]) == 3", "assert brew_capability([1, 3, 1]) == 1", "assert brew_capability([3, 0, 6, 1, 5, 6, 7, 4, 7, 9]) == 5"]}
{"id": 40, "difficulty_types": 2, "question": "from typing import List\n\ndef triangular_pair_of_a_to_b(a:int,b:int)->int: \n    \"\"\"A triangular number is a term in a sequence formed by the sum of natural numbers, with the nth triangular number represented as T_n, defined as T_n=1+2+3+...+n. This creates a sequence of triangular numbers: 1,3,6,10,15. Given two integer a and b, the sum from the a-th triangular number to the b-th triangular number (including a and b) called the sequence sum of triangular numbers. If there exists two triangular numbers Ti and Tj whose sum is equal to the sequence sum, then the two triangular numbers are called a triangular pair of a_to_b. Note that the sequence ab possibly has more than one triangle pair. For example, the triangular pairs of 3_to_4 are (1,15) and (6,10), because the third and fourth triangular numbers are 6 and 10, respectively. Given a and b (where a>1 and b>a+1), return the number of triangular pairs.\n    >>> triangular_pair_of_a_to_b(3,4)\n    2\n    >>> triangular_pair_of_a_to_b(3,5)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef triangular_pair_of_a_to_b(a:int,b:int)->int: \n    \"\"\"A triangular number is a term in a sequence formed by the sum of natural numbers, with the nth triangular number represented as T_n, defined as T_n=1+2+3+...+n. This creates a sequence of triangular numbers: 1,3,6,10,15. Given two integer a and b, the sum from the a-th triangular number to the b-th triangular number (including a and b) called the sequence sum of triangular numbers. If there exists two triangular numbers Ti and Tj whose sum is equal to the sequence sum, then the two triangular numbers are called a triangular pair of a_to_b. Note that the sequence ab possibly has more than one triangle pair. For example, the triangular pairs of 3_to_4 are (1,15) and (6,10), because the third and fourth triangular numbers are 6 and 10, respectively. Given a and b (where a>1 and b>a+1), return the number of triangular pairs.\n    >>> triangular_pair_of_a_to_b(3,4)\n    2\n    >>> triangular_pair_of_a_to_b(3,5)\n    0\n    \"\"\"", "function_name": "triangular_pair_of_a_to_b", "parameters": ["a", "b"], "assert_statements": ["assert triangular_pair_of_a_to_b(2,4) == 0", "assert triangular_pair_of_a_to_b(3,30) == 6", "assert triangular_pair_of_a_to_b(2,40) == 4"]}
{"id": 41, "difficulty_types": 3, "question": "from typing import List\n\ndef next_fibonacci(numbers: List[int]) -> List[int]:\n    \"\"\"Given a sequence, where each number is greater than 10000 and belongs to the Fibonacci sequence,\n    this function quickly calculates the next Fibonacci number for each individual number and returns\n    them in a list in the order they were given.\n    >>> next_fibonacci([196418, 121393, 10946])\n    [317811, 196418, 17711]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef next_fibonacci(numbers: List[int]) -> List[int]:\n    \"\"\"Given a sequence, where each number is greater than 10000 and belongs to the Fibonacci sequence,\n    this function quickly calculates the next Fibonacci number for each individual number and returns\n    them in a list in the order they were given.\n    >>> next_fibonacci([196418, 121393, 10946])\n    [317811, 196418, 17711]\n    \"\"\"", "function_name": "next_fibonacci", "parameters": ["numbers"], "assert_statements": ["assert next_fibonacci([86267571272, 139583862445, 10946]) == [139583862445, 225851433717, 17711]", "assert next_fibonacci([46368, 10610209857723]) == [75025, 17167680177565]", "assert next_fibonacci([10946, 28657, 46368, 75025]) == [17711, 46368, 75025, 121393]"]}
{"id": 42, "difficulty_types": 3, "question": "from typing import List\n\ndef largest_multiple_of_three(digits: List[int]) -> str:\n    \"\"\"Given an array, concatenate any number of digits in any order to form the largest number that is divisible by 3,\n    and return it in string type. If such a number does not exist, return an empty string. Also, remember to remove\n    any unnecessary leading zeros.\n    >>> largest_multiple_of_three([1])\n    \"\"\n    >>> largest_multiple_of_three([1, 9, 9, 7])\n    \"99\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef largest_multiple_of_three(digits: List[int]) -> str:\n    \"\"\"Given an array, concatenate any number of digits in any order to form the largest number that is divisible by 3,\n    and return it in string type. If such a number does not exist, return an empty string. Also, remember to remove\n    any unnecessary leading zeros.\n    >>> largest_multiple_of_three([1])\n    \"\"\n    >>> largest_multiple_of_three([1, 9, 9, 7])\n    \"99\"\n    \"\"\"", "function_name": "largest_multiple_of_three", "parameters": ["digits"], "assert_statements": ["assert largest_multiple_of_three([1,0,0,0,0,0,0,0,1,0]) == \"0\"", "assert largest_multiple_of_three([9,8,6,8,6]) == \"966\"", "assert largest_multiple_of_three([8,7,0,7,7]) == \"7770\""]}
{"id": 43, "difficulty_types": 3, "question": "def largest_number(n: int, x: int) -> int:\n    \"\"\"When Jason was typing on the keyboard, he noticed that the editor malfunctioned. Despite having\n    already entered an integer, he wants to rearrange the digits of this integer to obtain the largest\n    possible integer. Currently, he can perform the following operation for any number of times:\n    move one digit from the first x digits of the integer to the end. Please calculate and provide the\n    maximum integer that can be obtained.\n    >>> largest_number(28981, 1)\n    98128\n    >>> largest_number(18929, 2)\n    99821\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef largest_number(n: int, x: int) -> int:\n    \"\"\"When Jason was typing on the keyboard, he noticed that the editor malfunctioned. Despite having\n    already entered an integer, he wants to rearrange the digits of this integer to obtain the largest\n    possible integer. Currently, he can perform the following operation for any number of times:\n    move one digit from the first x digits of the integer to the end. Please calculate and provide the\n    maximum integer that can be obtained.\n    >>> largest_number(28981, 1)\n    98128\n    >>> largest_number(18929, 2)\n    99821\n    \"\"\"", "function_name": "largest_number", "parameters": ["n", "x"], "assert_statements": ["assert largest_number(28981279878, 1) == 98782898127", "assert largest_number(28981279878, 3) == 99888877221", "assert largest_number(86539870, 4) == 98876530"]}
{"id": 44, "difficulty_types": 3, "question": "from typing import List\n\ndef num_even_product(nums: List[int]) -> int:\n    \"\"\"Given an integer array nums, return the number of subarrays of this array with an even product.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    >>> num_even_product([1,2,3,4])\n    8\n    >>> num_even_product([3,9,11])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef num_even_product(nums: List[int]) -> int:\n    \"\"\"Given an integer array nums, return the number of subarrays of this array with an even product.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    >>> num_even_product([1,2,3,4])\n    8\n    >>> num_even_product([3,9,11])\n    0\n    \"\"\"", "function_name": "num_even_product", "parameters": ["nums"], "assert_statements": ["assert num_even_product([7,3,2,4,2,2,4,9,11,20,429]) == 59", "assert num_even_product([7,3,20,29,7,6,1,2,8,2,4,6,1,8]) == 97", "assert num_even_product([11,3,7,5,3,9]) == 0"]}
{"id": 45, "difficulty_types": 3, "question": "def counting_game(n: int) -> int:\n    \"\"\"In a playful counting game, children start counting from 1 but they skip any number that contains the digit 9,\n    considering it to be unlucky. This results in a sequence that avoids the number 9 entirely,\n    such as 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, and so forth.\n\n    Given an integer n, return the nth number in this new integer sequence where the indexing begins at 1.\n    >>> counting_game(4)\n    4\n    >>> counting_game(10)\n    11\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef counting_game(n: int) -> int:\n    \"\"\"In a playful counting game, children start counting from 1 but they skip any number that contains the digit 9,\n    considering it to be unlucky. This results in a sequence that avoids the number 9 entirely,\n    such as 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, and so forth.\n\n    Given an integer n, return the nth number in this new integer sequence where the indexing begins at 1.\n    >>> counting_game(4)\n    4\n    >>> counting_game(10)\n    11\n    \"\"\"", "function_name": "counting_game", "parameters": ["n"], "assert_statements": ["assert counting_game(8) == 8", "assert counting_game(9) == 10", "assert counting_game(39) == 43"]}
{"id": 46, "difficulty_types": 3, "question": "def longest_string(a: int, b: int, c: int) -> int:\n    \"\"\"\n    You are given three integers a, b, and c.\n\n    You have a strings equal to \"OO\", b strings equal to \"PP\", and c strings equal to \"OP\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"OOO\" or \"PPP\" as a substring.\n\n    Return the maximum possible length of the new string.\n\n    A substring is a contiguous non-empty sequence of characters within a string.\n\n    >>> longestString(2,5,1)\n    12\n    >>> longestString(3,2,2)\n    14\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef longest_string(a: int, b: int, c: int) -> int:\n    \"\"\"\n    You are given three integers a, b, and c.\n\n    You have a strings equal to \"OO\", b strings equal to \"PP\", and c strings equal to \"OP\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"OOO\" or \"PPP\" as a substring.\n\n    Return the maximum possible length of the new string.\n\n    A substring is a contiguous non-empty sequence of characters within a string.\n\n    >>> longestString(2,5,1)\n    12\n    >>> longestString(3,2,2)\n    14\n    \"\"\"", "function_name": "longest_string", "parameters": ["a", "b", "c"], "assert_statements": ["assert longest_string(1,6,7) == 20", "assert longest_string(2,2,3) == 14", "assert longest_string(5,2,1) == 12"]}
{"id": 47, "difficulty_types": 3, "question": "from typing import List\n\ndef nums_erase(nums: List[int]) -> bool:\n    \"\"\"\n    You are provided with a sequence of whole numbers delineated as 'nums', inscribed upon an erasable surface intended for mathematical notation.\n\n    Participants named Alice and Bob sequentially undertake the action of removing exactly a single numeral from the aforementioned surface, with the initiator of this sequence being Alice. The objective for each participant is to avoid the situation where the cumulative application of an exclusive binary disjunction operation across all remaining numerical elements results in a nil value; such an outcome would render the active player the defeated party. In this context, the exclusive binary disjunction of a singular element is equivalent to the element itself, and when no elements are present, the result of the operation is zero.\n\n    Further to this, should a player commence their phase of activity with the total binary disjunction of all extant numbers on the erasable surface equaling zero, this circumstance immediately confers victory upon them.\n\n    The query at hand seeks a confirmation of whether Alice is assured victory under the stipulation that each contender employs strategies of the highest caliber. Respond with an affirmation if the probability of Alice winning under these conditions is absolute.\n\n    >>> nums_erase([1,1,2])\n    False\n    >>> nums_erase([0,1])\n    True\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef nums_erase(nums: List[int]) -> bool:\n    \"\"\"\n    You are provided with a sequence of whole numbers delineated as 'nums', inscribed upon an erasable surface intended for mathematical notation.\n\n    Participants named Alice and Bob sequentially undertake the action of removing exactly a single numeral from the aforementioned surface, with the initiator of this sequence being Alice. The objective for each participant is to avoid the situation where the cumulative application of an exclusive binary disjunction operation across all remaining numerical elements results in a nil value; such an outcome would render the active player the defeated party. In this context, the exclusive binary disjunction of a singular element is equivalent to the element itself, and when no elements are present, the result of the operation is zero.\n\n    Further to this, should a player commence their phase of activity with the total binary disjunction of all extant numbers on the erasable surface equaling zero, this circumstance immediately confers victory upon them.\n\n    The query at hand seeks a confirmation of whether Alice is assured victory under the stipulation that each contender employs strategies of the highest caliber. Respond with an affirmation if the probability of Alice winning under these conditions is absolute.\n\n    >>> nums_erase([1,1,2])\n    False\n    >>> nums_erase([0,1])\n    True\n    \"\"\"", "function_name": "nums_erase", "parameters": ["nums"], "assert_statements": ["assert nums_erase([1,1,2]) == False", "assert nums_erase([0,1]) == True", "assert nums_erase([1,2,3]) == True"]}
{"id": 48, "difficulty_types": 3, "question": "from typing import List\n\ndef is_vshape(points: List[List[int]]) -> bool:\n    \"\"\"\n    Suppose you have a list `vertices`, with each element vertices[i] = [ai, bi] signifying the coordinates of a vertex in a 2D space. Can these vertices create a shape resembling a V, where no three vertices are collinear and each is unique? The function should return `true` if such a formation is possible.\n    >>> is_vshape([[1,1], [2,3], [3,2]])\n    true\n    >>> is_vshape([[1,1], [2,2], [3,3]])\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef is_vshape(points: List[List[int]]) -> bool:\n    \"\"\"\n    Suppose you have a list `vertices`, with each element vertices[i] = [ai, bi] signifying the coordinates of a vertex in a 2D space. Can these vertices create a shape resembling a V, where no three vertices are collinear and each is unique? The function should return `true` if such a formation is possible.\n    >>> is_vshape([[1,1], [2,3], [3,2]])\n    true\n    >>> is_vshape([[1,1], [2,2], [3,3]])\n    false\n    \"\"\"", "function_name": "is_vshape", "parameters": ["points"], "assert_statements": ["assert is_vshape([[1,1], [2,3], [3,2]]) == True", "assert is_vshape([[1,1], [2,2], [3,3]]) == False", "assert is_vshape([[1,3],[2,1],[3,3]]) == True"]}
{"id": 49, "difficulty_types": 3, "question": "from typing import List\n\ndef max_count(banned: List[int], n: int, maxSum: int) -> int:\n    \"\"\"\n    Given an array of integers `banned`, and two additional integers `n` and `maxSum`, determine the maximum number of integers you can select under the following conditions:\n\n    1.You may only choose from integers within the inclusive range from 1 to `n`.\n    2.You cannot select the same integer more than once.\n    3.None of the selected integers should appear in the `banned` array.\n    4.The total sum of the selected integers must not surpass `maxSum`.\n\n    Can you calculate the largest possible count of integers that can be chosen adhering to these criteria?\n\n    >>> max_count([1,4,6], 6, 4)\n    1\n    Explanation: You can choose the integer 3. It is within the range [1, 6], not in the banned list, and the sum of chosen integers is 3, which does not exceed maxSum.\n    >>> max_count([4,3,5,6], 7, 18)\n    3\n    Explanation: You can choose integers 1, 2, and 7. They all fall within the range [1, 7], none are in the banned list, and the sum of chosen integers is 10, which does not exceed maxSum.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_count(banned: List[int], n: int, maxSum: int) -> int:\n    \"\"\"\n    Given an array of integers `banned`, and two additional integers `n` and `maxSum`, determine the maximum number of integers you can select under the following conditions:\n\n    1.You may only choose from integers within the inclusive range from 1 to `n`.\n    2.You cannot select the same integer more than once.\n    3.None of the selected integers should appear in the `banned` array.\n    4.The total sum of the selected integers must not surpass `maxSum`.\n\n    Can you calculate the largest possible count of integers that can be chosen adhering to these criteria?\n\n    >>> max_count([1,4,6], 6, 4)\n    1\n    Explanation: You can choose the integer 3. It is within the range [1, 6], not in the banned list, and the sum of chosen integers is 3, which does not exceed maxSum.\n    >>> max_count([4,3,5,6], 7, 18)\n    3\n    Explanation: You can choose integers 1, 2, and 7. They all fall within the range [1, 7], none are in the banned list, and the sum of chosen integers is 10, which does not exceed maxSum.\n    \"\"\"", "function_name": "max_count", "parameters": ["banned", "n", "maxSum"], "assert_statements": ["assert max_count([1,4,6], 6, 4) == 1", "assert max_count([4,3,5,6], 7, 18) == 3", "assert max_count([1,3,4,7], 7, 7) == 2"]}
{"id": 50, "difficulty_types": 3, "question": "def ab_string(x: int, y: int, z: int) -> int:\n    \"\"\"In the beading activity, there are x number of 'AA', y number of 'BB', and z number of 'AB' letter style beads. Beads are indivisible, and we do not want 'AAA' and 'BBB' to exist in the final product. What is the maximum length that can be made by connecting these beads?\n    NOTE: It is not necessary to use all the beads. The final product will not be connected end to end.\n\n    1 <= x, y, z <= 10^5\n\n    >>> ab_string(2,5,1)\n    12\n    >>> ab_string(3,2,2)\n    14\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef ab_string(x: int, y: int, z: int) -> int:\n    \"\"\"In the beading activity, there are x number of 'AA', y number of 'BB', and z number of 'AB' letter style beads. Beads are indivisible, and we do not want 'AAA' and 'BBB' to exist in the final product. What is the maximum length that can be made by connecting these beads?\n    NOTE: It is not necessary to use all the beads. The final product will not be connected end to end.\n\n    1 <= x, y, z <= 10^5\n\n    >>> ab_string(2,5,1)\n    12\n    >>> ab_string(3,2,2)\n    14\n    \"\"\"", "function_name": "ab_string", "parameters": ["x", "y", "z"], "assert_statements": ["assert ab_string(50, 50, 50) == 300", "assert ab_string(1, 1, 1) == 6", "assert ab_string(30, 12, 1) == 52"]}
{"id": 51, "difficulty_types": 3, "question": "from typing import List\n\ndef check_tail_zeros(nums: List[int]) -> bool:\n    \"\"\"Given an array of positive integers, determine if you can choose two or more elements from the array so that the bitwise OR of these numbers results in at least one zero at the end of its binary form.\n    >>>check_tail_zeros([1,2,10,12,20])\n    True\n    >>>check_tail_zeros([2,4,8,16])\n    True\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef check_tail_zeros(nums: List[int]) -> bool:\n    \"\"\"Given an array of positive integers, determine if you can choose two or more elements from the array so that the bitwise OR of these numbers results in at least one zero at the end of its binary form.\n    >>>check_tail_zeros([1,2,10,12,20])\n    True\n    >>>check_tail_zeros([2,4,8,16])\n    True\n    \"\"\"", "function_name": "check_tail_zeros", "parameters": ["nums"], "assert_statements": ["assert check_tail_zeros([3,9]) == False", "assert check_tail_zeros([6,8]) == True", "assert check_tail_zeros([8,8]) == True"]}
{"id": 52, "difficulty_types": 3, "question": "def divide_white_black(s: str) -> int:\n    \"\"\"\n    There are n balls on a table, each either black or white.\n\n    You have a binary string s of length n, starting from index 0, where '1' represents a black ball and '0' represents a white ball.\n\n    In each step, you can swap two adjacent balls.\n\n    Return the minimum number of steps required to move all black balls to the right and all white balls to the left.\n    >>>divide_white_black(\"001\")\n    0\n    >>>divide_white_black(\"1100\")\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef divide_white_black(s: str) -> int:\n    \"\"\"\n    There are n balls on a table, each either black or white.\n\n    You have a binary string s of length n, starting from index 0, where '1' represents a black ball and '0' represents a white ball.\n\n    In each step, you can swap two adjacent balls.\n\n    Return the minimum number of steps required to move all black balls to the right and all white balls to the left.\n    >>>divide_white_black(\"001\")\n    0\n    >>>divide_white_black(\"1100\")\n    4\n    \"\"\"", "function_name": "divide_white_black", "parameters": ["s"], "assert_statements": ["assert divide_white_black(\"0111\") == 0", "assert divide_white_black(\"100\") == 2", "assert divide_white_black(\"001\") == 0"]}
{"id": 53, "difficulty_types": 3, "question": "from typing import List\n\ndef minimum_sum(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    Given two arrays, 'nums1' and 'nums2', consisting of positive integers and zeros,\n    replace all zeros in both arrays with strictly positive integers so that the sum of elements in both arrays becomes equal.\n    Return the smallest possible equal sum. If it's not possible to make the sums equal, return -1.\n    >>>minimum_sum([1,4],[2,3])\n    5\n    >>>minimum_sum([2,4,6,8],[1,2])\n    -1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef minimum_sum(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    Given two arrays, 'nums1' and 'nums2', consisting of positive integers and zeros,\n    replace all zeros in both arrays with strictly positive integers so that the sum of elements in both arrays becomes equal.\n    Return the smallest possible equal sum. If it's not possible to make the sums equal, return -1.\n    >>>minimum_sum([1,4],[2,3])\n    5\n    >>>minimum_sum([2,4,6,8],[1,2])\n    -1\n    \"\"\"", "function_name": "minimum_sum", "parameters": ["nums1", "nums2"], "assert_statements": ["assert minimum_sum([2,0,2,0],[1,4]) == -1", "assert minimum_sum([3,2,0,1,0],[6,5,0]) == 12", "assert minimum_sum([23,19,24,0,8,19,30,0,14],[25,17,18,6,30]) == -1"]}
{"id": 54, "difficulty_types": 3, "question": "from typing import List\n\ndef is_maximum_sum_array(arr:List[int])->int:\n    \"\"\"Given an array of real numbers a[1] to a[n], you are allowed to perform any number of operations. In each operation, you select an index i such that 1 < i < n, and then update a[i] to a[i - 1] + a[i + 1] - a[i]. After several operations, the sum of the array becomes the maximum, and then do the same operation will not make the sum of the array become larger, then the array is called the maximum sum array. Given an array, determine whether the array is the maximum sum array.\n\n    >>> is_maximum_sum_array([1,3,2])\n    0\n    >>> is_maximum_sum_array([1,2,3])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef is_maximum_sum_array(arr:List[int])->int:\n    \"\"\"Given an array of real numbers a[1] to a[n], you are allowed to perform any number of operations. In each operation, you select an index i such that 1 < i < n, and then update a[i] to a[i - 1] + a[i + 1] - a[i]. After several operations, the sum of the array becomes the maximum, and then do the same operation will not make the sum of the array become larger, then the array is called the maximum sum array. Given an array, determine whether the array is the maximum sum array.\n\n    >>> is_maximum_sum_array([1,3,2])\n    0\n    >>> is_maximum_sum_array([1,2,3])\n    1\n    \"\"\"", "function_name": "is_maximum_sum_array", "parameters": ["arr"], "assert_statements": ["assert is_maximum_sum_array([13,6,3,2]) == 1", "assert is_maximum_sum_array([12,5,7,2,6,8,3,11]) == 0", "assert is_maximum_sum_array([1,4,5,11,12,19,20]) == 0"]}
{"id": 55, "difficulty_types": 3, "question": "def minimum_birds(num_containers: int) -> int:\n    \"\"\"\n    You have n sealed containers, each containing a different type of food. One of these foods is toxic, while the others are safe. You have some birds that can be used to test these foods. If a bird eats the toxic food, it will die approximately 24 hours later.\n\n    Your task is to find the most efficient method to determine the container number containing the toxic food, using as few birds as possible. Please write a program to calculate the minimum number of birds needed to ensure the identification of the container with toxic food.\n\n\n    >>> minimum_birds(8)\n    3\n    >>> minimum_birds(16)\n    4\n    >>> minimum_birds(1024)\n    10\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef minimum_birds(num_containers: int) -> int:\n    \"\"\"\n    You have n sealed containers, each containing a different type of food. One of these foods is toxic, while the others are safe. You have some birds that can be used to test these foods. If a bird eats the toxic food, it will die approximately 24 hours later.\n\n    Your task is to find the most efficient method to determine the container number containing the toxic food, using as few birds as possible. Please write a program to calculate the minimum number of birds needed to ensure the identification of the container with toxic food.\n\n\n    >>> minimum_birds(8)\n    3\n    >>> minimum_birds(16)\n    4\n    >>> minimum_birds(1024)\n    10\n    \"\"\"", "function_name": "minimum_birds", "parameters": ["num_containers"], "assert_statements": ["assert minimum_birds(8) == 3", "assert minimum_birds(16) == 4", "assert minimum_birds(1024) == 10"]}
{"id": 56, "difficulty_types": 3, "question": "def sit_on_seat(n: int) -> float:\n    \"\"\" \"Waiting for Spring\" is a popular movie released in early 2024, and it is hard to get a ticket. Therefore, it is no surprise that all the seats for this film in Hall 1 of Highway Cinema were sold out. It is known that there are n seats in Hall 1, and n spectators who purchased this event will be present.\n\n    Audiences don't particularly care about their seats. If no one is sitting in the seat they bought when they arrive, they will sit in their own seats. If the seats are already occupied, they will find a seat to watch the movie.\n\n    Unfortunately, the first person to arrive at the theater didn't remember where he was, so he sat down casually. A is the nth arriving passenger. What is the probability that he will be able to sit in his seat?\n\n    1 <= n <= 10^5\n\n    >>> sit_on_seat(1)\n    1\n    >>> sit_on_seat(2)\n    0.5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef sit_on_seat(n: int) -> float:\n    \"\"\" \"Waiting for Spring\" is a popular movie released in early 2024, and it is hard to get a ticket. Therefore, it is no surprise that all the seats for this film in Hall 1 of Highway Cinema were sold out. It is known that there are n seats in Hall 1, and n spectators who purchased this event will be present.\n\n    Audiences don't particularly care about their seats. If no one is sitting in the seat they bought when they arrive, they will sit in their own seats. If the seats are already occupied, they will find a seat to watch the movie.\n\n    Unfortunately, the first person to arrive at the theater didn't remember where he was, so he sat down casually. A is the nth arriving passenger. What is the probability that he will be able to sit in his seat?\n\n    1 <= n <= 10^5\n\n    >>> sit_on_seat(1)\n    1\n    >>> sit_on_seat(2)\n    0.5\n    \"\"\"", "function_name": "sit_on_seat", "parameters": ["n"], "assert_statements": ["assert sit_on_seat(6) == 0.5", "assert sit_on_seat(8) == 0.5", "assert sit_on_seat(9999) == 0.5"]}
{"id": 57, "difficulty_types": 3, "question": "from typing import List\n\ndef minimal_avg_distance(nums: List[int]) -> int:\n    \"\"\"The minimum distance of an array is defined as the minimum absolute value of the difference between any two elements, the maximum distance of an array is defined as the maximum absolute value of the difference between any two elements, and the average distance of an array is defined as 1/2 of the minimum distance and the maximum distance. Given an array, you have at most two times to replace an element with any value inside the array. Your goal is to make the average distance as small as possible and return the minimum average distance.\n    >>> minimal_avg_distance([1,4,3])\n    0\n    >>> minimal_avg_distance([1,4,7,8,5])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef minimal_avg_distance(nums: List[int]) -> int:\n    \"\"\"The minimum distance of an array is defined as the minimum absolute value of the difference between any two elements, the maximum distance of an array is defined as the maximum absolute value of the difference between any two elements, and the average distance of an array is defined as 1/2 of the minimum distance and the maximum distance. Given an array, you have at most two times to replace an element with any value inside the array. Your goal is to make the average distance as small as possible and return the minimum average distance.\n    >>> minimal_avg_distance([1,4,3])\n    0\n    >>> minimal_avg_distance([1,4,7,8,5])\n    3\n    \"\"\"", "function_name": "minimal_avg_distance", "parameters": ["nums"], "assert_statements": ["assert minimal_avg_distance([2,5,8,12,11,15]) == 7", "assert minimal_avg_distance([5,2,10,5,11]) == 3", "assert minimal_avg_distance([333,333,333,2,11]) == 0"]}
{"id": 58, "difficulty_types": 3, "question": "from typing import List\n\ndef fall_time(center:List[int],radius:int,position:List[List[int]])->int:\n    \"\"\" There is a round table with a delicious cake placed at its center. Several ants are positioned around the table, and each of them will walk the shortest distance towards the cake at a constant speed of 1 cm/s. Once an ant reaches the cake, it will walk away in any direction along the circumference of the table. However, when two ants collide, they will both turn and continue walking in the opposite direction, making a 180-degree turn. Your task is to calculate how much time it will take for the last ant to leave the table.\n    Given the coordinates of the center of the round table, the radius of the table, and the coordinates of all ants, return the latest time. Note, please round up the final result.\n    >>> fall_time([0,0],5,[[1,0]])\n    6\n    >>> fall_time([0,0],5,[[1,0],[2,0],[2,2]])\n    8\n    \n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef fall_time(center:List[int],radius:int,position:List[List[int]])->int:\n    \"\"\" There is a round table with a delicious cake placed at its center. Several ants are positioned around the table, and each of them will walk the shortest distance towards the cake at a constant speed of 1 cm/s. Once an ant reaches the cake, it will walk away in any direction along the circumference of the table. However, when two ants collide, they will both turn and continue walking in the opposite direction, making a 180-degree turn. Your task is to calculate how much time it will take for the last ant to leave the table.\n    Given the coordinates of the center of the round table, the radius of the table, and the coordinates of all ants, return the latest time. Note, please round up the final result.\n    >>> fall_time([0,0],5,[[1,0]])\n    6\n    >>> fall_time([0,0],5,[[1,0],[2,0],[2,2]])\n    8\n    \n    \"\"\"", "function_name": "fall_time", "parameters": ["center", "radius", "position"], "assert_statements": ["assert fall_time([0,0], 10, [[1,1], [-1,-2],[3,4]]) == 15", "assert fall_time([3,3], 3, [[2,2], [4,4],[3,4],[4,3],[3,5]]) == 5", "assert fall_time([-3,-2], 3, [[-2,-2], [-4,2],[-1,-2],[-2,-3]]) == 8"]}
{"id": 59, "difficulty_types": 3, "question": "from typing import List\n\ndef danger_corner(points:List[List[int]])->int:\n    \"\"\"Given n points on a 2D x-y plane, where the coordinates of each point are integers, these points form a polygon with each side either parallel to the x-axis or the y-axis, enclosing an area that represents a lake. Starting at the first coordinate and riding in order, you embark on a bike ride around the polygon back to the starting point. At certain points, if you forget to turn, you would end up in the lake. How many such points exist on the polygon where failing to turn would cause you to ride into the lake?\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,2],[2,2],[2,0]])\n    1\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,0]])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef danger_corner(points:List[List[int]])->int:\n    \"\"\"Given n points on a 2D x-y plane, where the coordinates of each point are integers, these points form a polygon with each side either parallel to the x-axis or the y-axis, enclosing an area that represents a lake. Starting at the first coordinate and riding in order, you embark on a bike ride around the polygon back to the starting point. At certain points, if you forget to turn, you would end up in the lake. How many such points exist on the polygon where failing to turn would cause you to ride into the lake?\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,2],[2,2],[2,0]])\n    1\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,0]])\n    0\n    \"\"\"", "function_name": "danger_corner", "parameters": ["points"], "assert_statements": ["assert danger_corner([[0,0],[0,4],[4,4],[4,0]]) == 0", "assert danger_corner([[0,0],[0,1],[2,1],[2,-1],[-1,-1],[1,0]]) == 1", "assert danger_corner([[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,2],[4,2],[4,1],[3,1],[3,0]]) == 4"]}
{"id": 60, "difficulty_types": 3, "question": "def reach_number(target: int) -> int:\n    \"\"\"A car starts from position 0 and drives on an infinite road. The car can move numMoves times, and each move can choose to move left or right. It is required that only i kilometers can be moved during the i-th move. Given the destination target, calculate the minimum number of moves required to reach the target (ie the minimum numMoves).\n\n    -10^9 <= target <= 10^9\n    target != 0\n\n    >>> reach_number(2)\n    3\n    >>> reach_number(3)\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef reach_number(target: int) -> int:\n    \"\"\"A car starts from position 0 and drives on an infinite road. The car can move numMoves times, and each move can choose to move left or right. It is required that only i kilometers can be moved during the i-th move. Given the destination target, calculate the minimum number of moves required to reach the target (ie the minimum numMoves).\n\n    -10^9 <= target <= 10^9\n    target != 0\n\n    >>> reach_number(2)\n    3\n    >>> reach_number(3)\n    2\n    \"\"\"", "function_name": "reach_number", "parameters": ["target"], "assert_statements": ["assert reach_number(-1000000000) == 44723", "assert reach_number(1000000000) == 44723", "assert reach_number(8) == 4"]}
{"id": 61, "difficulty_types": 4, "question": "def morning_commute(a: int, b: int, c: int, d: int):\n    \"\"\"There are two companies located at both ends of a straight road, with two towns in the middle.\n    Every morning, 'a' people from the left town commute to work at the left company and 'b' people commute\n    to the right company. From the right town, 'c' people commute to the left company and 'd' people commute\n    to the right company. Everyone walks at the same pace. Please calculate how many encounters occur in total on their commute to work each morning.\n    >>> morning_commute(7,3,4,6)\n    12\n    >>> morning_commute(17,31,13,40)\n    403\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef morning_commute(a: int, b: int, c: int, d: int):\n    \"\"\"There are two companies located at both ends of a straight road, with two towns in the middle.\n    Every morning, 'a' people from the left town commute to work at the left company and 'b' people commute\n    to the right company. From the right town, 'c' people commute to the left company and 'd' people commute\n    to the right company. Everyone walks at the same pace. Please calculate how many encounters occur in total on their commute to work each morning.\n    >>> morning_commute(7,3,4,6)\n    12\n    >>> morning_commute(17,31,13,40)\n    403\n    \"\"\"", "function_name": "morning_commute", "parameters": ["a", "b", "c", "d"], "assert_statements": ["assert morning_commute(3, 3, 3, 3) == 9", "assert morning_commute(3, 0, 3, 3) == 0", "assert morning_commute(0, 11, 7, 100) == 77"]}
{"id": 62, "difficulty_types": 4, "question": "def calculate_time(time1: str, time2: str) -> int:\n    \"\"\"Given two strings formatted as \"hh:mm:ss\" representing two time in one day, calculate the difference\n    in seconds between the two time. If the values are not within a reasonable range (for example, the hour\n    is greater than 24 or less than 0), please return -1.\n    >>> calculate_time(\"00:01:10\", \"05:06:58\")\n    18348\n    >>> calculate_time(\"08:10:00\", \"08:09:18\")\n    42\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef calculate_time(time1: str, time2: str) -> int:\n    \"\"\"Given two strings formatted as \"hh:mm:ss\" representing two time in one day, calculate the difference\n    in seconds between the two time. If the values are not within a reasonable range (for example, the hour\n    is greater than 24 or less than 0), please return -1.\n    >>> calculate_time(\"00:01:10\", \"05:06:58\")\n    18348\n    >>> calculate_time(\"08:10:00\", \"08:09:18\")\n    42\n    \"\"\"", "function_name": "calculate_time", "parameters": ["time1", "time2"], "assert_statements": ["assert calculate_time(\"11:03:15\", \"04:43:48\") == 22767", "assert calculate_time(\"08:21:00\", \"08:60:14\") == -1", "assert calculate_time(\"23:00:00\", \"12:51:28\") == 36512"]}
{"id": 63, "difficulty_types": 4, "question": "from typing import List\n\ndef max_water_container(height: List[int]) -> int:\n    \"\"\"Given an integer array 'height' of length 'n'. There are 'n' vertical lines where the ith line has\n    its two endpoints at (i, 0) and (i, height[i]). Find the two lines that, along with the x-axis, form a container,\n     which can hold the maximum amount of water. Return the maximum volume of water that the container can store.\n    Note: The container should not be tilted.\n    >>> max_water_container([1,1])\n    1\n    >>> max_water_container([1,2,3,4])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_water_container(height: List[int]) -> int:\n    \"\"\"Given an integer array 'height' of length 'n'. There are 'n' vertical lines where the ith line has\n    its two endpoints at (i, 0) and (i, height[i]). Find the two lines that, along with the x-axis, form a container,\n     which can hold the maximum amount of water. Return the maximum volume of water that the container can store.\n    Note: The container should not be tilted.\n    >>> max_water_container([1,1])\n    1\n    >>> max_water_container([1,2,3,4])\n    4\n    \"\"\"", "function_name": "max_water_container", "parameters": ["height"], "assert_statements": ["assert max_water_container([4,8,3,7,1,8,6,2,5]) == 35", "assert max_water_container([6,2,6,4,3,3,8,3]) == 36", "assert max_water_container([3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4]) == 104"]}
{"id": 64, "difficulty_types": 4, "question": "from typing import List\n\ndef from_starting_station(money: List[int], toll: List[int]) -> int:\n    \"\"\"There is a circular road with 'n' stations, each station has either a good person or a bad person.\n    A good person will give you money, while a bad person will charge you a certain toll. If you do not\n    have enough money to pay the toll, the bad person will not allow you to pass through.\n    Please find which station you can you start from so that you are able to make a complete loop and return\n    to your starting point. If a solution exists, it is guaranteed to be unique. The output should be the index\n    of the list.\n    >>> from_starting_station([2,3,4], [3,4,3])\n    -1\n    >>> from_starting_station([1,2,3,4,5], [3,4,5,1,2])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef from_starting_station(money: List[int], toll: List[int]) -> int:\n    \"\"\"There is a circular road with 'n' stations, each station has either a good person or a bad person.\n    A good person will give you money, while a bad person will charge you a certain toll. If you do not\n    have enough money to pay the toll, the bad person will not allow you to pass through.\n    Please find which station you can you start from so that you are able to make a complete loop and return\n    to your starting point. If a solution exists, it is guaranteed to be unique. The output should be the index\n    of the list.\n    >>> from_starting_station([2,3,4], [3,4,3])\n    -1\n    >>> from_starting_station([1,2,3,4,5], [3,4,5,1,2])\n    3\n    \"\"\"", "function_name": "from_starting_station", "parameters": ["money", "toll"], "assert_statements": ["assert from_starting_station([1,1,2,3], [1,1,3,4]) == -1", "assert from_starting_station([4,3,2,5,1], [1,2,3,4,5]) == 0", "assert from_starting_station([3,1,1,1,1,1,1,2,2,2,2], [1,1,1,1,1,1,2,2,2,2,2]) == 0"]}
{"id": 65, "difficulty_types": 4, "question": "from typing import List\n\ndef number_of_covered_point(tracks: List[List[int]]) -> int:\n    \"\"\"Given a 2D integer array 'tracks' representing intervals of trains parking on a railway track.\n    For any index i, tracks[i] = [start_i, end_i], where start_i is the starting point of the i_th train\n    and end_i is the ending point of the i_th train.\n\n    Return the number of integer points on the railway track covered by any part of the trains.\n    >>> number_of_covered_point([[1,4],[6,8]])\n    7\n    >>> number_of_covered_point([[3,6],[4,7],[6,8]])\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef number_of_covered_point(tracks: List[List[int]]) -> int:\n    \"\"\"Given a 2D integer array 'tracks' representing intervals of trains parking on a railway track.\n    For any index i, tracks[i] = [start_i, end_i], where start_i is the starting point of the i_th train\n    and end_i is the ending point of the i_th train.\n\n    Return the number of integer points on the railway track covered by any part of the trains.\n    >>> number_of_covered_point([[1,4],[6,8]])\n    7\n    >>> number_of_covered_point([[3,6],[4,7],[6,8]])\n    6\n    \"\"\"", "function_name": "number_of_covered_point", "parameters": ["tracks"], "assert_statements": ["assert number_of_covered_point([[1, 2], [1, 4], [3, 5]]) == 5", "assert number_of_covered_point([[1,5],[4,8],[7,10]]) == 10", "assert number_of_covered_point([[2, 6], [7, 10], [11, 15]]) == 14"]}
{"id": 66, "difficulty_types": 4, "question": "from typing import List\n\ndef sort_binary(arr: List[int]) -> List[int]:\n    \"\"\"\n    Arrange an array of integers in ascending order based on the count of 1's in their binary form. For integers with an identical count of 1's, order them according to their value in ascending sequence. The sorted array should then be returned.\n\n    >>> sort_binary([0,1,2,3,4,5,6,7,8])\n    [0,1,2,4,8,3,5,6,7]\n\n    >>> sort_binary([1024,512,256,128,64,32,16,8,4,2,1])\n    [1,2,4,8,16,32,64,128,256,512,1024]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef sort_binary(arr: List[int]) -> List[int]:\n    \"\"\"\n    Arrange an array of integers in ascending order based on the count of 1's in their binary form. For integers with an identical count of 1's, order them according to their value in ascending sequence. The sorted array should then be returned.\n\n    >>> sort_binary([0,1,2,3,4,5,6,7,8])\n    [0,1,2,4,8,3,5,6,7]\n\n    >>> sort_binary([1024,512,256,128,64,32,16,8,4,2,1])\n    [1,2,4,8,16,32,64,128,256,512,1024]\n    \"\"\"", "function_name": "sort_binary", "parameters": ["arr"], "assert_statements": ["assert sort_binary([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7]", "assert sort_binary([1024,512,256,128,64,32,16,8,4,2,1]) == [1,2,4,8,16,32,64,128,256,512,1024]", "assert sort_binary([10000,10000]) == [10000,10000]"]}
{"id": 67, "difficulty_types": 4, "question": "from typing import List\n\ndef convex_polygon(points: List[List[int]]) -> bool:\n    \"\"\"\n    Imagine that you have been supplied with an array of coordinate pairs, where each pair represents a point on the Cartesian coordinate plane. These coordinate pairs are contained in an array called points, where each element points[i] consists of a subarray [xi, yi] that in turn holds the x and y coordinates of the ith point. The task at hand is to take this series of points and establish connections between them in sequential order to construct the outline of a polygon.\n\n    Your challenge is to analyze this sequence of points and determine whether the resulting polygon is convex. An assumption you can safely make is that the series of points given will always form a simple polygon.\n\n    >>> convex_polygon([[0,0],[0,5],[5,5],[5,0]])\n    true\n    >>> convex_polygon([[0,0],[0,10],[10,10],[10,0],[5,5]])\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef convex_polygon(points: List[List[int]]) -> bool:\n    \"\"\"\n    Imagine that you have been supplied with an array of coordinate pairs, where each pair represents a point on the Cartesian coordinate plane. These coordinate pairs are contained in an array called points, where each element points[i] consists of a subarray [xi, yi] that in turn holds the x and y coordinates of the ith point. The task at hand is to take this series of points and establish connections between them in sequential order to construct the outline of a polygon.\n\n    Your challenge is to analyze this sequence of points and determine whether the resulting polygon is convex. An assumption you can safely make is that the series of points given will always form a simple polygon.\n\n    >>> convex_polygon([[0,0],[0,5],[5,5],[5,0]])\n    true\n    >>> convex_polygon([[0,0],[0,10],[10,10],[10,0],[5,5]])\n    false\n    \"\"\"", "function_name": "convex_polygon", "parameters": ["points"], "assert_statements": ["assert convex_polygon([[0,0],[0,5],[5,5],[5,0]]) == True", "assert convex_polygon([[0,0],[0,10],[10,10],[10,0],[5,5]]) == False", "assert convex_polygon([[0,0],[0,10],[5,15],[10,10],[10,0],[5,5]]) == False"]}
{"id": 68, "difficulty_types": 4, "question": "def knight_dialer(n: int) -> int:\n    \"\"\"Given a knight and a two-dimensional matrix chessboard [['1','2','3'],['4','5','6'],['7','8',' 9'],['*','0','#']]. Initially, the knight can be in any position on the chessboard and it can only stand on the numbered grids. The number at the knight's position will be recorded every time he takes a step. How many different numbers can the knight make when he takes n-1 steps?\n\n    As the answer may be very large, return the answer modulo 10^9 + 7.\n\n    1 <= n <= 5000\n\n    >>> knight_dialer(1)\n    10\n    >>> knight_dialer(2)\n    20\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef knight_dialer(n: int) -> int:\n    \"\"\"Given a knight and a two-dimensional matrix chessboard [['1','2','3'],['4','5','6'],['7','8',' 9'],['*','0','#']]. Initially, the knight can be in any position on the chessboard and it can only stand on the numbered grids. The number at the knight's position will be recorded every time he takes a step. How many different numbers can the knight make when he takes n-1 steps?\n\n    As the answer may be very large, return the answer modulo 10^9 + 7.\n\n    1 <= n <= 5000\n\n    >>> knight_dialer(1)\n    10\n    >>> knight_dialer(2)\n    20\n    \"\"\"", "function_name": "knight_dialer", "parameters": ["n"], "assert_statements": ["assert knight_dialer(3131) == 136006598", "assert knight_dialer(5000) == 406880451", "assert knight_dialer(2345) == 131479399"]}
{"id": 69, "difficulty_types": 4, "question": "import heapq\nfrom typing import List\n\n\ndef trap_water(heightMap: List[List[int]]) -> int:\n    \"\"\"When designing a landmark building composed of multiple cuboids with a base area of ​​1*1, the designer wants to calculate the water storage capacity on its roof. Given the building covers a total area of ​​m*n, and the height is provided by a two-dimensional matrix.\n\n    m == heightMap.length\n    n == heightMap[i].length\n    1 <= m, n <= 200\n    0 <= heightMap[i][j] <= 2 * 10^4\n\n    >>> trapRainWater([[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]])\n    4\n    >>> trapRainWater([[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]])\n    10\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nimport heapq\nfrom typing import List\n\n\ndef trap_water(heightMap: List[List[int]]) -> int:\n    \"\"\"When designing a landmark building composed of multiple cuboids with a base area of ​​1*1, the designer wants to calculate the water storage capacity on its roof. Given the building covers a total area of ​​m*n, and the height is provided by a two-dimensional matrix.\n\n    m == heightMap.length\n    n == heightMap[i].length\n    1 <= m, n <= 200\n    0 <= heightMap[i][j] <= 2 * 10^4\n\n    >>> trapRainWater([[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]])\n    4\n    >>> trapRainWater([[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]])\n    10\n    \"\"\"", "function_name": "trap_water", "parameters": ["heightMap"], "assert_statements": ["assert trap_water([[1, 1], [1, 1]]) == 0", "assert trap_water([[1, 2], [2, 1]]) == 0", "assert trap_water([[12, 13, 1, 12], [13, 4, 13, 12], [13, 8, 10, 12], [12, 13, 12, 12], [13, 13, 13, 13]]) == 14"]}
{"id": 70, "difficulty_types": 4, "question": "def optical_experiment(m: int, n: int) -> int:\n    \"\"\"In the school's optical laboratory, there is a square device with mirrors on all four sides.\n    Except for the northwest corner of the device, there is a light receptor at each corner (\n    numbered 0 for the southwest corner, 1 for the southeast corner, and 2 for the northeast corner).\n    The device has a side length of m. Now, a laser is emitted from the northwest corner of the device,\n    first meets the south wall at a distance n from the 0 receptor.\n    Return the number of the receptor that the laser first encounters (it is guaranteed that the laser\n    will eventually hit a receptor).\n    >>> optical_experiment(1, 1)\n    1\n    >>> optical_experiment(3, 2)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef optical_experiment(m: int, n: int) -> int:\n    \"\"\"In the school's optical laboratory, there is a square device with mirrors on all four sides.\n    Except for the northwest corner of the device, there is a light receptor at each corner (\n    numbered 0 for the southwest corner, 1 for the southeast corner, and 2 for the northeast corner).\n    The device has a side length of m. Now, a laser is emitted from the northwest corner of the device,\n    first meets the south wall at a distance n from the 0 receptor.\n    Return the number of the receptor that the laser first encounters (it is guaranteed that the laser\n    will eventually hit a receptor).\n    >>> optical_experiment(1, 1)\n    1\n    >>> optical_experiment(3, 2)\n    0\n    \"\"\"", "function_name": "optical_experiment", "parameters": ["m", "n"], "assert_statements": ["assert optical_experiment(2,1) == 2", "assert optical_experiment(9,4) == 0", "assert optical_experiment(13,4) == 0"]}
{"id": 71, "difficulty_types": 4, "question": "def word_pronunciation(num: int) -> str:\n    \"\"\"At a ceremony, the host will read out the number of guests present today. The number of guests num is now given. Please complete the code and output the correct pronunciation.\n\n    0 <= num <= 2^31 - 1\n\n    >>> word_pronunciation(123)\n    \"One Hundred Twenty Three\"\n    >>> word_pronunciation(12345)\n    \"Twelve Thousand Three Hundred Forty Five\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef word_pronunciation(num: int) -> str:\n    \"\"\"At a ceremony, the host will read out the number of guests present today. The number of guests num is now given. Please complete the code and output the correct pronunciation.\n\n    0 <= num <= 2^31 - 1\n\n    >>> word_pronunciation(123)\n    \"One Hundred Twenty Three\"\n    >>> word_pronunciation(12345)\n    \"Twelve Thousand Three Hundred Forty Five\"\n    \"\"\"", "function_name": "word_pronunciation", "parameters": ["num"], "assert_statements": ["assert word_pronunciation(0) == \"Zero\"", "assert word_pronunciation(\n    2147483647) == \"Two Billion One Hundred Forty Seven Million Four Hundred Eighty Three Thousand Six Hundred Forty Seven\"", "assert word_pronunciation(55000) == \"Fifty Five Thousand\""]}
{"id": 72, "difficulty_types": 4, "question": "def remove_similar_equal_characters(word: str) -> int:\n    \"\"\"\n    In a single operation, you can change any character in a word to any other lowercase English letter.\n    Your task is to determine the minimum number of such operations needed to modify the word\n    such that\n    1. no two adjacent characters are either the same\n    or\n    2. next to each other in the alphabet.\n    >>> remove_similar_equal_characters(\"bozhijiang\")\n    2\n    >>> remove_similar_equal_characters(\"abddez\")\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef remove_similar_equal_characters(word: str) -> int:\n    \"\"\"\n    In a single operation, you can change any character in a word to any other lowercase English letter.\n    Your task is to determine the minimum number of such operations needed to modify the word\n    such that\n    1. no two adjacent characters are either the same\n    or\n    2. next to each other in the alphabet.\n    >>> remove_similar_equal_characters(\"bozhijiang\")\n    2\n    >>> remove_similar_equal_characters(\"abddez\")\n    2\n    \"\"\"", "function_name": "remove_similar_equal_characters", "parameters": ["word"], "assert_statements": ["assert remove_similar_equal_characters(\"c\") == 0", "assert remove_similar_equal_characters(\"ab\") == 1", "assert remove_similar_equal_characters(\"bbc\") == 1"]}
{"id": 73, "difficulty_types": 4, "question": "from typing import List\n\ndef widest_vertical_region_width(points: List[List[int]]) -> int:\n    \"\"\"\n    You are given n points on a 2D plane, where points[i] = [xi, yi] represents the x and y coordinates of the ith point.\n\n    A vertical region is defined as an infinite area with fixed width on the x-axis and infinite height on the y-axis.\n\n    Return the width of the widest vertical region that has no points inside it.\n\n    Note that points on the edges of a vertical region are not considered inside the region.\n    >>>widest_vertical_region_width([[1,2],[3,4]])\n    2\n    >>>widest_vertical_region_width([[1,0],[1,4],[5,3]])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef widest_vertical_region_width(points: List[List[int]]) -> int:\n    \"\"\"\n    You are given n points on a 2D plane, where points[i] = [xi, yi] represents the x and y coordinates of the ith point.\n\n    A vertical region is defined as an infinite area with fixed width on the x-axis and infinite height on the y-axis.\n\n    Return the width of the widest vertical region that has no points inside it.\n\n    Note that points on the edges of a vertical region are not considered inside the region.\n    >>>widest_vertical_region_width([[1,2],[3,4]])\n    2\n    >>>widest_vertical_region_width([[1,0],[1,4],[5,3]])\n    4\n    \"\"\"", "function_name": "widest_vertical_region_width", "parameters": ["points"], "assert_statements": ["assert widest_vertical_region_width([[1,1],[1,1],[1,1]]) == 0", "assert widest_vertical_region_width([[1,1],[2,2],[3,3]]) == 1", "assert widest_vertical_region_width([[1,1],[1,2],[1,3]]) == 0"]}
{"id": 74, "difficulty_types": 4, "question": "def chess_square_color(coordinates: str) -> bool:\n    \"\"\"\n    You are given a coordinate string 'coordinates' representing the position of a square on a chessboard.\n\n    If the color of the given square is white, return true. If it's black, return false.\n\n    The given coordinate is guaranteed to represent a valid square on the chessboard.\n\n    The coordinate string has the format letter followed by number, where:\n\n    - The letter represents the column from 'a' to 'h'.\n    - The number represents the row from 1 to 8.\n    >>>chess_square_color(\"h3\")\n    True\n    >>>chess_square_color(\"b2\")\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef chess_square_color(coordinates: str) -> bool:\n    \"\"\"\n    You are given a coordinate string 'coordinates' representing the position of a square on a chessboard.\n\n    If the color of the given square is white, return true. If it's black, return false.\n\n    The given coordinate is guaranteed to represent a valid square on the chessboard.\n\n    The coordinate string has the format letter followed by number, where:\n\n    - The letter represents the column from 'a' to 'h'.\n    - The number represents the row from 1 to 8.\n    >>>chess_square_color(\"h3\")\n    True\n    >>>chess_square_color(\"b2\")\n    False\n    \"\"\"", "function_name": "chess_square_color", "parameters": ["coordinates"], "assert_statements": ["assert chess_square_color(\"c2\") == True", "assert chess_square_color(\"a3\") == False", "assert chess_square_color(\"e7\") == False"]}
{"id": 75, "difficulty_types": 4, "question": "from typing import List\n\ndef celsius_to_kelvin_fahrenheit(celsius: float) -> List[float]:\n    \"\"\"\n    You are given a non-negative floating point number celsius representing a temperature rounded to two decimal places in Celsius degrees.\n\n    You need to convert the given Celsius temperature to Kelvin and Fahrenheit and return the results as an array ans = [kelvin, fahrenheit].\n\n    Return the array ans containing the Kelvin and Fahrenheit values. An answer within 10-5 of the actual value will be considered correct.\n    >>>celsius_to_kelvin_fahrenheit(37.50)\n    [310.65000,99.50000]\n    >>>celsius_to_kelvin_fahrenheit(122)\n    [395.15000,251.60000]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef celsius_to_kelvin_fahrenheit(celsius: float) -> List[float]:\n    \"\"\"\n    You are given a non-negative floating point number celsius representing a temperature rounded to two decimal places in Celsius degrees.\n\n    You need to convert the given Celsius temperature to Kelvin and Fahrenheit and return the results as an array ans = [kelvin, fahrenheit].\n\n    Return the array ans containing the Kelvin and Fahrenheit values. An answer within 10-5 of the actual value will be considered correct.\n    >>>celsius_to_kelvin_fahrenheit(37.50)\n    [310.65000,99.50000]\n    >>>celsius_to_kelvin_fahrenheit(122)\n    [395.15000,251.60000]\n    \"\"\"", "function_name": "celsius_to_kelvin_fahrenheit", "parameters": ["celsius"], "assert_statements": ["assert all([abs(a - b) < 1e-5 for a, b in zip(celsius_to_kelvin_fahrenheit(8.91), [282.06, 48.038])])", "assert all([abs(a - b) < 1e-5 for a, b in zip(celsius_to_kelvin_fahrenheit(45.73), [318.88,114.314])])", "assert all([abs(a - b) < 1e-5 for a, b in zip(celsius_to_kelvin_fahrenheit(13.64), [286.79,56.552])])"]}
{"id": 76, "difficulty_types": 4, "question": "from typing import List\n\n\ndef can_pooling(trips: List[List[int]]) -> bool:\n    \"\"\"In order to promote the development of tourism, City A organized a \"Chasing the Sunset\" event. The event encourages local residents to use their private cars to pick up passengers at fixed stops and then drive towards the sunset. In order to better allow passengers to observe the sunset, the vehicle cannot change direction.\n\n    An unoccupied standard small car driven by a local resident was taking part in the activity. Now provide the driver with an array of trips, trips[i] = [passengers_i, from_i, to_i], which means that in the i-th trip, there will be passengers_i passengers from the from_i station to the to_i station. Can you please help this driver see if he can complete this task with his private car without overloading? Please return a Boolean value.\n\n    1 <= trips.length <= 1000\n    trips[i].length == 3\n    1 <= passengers_i <= 100\n    0 <= from_i < to_i <= 1000\n\n    >>> can_pooling([[2,1,5],[3,3,7]])\n    false\n    >>> can_pooling([[2,1,5],[3,8,9]])\n    true\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef can_pooling(trips: List[List[int]]) -> bool:\n    \"\"\"In order to promote the development of tourism, City A organized a \"Chasing the Sunset\" event. The event encourages local residents to use their private cars to pick up passengers at fixed stops and then drive towards the sunset. In order to better allow passengers to observe the sunset, the vehicle cannot change direction.\n\n    An unoccupied standard small car driven by a local resident was taking part in the activity. Now provide the driver with an array of trips, trips[i] = [passengers_i, from_i, to_i], which means that in the i-th trip, there will be passengers_i passengers from the from_i station to the to_i station. Can you please help this driver see if he can complete this task with his private car without overloading? Please return a Boolean value.\n\n    1 <= trips.length <= 1000\n    trips[i].length == 3\n    1 <= passengers_i <= 100\n    0 <= from_i < to_i <= 1000\n\n    >>> can_pooling([[2,1,5],[3,3,7]])\n    false\n    >>> can_pooling([[2,1,5],[3,8,9]])\n    true\n    \"\"\"", "function_name": "can_pooling", "parameters": ["trips"], "assert_statements": ["assert can_pooling([[3, 1, 7], [2, 3, 8]]) == False", "assert can_pooling([[1, 1, 7], [2, 3, 8]]) == True", "assert can_pooling([[3, 1, 2], [2, 3, 8]]) == True"]}
{"id": 77, "difficulty_types": 4, "question": "from typing import List\n\ndef store_water(rains: List[int]) -> List[int]:\n    \"\"\"In a region where water is extremely lacking, so that rainwater is one of their important sources of water. Whenever it rains, people in there need to store the rainwater. Local people will prepare n pots and place them everywhere, at first all the pots is empty. When the nth pot is empty before it rains then it will be filled with water. And if the nth pot is full before it rains then rain water of this day will be wasted. So their goal is to keep the pots empty before rainy day, so that any one of the pots can retain its function on the rainy day.W\n    Given an array of rains, when rain[i] > 0, it means that on day i, it will rain where the rain[i] pot is located. When rain[i] == 0, it means that day i is rainless. On days withiout rain, they can choose any of the pots to empty. Return a list named ans, the length of ans is the same as the length of rain, when rain[i]>0, ans[i]==-1, when rain[i]==0, ans[i] indicates the index of the pots that you choose to store. If there is more than one solution, return any one of them. If it causes water storage to be wasted, return an empty list. Note that if the empty pots are emptied, nothing will happen.\n    >>> store_water([1,2])\n    [-1,-1]\n    >>> store_water([1,0,2,0,1,2])\n    [-1,1,-1,2,-1,-1]\n    >>> store_water([1,2,0,1,1])\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef store_water(rains: List[int]) -> List[int]:\n    \"\"\"In a region where water is extremely lacking, so that rainwater is one of their important sources of water. Whenever it rains, people in there need to store the rainwater. Local people will prepare n pots and place them everywhere, at first all the pots is empty. When the nth pot is empty before it rains then it will be filled with water. And if the nth pot is full before it rains then rain water of this day will be wasted. So their goal is to keep the pots empty before rainy day, so that any one of the pots can retain its function on the rainy day.W\n    Given an array of rains, when rain[i] > 0, it means that on day i, it will rain where the rain[i] pot is located. When rain[i] == 0, it means that day i is rainless. On days withiout rain, they can choose any of the pots to empty. Return a list named ans, the length of ans is the same as the length of rain, when rain[i]>0, ans[i]==-1, when rain[i]==0, ans[i] indicates the index of the pots that you choose to store. If there is more than one solution, return any one of them. If it causes water storage to be wasted, return an empty list. Note that if the empty pots are emptied, nothing will happen.\n    >>> store_water([1,2])\n    [-1,-1]\n    >>> store_water([1,0,2,0,1,2])\n    [-1,1,-1,2,-1,-1]\n    >>> store_water([1,2,0,1,1])\n    []\n    \"\"\"", "function_name": "store_water", "parameters": ["rains"], "assert_statements": ["assert store_water([1,2,3,4]) == [-1,-1,-1,-1]", "assert store_water([1,2,0,0,2,1]) == [-1,-1,2,1,-1,-1]", "assert store_water([1,2,0,1,2]) == []"]}
{"id": 78, "difficulty_types": 4, "question": "from typing import List\n\ndef longest_wiggle_seq(price: List[int]) -> int:\n    \"\"\"In the stock market, stock prices always fluctuate frequently, going up and down. For those who speculate in stocks, every time when the price of a stock going up and down is a good opportunity for them to make a profit. For each stock, there will be a closing price every day. Closing prices may fluctuate repeatedly within a few days, or may continue to rise or fall. For the latter, speculators focus only on the beginning and end of a sustained rise or fall. Only the days of up and down swaps are worth investment to them. A sequence that contains only the days mentioned above is called a wiggle sequence. That is, the difference between neighboring numbers switches strictly between positive and negative numbers. For example, [1, 6, 3, 4, 2] is a strictly wiggle sequence, and [1, 4, 5, 3] is not a strictly wiggle sequence because the difference between the first three numbers is positive. Given a sequence of stock closing prices, return the length of the longest subsequence which can be taken as an wiggle sequence. A subsequence can be obtained by removing some elements from the original sequence, but keeping the rest of the elements in the original order.\n    >>> longest_wiggle_seq([1,6,3,4,2])\n    5\n    >>> longest_wiggle_seq([1,4,5,3])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef longest_wiggle_seq(price: List[int]) -> int:\n    \"\"\"In the stock market, stock prices always fluctuate frequently, going up and down. For those who speculate in stocks, every time when the price of a stock going up and down is a good opportunity for them to make a profit. For each stock, there will be a closing price every day. Closing prices may fluctuate repeatedly within a few days, or may continue to rise or fall. For the latter, speculators focus only on the beginning and end of a sustained rise or fall. Only the days of up and down swaps are worth investment to them. A sequence that contains only the days mentioned above is called a wiggle sequence. That is, the difference between neighboring numbers switches strictly between positive and negative numbers. For example, [1, 6, 3, 4, 2] is a strictly wiggle sequence, and [1, 4, 5, 3] is not a strictly wiggle sequence because the difference between the first three numbers is positive. Given a sequence of stock closing prices, return the length of the longest subsequence which can be taken as an wiggle sequence. A subsequence can be obtained by removing some elements from the original sequence, but keeping the rest of the elements in the original order.\n    >>> longest_wiggle_seq([1,6,3,4,2])\n    5\n    >>> longest_wiggle_seq([1,4,5,3])\n    3\n    \"\"\"", "function_name": "longest_wiggle_seq", "parameters": ["price"], "assert_statements": ["assert longest_wiggle_seq([1,3,2]) == 3", "assert longest_wiggle_seq([1,4,5,3]) == 3", "assert longest_wiggle_seq([]) == 0"]}
{"id": 79, "difficulty_types": 4, "question": "from typing import List\n\ndef rank_task(tasks: List[List[int]]) ->List[int]:\n    \"\"\"Given a list of tasks named tasks, which contains n individual tasks, and the index of the list starting from 0 to n-1 denote the number of the tasks. Where tasks[i]=[start_time, process_time] means that the tasks start at start_time and take process_time to complete. The list will be sorted by start_time. You can only process one task at a moment. When there comes a task, if it is only one task, you need to execute it immediately to the end. And if there are multiple tasks piled up, you will choose the task with the shortest process_time to be executed first. And if there are multiple tasks with the same processing time, you will choose the task with the smallest index to be executed first. What you need to return is the order of the executing tasks.\n    >>> rank_task([[1,3],[3,5],[3,2]]\n    [0,2,1]\n    >>> rank_task([[2,10],[2,6],[3,5],[3,3],[3,1]])\n    [1,4,3,2,0]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef rank_task(tasks: List[List[int]]) ->List[int]:\n    \"\"\"Given a list of tasks named tasks, which contains n individual tasks, and the index of the list starting from 0 to n-1 denote the number of the tasks. Where tasks[i]=[start_time, process_time] means that the tasks start at start_time and take process_time to complete. The list will be sorted by start_time. You can only process one task at a moment. When there comes a task, if it is only one task, you need to execute it immediately to the end. And if there are multiple tasks piled up, you will choose the task with the shortest process_time to be executed first. And if there are multiple tasks with the same processing time, you will choose the task with the smallest index to be executed first. What you need to return is the order of the executing tasks.\n    >>> rank_task([[1,3],[3,5],[3,2]]\n    [0,2,1]\n    >>> rank_task([[2,10],[2,6],[3,5],[3,3],[3,1]])\n    [1,4,3,2,0]\n    \"\"\"", "function_name": "rank_task", "parameters": ["tasks"], "assert_statements": ["assert rank_task([[3,3],[3,1],[3,2],[4,2],[4,1]]) == [1,4,2,3,0]", "assert rank_task([[5,5],[5,3],[5,7],[6,3],[6,10]]) == [1,3,0,2,4]", "assert rank_task([[2,2],[2,2],[2,2],[2,1],[2,2]]) == [3,0,1,2,4]"]}
{"id": 80, "difficulty_types": 4, "question": "from typing import List\n\n\ndef is_square(p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n    \"\"\"Given the coordinates of four points in the plane, please determine whether the four points can form a square.\n\n    The coordinate of a point pi is represented as [xi, yi].\n    p1.length == p2.length == p3.length == p4.length == 2\n    -10^4 <= xi, yi <= 10^4\n\n    >>> is_square([0,0], [1,1], [1,0], [0,1])\n    true\n    >>> is_square([0,0], [1,1], [1,0], [0,12])\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef is_square(p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n    \"\"\"Given the coordinates of four points in the plane, please determine whether the four points can form a square.\n\n    The coordinate of a point pi is represented as [xi, yi].\n    p1.length == p2.length == p3.length == p4.length == 2\n    -10^4 <= xi, yi <= 10^4\n\n    >>> is_square([0,0], [1,1], [1,0], [0,1])\n    true\n    >>> is_square([0,0], [1,1], [1,0], [0,12])\n    false\n    \"\"\"", "function_name": "is_square", "parameters": ["p1", "p2", "p3", "p4"], "assert_statements": ["assert is_square([0, 0], [1, 1], [2, 2], [-1, 0]) == False", "assert is_square([1, 0], [-1, 0], [0, 1], [0, -1]) == True", "assert is_square([0, 0], [10000, 10000], [10000, 0], [0, 10000]) == True"]}
{"id": 81, "difficulty_types": 5, "question": "def is_isosceles_triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"Given the coordinates of three points in a two-dimensional plane, tell whether the figure formed\n    by connecting these three points is an isosceles triangle (which is a triangle that has at least two\n    sides of equal length).\n    >>> is_isosceles_triangle(0, 0, 1, 0, 1, 1)\n    True\n    >>> is_isosceles_triangle(0, 0, 2, 0, 2, 1)\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef is_isosceles_triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"Given the coordinates of three points in a two-dimensional plane, tell whether the figure formed\n    by connecting these three points is an isosceles triangle (which is a triangle that has at least two\n    sides of equal length).\n    >>> is_isosceles_triangle(0, 0, 1, 0, 1, 1)\n    True\n    >>> is_isosceles_triangle(0, 0, 2, 0, 2, 1)\n    False\n    \"\"\"", "function_name": "is_isosceles_triangle", "parameters": ["x1", "y1", "x2", "y2", "x3", "y3"], "assert_statements": ["assert is_isosceles_triangle(0, 0, 1, 0, 1, 1) == True", "assert is_isosceles_triangle(0, 0, 1, 10, 10, -1) == True", "assert is_isosceles_triangle(0, 0, 2, 0, 2, 1) == False"]}
{"id": 82, "difficulty_types": 5, "question": "def decorate_ways(n: int, m: int) -> int:\n    \"\"\"For Christmas, various colored balls are to be tied to a string for decoration. There are a total\n    of n different colors of balls and a string that has m positions. Please fill all the positions on the\n    string with the condition that no more than two adjacent balls can have the same color. Given the\n    integers n and m, return the total number of possible decoration arrangements.\n    >>> decorate_ways(3, 2)\n    6\n    >>> decorate_ways(7, 3)\n    1344\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef decorate_ways(n: int, m: int) -> int:\n    \"\"\"For Christmas, various colored balls are to be tied to a string for decoration. There are a total\n    of n different colors of balls and a string that has m positions. Please fill all the positions on the\n    string with the condition that no more than two adjacent balls can have the same color. Given the\n    integers n and m, return the total number of possible decoration arrangements.\n    >>> decorate_ways(3, 2)\n    6\n    >>> decorate_ways(7, 3)\n    1344\n    \"\"\"", "function_name": "decorate_ways", "parameters": ["n", "m"], "assert_statements": ["assert decorate_ways(1, 1) == 1", "assert decorate_ways(2, 5) == 25", "assert decorate_ways(5, 4) == 864"]}
{"id": 83, "difficulty_types": 5, "question": "from typing import List\n\ndef four_dimensional_hyperplane(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"In a high-dimensional space, given an array nums containing n integers, the goal is to find all \n    quadruples (nums[i], nums[j], nums[k], nums[l]) that satisfy the following conditions: For 0 <= i, j, k, l < n,\n    the quadruple must form a hyperplane, i.e., nums[i] + nums[j] + nums[k] + nums[l] = target. Returns a list of\n    all quadruples (in any order) that meet these conditions.\n    >>> four_dimensional_hyperplane([1,1,1], 6)\n    []\n    >>> four_dimensional_hyperplane([1,2,3,4,5], 14)\n    [[2,3,4,5]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef four_dimensional_hyperplane(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"In a high-dimensional space, given an array nums containing n integers, the goal is to find all \n    quadruples (nums[i], nums[j], nums[k], nums[l]) that satisfy the following conditions: For 0 <= i, j, k, l < n,\n    the quadruple must form a hyperplane, i.e., nums[i] + nums[j] + nums[k] + nums[l] = target. Returns a list of\n    all quadruples (in any order) that meet these conditions.\n    >>> four_dimensional_hyperplane([1,1,1], 6)\n    []\n    >>> four_dimensional_hyperplane([1,2,3,4,5], 14)\n    [[2,3,4,5]]\n    \"\"\"", "function_name": "four_dimensional_hyperplane", "parameters": ["nums", "target"], "assert_statements": ["assert [sorted(x) for x in four_dimensional_hyperplane([1,0,-1,0,-2,2], 0)] == [sorted(x) for x in [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]]", "assert [sorted(x) for x in four_dimensional_hyperplane([1,-2,2], 2)] ==  []", "assert [sorted(x) for x in four_dimensional_hyperplane([5,3,4,3,2], 15)] == [sorted(x) for x in [[3,4,3,5]]]"]}
{"id": 84, "difficulty_types": 5, "question": "from typing import List\n\ndef min_moves_to_equal_array(nums: List[int]):\n    \"\"\"Given an integer array `nums`, you can select any number of elements in each move, and for each selected\n    element, decrease its value by one, while simultaneously increasing the value of its adjacent elements by one.\n    Determine the minimum number of moves required to make all the elements in the array `nums` equal. If it is\n    impossible to make all the elements equal, return -1.\n    >>> min_moves_to_equal_array([0, 1])\n    -1\n    >>> min_moves_to_equal_array([3,1,5])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef min_moves_to_equal_array(nums: List[int]):\n    \"\"\"Given an integer array `nums`, you can select any number of elements in each move, and for each selected\n    element, decrease its value by one, while simultaneously increasing the value of its adjacent elements by one.\n    Determine the minimum number of moves required to make all the elements in the array `nums` equal. If it is\n    impossible to make all the elements equal, return -1.\n    >>> min_moves_to_equal_array([0, 1])\n    -1\n    >>> min_moves_to_equal_array([3,1,5])\n    2\n    \"\"\"", "function_name": "min_moves_to_equal_array", "parameters": ["nums"], "assert_statements": ["assert min_moves_to_equal_array([5,4,5,7,9,3,4,6,6,11]) == 5", "assert min_moves_to_equal_array([0,7,5,2,9,4,4,31,0,11,1,3,6,0,3,3,1,3,14,21,90,31,0,21,1,2,3,4]) == 87", "assert min_moves_to_equal_array([0,7,5,2,9,4,4,31,0,11,1,3,6,0,3,3,1,3,14,21,90,31,0,21,1,2,3,5]) == -1"]}
{"id": 85, "difficulty_types": 5, "question": "from typing import List\n\ndef pixelquad_number(matrix: List[List[int]]) -> int:\n    \"\"\"Given an m x n integer matrix grid consisting only of 0s and 1s, return the number of \"PixelQuads\" it contains.\n    A \"PixelQuad\" is an axis-aligned rectangle uniquely identified by four 1s at its corners within the matrix grid.\n    The term specifically emphasizes that we are interested in quadrilaterals marked by pixel-like elements, which in this\n    case are the 1s.\n\n    Note: The four 1s that define a PixelQuad must occupy distinct positions.\n    >>> pixelquad_number([[1,1,1,1,1,1]])\n    0\n    >>> pixelquad_number([[1,1,1],[1,1,1]])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef pixelquad_number(matrix: List[List[int]]) -> int:\n    \"\"\"Given an m x n integer matrix grid consisting only of 0s and 1s, return the number of \"PixelQuads\" it contains.\n    A \"PixelQuad\" is an axis-aligned rectangle uniquely identified by four 1s at its corners within the matrix grid.\n    The term specifically emphasizes that we are interested in quadrilaterals marked by pixel-like elements, which in this\n    case are the 1s.\n\n    Note: The four 1s that define a PixelQuad must occupy distinct positions.\n    >>> pixelquad_number([[1,1,1,1,1,1]])\n    0\n    >>> pixelquad_number([[1,1,1],[1,1,1]])\n    3\n    \"\"\"", "function_name": "pixelquad_number", "parameters": ["matrix"], "assert_statements": ["assert pixelquad_number([[1]]) == 0", "assert pixelquad_number([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == 36", "assert pixelquad_number([[1,0,0,1,0],[0,1,1,0,1],[1,0,0,1,0],[1,0,1,0,1]]) == 2"]}
{"id": 86, "difficulty_types": 5, "question": "def num_cuts(n: int) -> int:\n    \"\"\"\n    What is the minimum number of cuts needed to divide a circle into n equal slices, given the integer n, assuming the following valid cuts:\n    1. A cut defined by a straight line that touches two points on the circle's periphery and crosses through the center of the circle. \n    2. A cut represented by a straight line that touches one boundary point on the circle and its center?\n\n    >>> num_cuts(4)\n    2\n    Explanation:If n=4, the output should be 2. This implies that by cutting the circle twice right through its center, it can be divided into four equal slices.\n    >>> num_cuts(3)\n    3\n    Explanation: Assuming n=3, the output should be 3 since three cuts are required at minimum to divide the circle into three identical slices. It's important to understand that fewer than three cuts can't result in three equally sized and shaped slices. Also, note that the first cut doesn't separate the circle into different parts.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef num_cuts(n: int) -> int:\n    \"\"\"\n    What is the minimum number of cuts needed to divide a circle into n equal slices, given the integer n, assuming the following valid cuts:\n    1. A cut defined by a straight line that touches two points on the circle's periphery and crosses through the center of the circle. \n    2. A cut represented by a straight line that touches one boundary point on the circle and its center?\n\n    >>> num_cuts(4)\n    2\n    Explanation:If n=4, the output should be 2. This implies that by cutting the circle twice right through its center, it can be divided into four equal slices.\n    >>> num_cuts(3)\n    3\n    Explanation: Assuming n=3, the output should be 3 since three cuts are required at minimum to divide the circle into three identical slices. It's important to understand that fewer than three cuts can't result in three equally sized and shaped slices. Also, note that the first cut doesn't separate the circle into different parts.\n    \"\"\"", "function_name": "num_cuts", "parameters": ["n"], "assert_statements": ["assert num_cuts(4) == 2", "assert num_cuts(3) == 3", "assert num_cuts(1) == 0"]}
{"id": 87, "difficulty_types": 5, "question": "from typing import List\n\ndef card_game(cards: List[int]) -> bool:\n    \"\"\"\n    In a newly invented card game by Claire and David, there lies a sequence of n cards, each inscribed with a numerical figure representing its score. You receive an array of integers, called cards, where cards[i] corresponds to the score on the i-th card in the sequence.\n\n    Claire and David alternate turns, with Claire initiating the play. During their turn, a player must withdraw one card from the sequence.A player is defeated if after their card withdrawal, the aggregate scores of all the withdrawn cards result in a multiple of 3. Conversely, if the game concludes with the withdrawal of the final card and the cumulative score is not a multiple of 3, David claims victory immediately (even if it's Claire's turn).\n\n    Assuming optimal play from both participants, determine the winner by returning true if Claire is victorious, and false if David triumphs.\n\n    >>> card_game([2,1])\n    true\n    Explanation: The gameplay unfolds like this:\n    - Stage 1: Claire may pick any card.\n    - Stage 2: David takes the last card.\n    The total scores of the selected cards sum to 1 + 2 = 3, which is a multiple of 3. Thus, David is defeated and Claire triumphs.\n    >>> card_game([2])\n    false\n    Explanation: Claire selects the sole card, leading to a collective score of 2 for the taken cards.\n    With no cards left and the sum not being a multiple of 3, David is declared the winner.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef card_game(cards: List[int]) -> bool:\n    \"\"\"\n    In a newly invented card game by Claire and David, there lies a sequence of n cards, each inscribed with a numerical figure representing its score. You receive an array of integers, called cards, where cards[i] corresponds to the score on the i-th card in the sequence.\n\n    Claire and David alternate turns, with Claire initiating the play. During their turn, a player must withdraw one card from the sequence.A player is defeated if after their card withdrawal, the aggregate scores of all the withdrawn cards result in a multiple of 3. Conversely, if the game concludes with the withdrawal of the final card and the cumulative score is not a multiple of 3, David claims victory immediately (even if it's Claire's turn).\n\n    Assuming optimal play from both participants, determine the winner by returning true if Claire is victorious, and false if David triumphs.\n\n    >>> card_game([2,1])\n    true\n    Explanation: The gameplay unfolds like this:\n    - Stage 1: Claire may pick any card.\n    - Stage 2: David takes the last card.\n    The total scores of the selected cards sum to 1 + 2 = 3, which is a multiple of 3. Thus, David is defeated and Claire triumphs.\n    >>> card_game([2])\n    false\n    Explanation: Claire selects the sole card, leading to a collective score of 2 for the taken cards.\n    With no cards left and the sum not being a multiple of 3, David is declared the winner.\n    \"\"\"", "function_name": "card_game", "parameters": ["cards"], "assert_statements": ["assert card_game([2,1]) == True", "assert card_game([2]) == False", "assert card_game([5,1,2,4,3]) == False"]}
{"id": 88, "difficulty_types": 5, "question": "from typing import List\n\ndef two_probes(probeA: List[int], probeB: List[int]) -> str:\n    \"\"\"\n    A field study is in progress, with data being gathered in real-time. To validate the reliability of the observations, dual probes are deployed to simultaneously record measurements. You will be presented with two datasets: probeA and probeB. In these datasets, probeA[i] and probeB[i] denote the measurements recorded by each probe for the ith observation point.\n\n    Nonetheless, these probes are prone to malfunctions, potentially leading to the omission of measurements at a specific observation point (referred to as a dropout measurement).\n\n    When a measurement is omitted, all subsequent measurements to its right are shifted one position to the left, and the final measurement is substituted with an arbitrary number. This arbitrary number is assured to be different from the dropout measurement.\n\n    For instance, if the expected sequence of measurements is [1,2,3,4,5] and the measurement 3 is omitted, the probe's output might be [1,2,4,5,7] (the final value is arbitrary and not necessarily 7).\n    It is confirmed that only one of the probes may be malfunctioning. Your task is to identify the malfunctioning probe, return either \"A\" or \"B\". If both probes are functioning correctly, or if it is not feasible to ascertain which one is malfunctioning, then return \"NA\".\n\n    >>> two_probes([2,3,4,5], [2,1,3,4])\n    \"A\"\n    Explanation: Probe B has recorded all measurements accurately.\n    Probe A has omitted the measurement for the second observation point, and its final recorded measurement was substituted with 5.\n    >>> two_probes([2,2,2,2,2], [2,2,2,2,5])\n    -1\n    Explanation: It is not possible to determine which probe is malfunctioning.\n    Assuming the omitted measurement by either probe is the last one, then the sequence from the other probe could be a valid output.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef two_probes(probeA: List[int], probeB: List[int]) -> str:\n    \"\"\"\n    A field study is in progress, with data being gathered in real-time. To validate the reliability of the observations, dual probes are deployed to simultaneously record measurements. You will be presented with two datasets: probeA and probeB. In these datasets, probeA[i] and probeB[i] denote the measurements recorded by each probe for the ith observation point.\n\n    Nonetheless, these probes are prone to malfunctions, potentially leading to the omission of measurements at a specific observation point (referred to as a dropout measurement).\n\n    When a measurement is omitted, all subsequent measurements to its right are shifted one position to the left, and the final measurement is substituted with an arbitrary number. This arbitrary number is assured to be different from the dropout measurement.\n\n    For instance, if the expected sequence of measurements is [1,2,3,4,5] and the measurement 3 is omitted, the probe's output might be [1,2,4,5,7] (the final value is arbitrary and not necessarily 7).\n    It is confirmed that only one of the probes may be malfunctioning. Your task is to identify the malfunctioning probe, return either \"A\" or \"B\". If both probes are functioning correctly, or if it is not feasible to ascertain which one is malfunctioning, then return \"NA\".\n\n    >>> two_probes([2,3,4,5], [2,1,3,4])\n    \"A\"\n    Explanation: Probe B has recorded all measurements accurately.\n    Probe A has omitted the measurement for the second observation point, and its final recorded measurement was substituted with 5.\n    >>> two_probes([2,2,2,2,2], [2,2,2,2,5])\n    -1\n    Explanation: It is not possible to determine which probe is malfunctioning.\n    Assuming the omitted measurement by either probe is the last one, then the sequence from the other probe could be a valid output.\n    \"\"\"", "function_name": "two_probes", "parameters": ["probeA", "probeB"], "assert_statements": ["assert two_probes([2,3,4,5], [2,1,3,4]) == \"A\"", "assert two_probes([2,2,2,2,2], [2,2,2,2,5]) == \"NA\"", "assert two_probes([2,3,2,2,3,2], [2,3,2,3,2,7]) == \"B\""]}
{"id": 89, "difficulty_types": 5, "question": "from typing import List\n\ndef catalog_search(titles: List[str], query: str) -> int:\n    \"\"\"\n    Library Catalog Search. Imagine an alphabetically ordered catalogue of book titles where several entries may be blank. Devise a procedure to identify the index of a specific book title in this catalogue.\n\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"beta\")\n    -1\n    Explanation: As the book title is not present in the catalogue, the function should return -1.\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"gamma\")\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef catalog_search(titles: List[str], query: str) -> int:\n    \"\"\"\n    Library Catalog Search. Imagine an alphabetically ordered catalogue of book titles where several entries may be blank. Devise a procedure to identify the index of a specific book title in this catalogue.\n\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"beta\")\n    -1\n    Explanation: As the book title is not present in the catalogue, the function should return -1.\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"gamma\")\n    4\n    \"\"\"", "function_name": "catalog_search", "parameters": ["titles", "query"], "assert_statements": ["assert catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"beta\") == -1", "assert catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"\", \"\", \"sigma\"], \"sigma\") == 12", "assert catalog_search([\"at\", \"\", \"\", \"\", \"ball\", \"\", \"\", \"car\", \"\", \"\", \"dad\", \"\", \"\"], \"ta\") == -1"]}
{"id": 90, "difficulty_types": 5, "question": "def correct_slogan(s: str, p: str) -> bool:\n    \"\"\"In an activity to collect slogans, a slogan s and its requirement p are given. Please determine whether the slogan s satisfies the rules of p? p contains only lowercase English letters, '.', and '*', the rules are as follows:\n    '.' Matches any single character.\n    '*' Matches zero or more of the preceding element.\n\n    1 <= s.length <= 20\n    1 <= p.length <= 20\n    s contains only lowercase English letters.\n    It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n    >>> correct_slogan(\"ab\", \".*\")\n    true\n    >>> correct_slogan(\"aa\", \"a*\")\n    true\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef correct_slogan(s: str, p: str) -> bool:\n    \"\"\"In an activity to collect slogans, a slogan s and its requirement p are given. Please determine whether the slogan s satisfies the rules of p? p contains only lowercase English letters, '.', and '*', the rules are as follows:\n    '.' Matches any single character.\n    '*' Matches zero or more of the preceding element.\n\n    1 <= s.length <= 20\n    1 <= p.length <= 20\n    s contains only lowercase English letters.\n    It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n    >>> correct_slogan(\"ab\", \".*\")\n    true\n    >>> correct_slogan(\"aa\", \"a*\")\n    true\n    \"\"\"", "function_name": "correct_slogan", "parameters": ["s", "p"], "assert_statements": ["assert correct_slogan(\"a\", \".\") == True", "assert correct_slogan(\"abcde\", \".*\") == True", "assert correct_slogan(\"a\", \"abc.\") == False"]}
{"id": 91, "difficulty_types": 5, "question": "def get_min_flip_cost_to_match(s1: str, s2: str, x: int) -> int:\n    \"\"\"\n    You are given two binary strings s1 and s2 of length n, and a positive integer x.\n\n    You can perform the following operations on s1 any number of times:\n\n    - Choose two indices i and j, and flip s1[i] and s1[j]. The cost is x.\n\n    - Choose an index i < n - 1, and flip s1[i] and s1[i+1]. The cost is 1.\n\n    Return the minimum total cost to make s1 equal to s2, or -1 if it's impossible.\n\n    Flipping a character means changing 0 to 1 or 1 to 0.\n    >>>get_min_flip_cost_to_match(\"1100\",\"0011\",3)\n    2\n    >>>get_min_flip_cost_to_match(\"100\",\"001\",2)\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_min_flip_cost_to_match(s1: str, s2: str, x: int) -> int:\n    \"\"\"\n    You are given two binary strings s1 and s2 of length n, and a positive integer x.\n\n    You can perform the following operations on s1 any number of times:\n\n    - Choose two indices i and j, and flip s1[i] and s1[j]. The cost is x.\n\n    - Choose an index i < n - 1, and flip s1[i] and s1[i+1]. The cost is 1.\n\n    Return the minimum total cost to make s1 equal to s2, or -1 if it's impossible.\n\n    Flipping a character means changing 0 to 1 or 1 to 0.\n    >>>get_min_flip_cost_to_match(\"1100\",\"0011\",3)\n    2\n    >>>get_min_flip_cost_to_match(\"100\",\"001\",2)\n    2\n    \"\"\"", "function_name": "get_min_flip_cost_to_match", "parameters": ["s1", "s2", "x"], "assert_statements": ["assert get_min_flip_cost_to_match(\"0\",\"1\", 3) == -1", "assert get_min_flip_cost_to_match(\"1010\",\"0011\",3) == 3", "assert get_min_flip_cost_to_match(\"10101\",\"00110\",2) == -1"]}
{"id": 92, "difficulty_types": 5, "question": "def space_centered_text(text: str) -> str:\n    \"\"\"\n    Given a string text consisting of words and spaces, we first split the string into words based on spaces and count the number of spaces.\n\n    If there is only 1 word, we append all spaces to the end of that word.\n\n    Otherwise, we calculate the number of spaces between words as floor(spaces / (words - 1)). We then reconstruct the string by alternating words and spaces between words, appending any extra spaces to the end.\n    >>>space_centered_text(\" bo is the god \")\n    \"bo is the god  \"\n    >>>space_centered_text(\"we like the bo \")\n    \"we like the bo \"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef space_centered_text(text: str) -> str:\n    \"\"\"\n    Given a string text consisting of words and spaces, we first split the string into words based on spaces and count the number of spaces.\n\n    If there is only 1 word, we append all spaces to the end of that word.\n\n    Otherwise, we calculate the number of spaces between words as floor(spaces / (words - 1)). We then reconstruct the string by alternating words and spaces between words, appending any extra spaces to the end.\n    >>>space_centered_text(\" bo is the god \")\n    \"bo is the god  \"\n    >>>space_centered_text(\"we like the bo \")\n    \"we like the bo \"\n    \"\"\"", "function_name": "space_centered_text", "parameters": ["text"], "assert_statements": ["assert space_centered_text(\"  mfzudmi  \") == \"mfzudmi    \"", "assert space_centered_text(\" wywd\") == \"wywd \"", "assert space_centered_text(\"hello   world\") == \"hello   world\""]}
{"id": 93, "difficulty_types": 5, "question": "def power(x: float, n: int) -> float:\n    \"\"\"\n    Implement the function pow(x, n), which calculates x raised to the power of n (i.e. xn).\n    >>>power(2.00000,0)\n    1.00000\n    >>>power(1.00000,1)\n    1.00000\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef power(x: float, n: int) -> float:\n    \"\"\"\n    Implement the function pow(x, n), which calculates x raised to the power of n (i.e. xn).\n    >>>power(2.00000,0)\n    1.00000\n    >>>power(1.00000,1)\n    1.00000\n    \"\"\"", "function_name": "power", "parameters": ["x", "n"], "assert_statements": ["assert power(8,1) == 8", "assert power(2,3) == 8", "assert power(4,2) == 16"]}
{"id": 94, "difficulty_types": 5, "question": "from typing import List\n\ndef min_divisor_below_threshold(nums: List[int], threshold: int) -> int:\n    \"\"\"\n    You are given an integer array nums and a positive integer threshold.\n\n    You need to pick a positive integer divisor, divide each number in the array by it, and sum the division results.\n\n    Return the minimum divisor such that the sum of the division results is less than or equal to the threshold.\n\n    Each division result should be rounded up.\n    >>>min_divisor_below_threshold([1,8],4)\n    3\n    >>>min_divisor_below_threshold([1,2,5,9],6)\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef min_divisor_below_threshold(nums: List[int], threshold: int) -> int:\n    \"\"\"\n    You are given an integer array nums and a positive integer threshold.\n\n    You need to pick a positive integer divisor, divide each number in the array by it, and sum the division results.\n\n    Return the minimum divisor such that the sum of the division results is less than or equal to the threshold.\n\n    Each division result should be rounded up.\n    >>>min_divisor_below_threshold([1,8],4)\n    3\n    >>>min_divisor_below_threshold([1,2,5,9],6)\n    5\n    \"\"\"", "function_name": "min_divisor_below_threshold", "parameters": ["nums", "threshold"], "assert_statements": ["assert min_divisor_below_threshold([19],5) == 4", "assert min_divisor_below_threshold([2,2,2,2],4) == 2", "assert min_divisor_below_threshold([4,1,1,1,1],7) == 2"]}
{"id": 95, "difficulty_types": 5, "question": "from typing import List\n\ndef allocate_to_minimize_max(n: int, quantities: List[int]) -> int:\n    \"\"\"\n    You are given an integer n representing the number of retail stores. There are m different products in total, where quantities[i] represents the amount of the ith product.\n\n    You need to allocate all products to the stores, following these rules:\n\n    Each store can have at most 1 type of product, but the amount can be anything.\n    After allocation, each store will be assigned some number of products (possibly 0). Let x be the maximum number of products assigned to any store. You want to minimize x as much as possible.\n    Return the minimum possible x after allocating products to minimize the maximum number assigned to any store.\n    >>>allocate_to_minimize_max(3,[1,4])\n    2\n    >>>allocate_to_minimize_max(4,[1.10])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef allocate_to_minimize_max(n: int, quantities: List[int]) -> int:\n    \"\"\"\n    You are given an integer n representing the number of retail stores. There are m different products in total, where quantities[i] represents the amount of the ith product.\n\n    You need to allocate all products to the stores, following these rules:\n\n    Each store can have at most 1 type of product, but the amount can be anything.\n    After allocation, each store will be assigned some number of products (possibly 0). Let x be the maximum number of products assigned to any store. You want to minimize x as much as possible.\n    Return the minimum possible x after allocating products to minimize the maximum number assigned to any store.\n    >>>allocate_to_minimize_max(3,[1,4])\n    2\n    >>>allocate_to_minimize_max(4,[1.10])\n    4\n    \"\"\"", "function_name": "allocate_to_minimize_max", "parameters": ["n", "quantities"], "assert_statements": ["assert allocate_to_minimize_max(2,[5,7]) == 7", "assert allocate_to_minimize_max(1, [1]) == 1", "assert allocate_to_minimize_max(3,[2,10,6]) == 10"]}
{"id": 96, "difficulty_types": 5, "question": "from typing import List\nimport collections\n\n\ndef land_shape(grid: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called grid. 0 means not planting wheat, and 1 means planting wheat. How many wheat-growing areas are there in Alice's backyard?\n\n    Note: Land blocks that are connected horizontally or vertically are considered to be the same area.\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 300\n    grid[i][j] is 0 or 1.\n\n    >>> land_shape([[1,1,1]])\n    1\n    >>> land_shape([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport collections\n\n\ndef land_shape(grid: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called grid. 0 means not planting wheat, and 1 means planting wheat. How many wheat-growing areas are there in Alice's backyard?\n\n    Note: Land blocks that are connected horizontally or vertically are considered to be the same area.\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 300\n    grid[i][j] is 0 or 1.\n\n    >>> land_shape([[1,1,1]])\n    1\n    >>> land_shape([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    3\n    \"\"\"", "function_name": "land_shape", "parameters": ["grid"], "assert_statements": ["assert land_shape([[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 1, 0]]) == 1", "assert land_shape([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]]) == 1", "assert land_shape([[1, 0, 0, 1, 1], [0, 1, 0, 1, 1]]) == 3"]}
{"id": 97, "difficulty_types": 5, "question": "from typing import List\n\ndef same_network(ip_list: List[List[str]]) -> int:\n    \"\"\"Given two ip addresses and corresponding subnet masks, determine whether the two ip belong to the same network segment. The same network segment is defined as having the same network address, which can be obtained from the '&' operation of the ip address and its subnet mask. The process is as follows, first given a ip address 192.168.2.16 and its subnet mask 255.255.255.0. Their binary representations are 11000000.10101000.00000010.00010000 and 11111111.11111111.11111111.00000000, respectively. After '&' operation it becomes 11000000.10101000.00000010.00000000, then convert it to decimal. Finally, 192.168.2.0 is the network address. Note that the given ipv4 is possible not be a legal ip and the input needs to be verified.\n    >>> same_network([[\"192.168.1.1\", \"255.255.255.0\"], [\"192.168.1.2\", \"255.255.255.0\"]])\n    True\n    >>> same_network([[\"xs.0.0.0\", \"255.255.0.0\"], [\"1.a.0.0\", \"255.255.0.0\"]])\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef same_network(ip_list: List[List[str]]) -> int:\n    \"\"\"Given two ip addresses and corresponding subnet masks, determine whether the two ip belong to the same network segment. The same network segment is defined as having the same network address, which can be obtained from the '&' operation of the ip address and its subnet mask. The process is as follows, first given a ip address 192.168.2.16 and its subnet mask 255.255.255.0. Their binary representations are 11000000.10101000.00000010.00010000 and 11111111.11111111.11111111.00000000, respectively. After '&' operation it becomes 11000000.10101000.00000010.00000000, then convert it to decimal. Finally, 192.168.2.0 is the network address. Note that the given ipv4 is possible not be a legal ip and the input needs to be verified.\n    >>> same_network([[\"192.168.1.1\", \"255.255.255.0\"], [\"192.168.1.2\", \"255.255.255.0\"]])\n    True\n    >>> same_network([[\"xs.0.0.0\", \"255.255.0.0\"], [\"1.a.0.0\", \"255.255.0.0\"]])\n    False\n    \"\"\"", "function_name": "same_network", "parameters": ["ip_list"], "assert_statements": ["assert same_network([[\"192.168.1.1\", \"255.255.255.0\"], [\"192.168.1.2\", \"255.255.0.0\"]]) == False", "assert same_network([[\"1..1.2.0\", \"255.0.0.0\"], []]) == False", "assert same_network([[\"192.168.1.1\", \"255.255.252.0\"], [\"192.168.2.1\", \"255.255.252.0\"]]) == True"]}
{"id": 98, "difficulty_types": 5, "question": "from typing import List\n\ndef calculate_maximum_profit(roads:List[int])->int:\n    \"\"\"A beautiful island is under development and now needs a ring road to be built. The ring road is divided into n parts, and several construction companies are competing for the qualification to build it. In order to avoid domination by one company, adjacent parts of the road cannot be built by the same company. Given an array of non-negative integers, each value of which represents the profit that can be made from a particular section of road, calculate the maximum profit that can be made by a construction company.\n    >>> calculate_maximum_profit([2,3,2]\n    3\n    >>> calculate_maximum_profit([0])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef calculate_maximum_profit(roads:List[int])->int:\n    \"\"\"A beautiful island is under development and now needs a ring road to be built. The ring road is divided into n parts, and several construction companies are competing for the qualification to build it. In order to avoid domination by one company, adjacent parts of the road cannot be built by the same company. Given an array of non-negative integers, each value of which represents the profit that can be made from a particular section of road, calculate the maximum profit that can be made by a construction company.\n    >>> calculate_maximum_profit([2,3,2]\n    3\n    >>> calculate_maximum_profit([0])\n    0\n    \"\"\"", "function_name": "calculate_maximum_profit", "parameters": ["roads"], "assert_statements": ["assert calculate_maximum_profit([12,8,3,5,9,1]) == 24", "assert calculate_maximum_profit([5,2,1,4]) == 6", "assert calculate_maximum_profit([1,3,6,3,1,2]) == 8"]}
{"id": 99, "difficulty_types": 5, "question": "from typing import List\n\ndef is_cube(points: List[List[int]])->int:\n    \"\"\"Given 8 points in 3D space, determine whether a cube can be formed.\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,1,1]])\n    1\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,3,1]])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef is_cube(points: List[List[int]])->int:\n    \"\"\"Given 8 points in 3D space, determine whether a cube can be formed.\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,1,1]])\n    1\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,3,1]])\n    0\n    \"\"\"", "function_name": "is_cube", "parameters": ["points"], "assert_statements": ["assert is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1]]) == False", "assert is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,0,1]]) == False", "assert is_cube([[0,0,0],[6,0,0],[0,3,0],[6,3,0],[0,0,3],[0,3,3],[6,0,3],[6,3,3]]) == False"]}
{"id": 100, "difficulty_types": 5, "question": "def population_growth(n: int) -> bool:\n    \"\"\"Assume that population growth strictly follows the formula x_k = x_0(1+r)^k. Among them, the population growth rate is r, this year's population is x_0, and the population after k years is x_k.\n\n    The population of Baba Country this year is strictly 1 billion, and the population growth rate is r=1. Given an integer n, can you help their king calculate whether there is a population n billion in a certain year? The answer returns a Boolean value.\n\n    -2^31-1 <= n <= 2^31-1\n\n    >>> population_growth(1)\n    true\n    >>> population_growth(3)\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef population_growth(n: int) -> bool:\n    \"\"\"Assume that population growth strictly follows the formula x_k = x_0(1+r)^k. Among them, the population growth rate is r, this year's population is x_0, and the population after k years is x_k.\n\n    The population of Baba Country this year is strictly 1 billion, and the population growth rate is r=1. Given an integer n, can you help their king calculate whether there is a population n billion in a certain year? The answer returns a Boolean value.\n\n    -2^31-1 <= n <= 2^31-1\n\n    >>> population_growth(1)\n    true\n    >>> population_growth(3)\n    false\n    \"\"\"", "function_name": "population_growth", "parameters": ["n"], "assert_statements": ["assert population_growth(0) == False", "assert population_growth(4096) == True", "assert population_growth(2147483647) == False"]}
{"id": 101, "difficulty_types": 6, "question": "from typing import List\n\n\ndef is_new_year(numbers: List[int]):\n    \"\"\"\n    Given a list containing four numbers. First, calculate the square of the first number.\n    For the second number, check if it is divisible by 3. If it is, add it to the result, otherwise subtract it.\n    Multiply the resulting value by the third number three times. For the fourth number, calculate the sum of its digits\n    and compare it with the first number. If the sum is greater, add the fourth number to the result,\n    otherwise keep the result unchanged. If the final result equals 2024, return the string \"Happy New Year\",\n    otherwise return \"Whoops\".\n    >>> is_new_year([2, 0, 2, 4])\n    \"Whoops\"\n    >>> is_new_year([3, 5, 6, 1160])\n    \"Happy New Year\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef is_new_year(numbers: List[int]):\n    \"\"\"\n    Given a list containing four numbers. First, calculate the square of the first number.\n    For the second number, check if it is divisible by 3. If it is, add it to the result, otherwise subtract it.\n    Multiply the resulting value by the third number three times. For the fourth number, calculate the sum of its digits\n    and compare it with the first number. If the sum is greater, add the fourth number to the result,\n    otherwise keep the result unchanged. If the final result equals 2024, return the string \"Happy New Year\",\n    otherwise return \"Whoops\".\n    >>> is_new_year([2, 0, 2, 4])\n    \"Whoops\"\n    >>> is_new_year([3, 5, 6, 1160])\n    \"Happy New Year\"\n    \"\"\"", "function_name": "is_new_year", "parameters": ["numbers"], "assert_statements": ["assert is_new_year([18, 71, 2, 296]) == \"Happy New Year\"", "assert is_new_year([60, 2022, 1, 446]) == \"Whoops\"", "assert is_new_year([10, 5, 6, 111]) == \"Whoops\""]}
{"id": 102, "difficulty_types": 6, "question": "from typing import List\n\ndef second_smaller_number(nums: List[int]) -> List[int]:\n    \"\"\"Given a non-negative number array, for each number in it, find the second number smaller\n    than it that appears after it. If none exists, represent it as -1.\n    >>> second_smaller_number([1,1,1])\n    [-1,-1,-1]\n    >>> second_smaller_number([6,5,4,3,2,1,0,3])\n    [4, 3, 2, 1, 0, -1, -1, -1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef second_smaller_number(nums: List[int]) -> List[int]:\n    \"\"\"Given a non-negative number array, for each number in it, find the second number smaller\n    than it that appears after it. If none exists, represent it as -1.\n    >>> second_smaller_number([1,1,1])\n    [-1,-1,-1]\n    >>> second_smaller_number([6,5,4,3,2,1,0,3])\n    [4, 3, 2, 1, 0, -1, -1, -1]\n    \"\"\"", "function_name": "second_smaller_number", "parameters": ["nums"], "assert_statements": ["assert second_smaller_number([3, 4, 0, 2, 7]) == [2, 2, -1, -1, -1]", "assert second_smaller_number([0]) == [-1]", "assert second_smaller_number([1, 2, 3, 4, 5, 6, 7, 8]) == [-1, -1, -1, -1, -1, -1, -1, -1]"]}
{"id": 103, "difficulty_types": 6, "question": "from typing import List\n\ndef stock_scheme(n: int, total_profit: int, cost: List[int], profit: List[int]):\n    \"\"\"You have n dollars and plan to purchase goods from a wholesale market. For the i-th item,\n    the cost price is cost[i] dollars, and selling it generates a profit of profit[i] dollars.\n    If your target total profit is total_profit, how many purchasing schemes do you have? Note that\n    you are not obligated to use all of your money. The answer can be large, return it modulo 10**9+7\n    >>> stock_scheme(5, 1, [1, 2], [4, 3])\n    3\n    >>> stock_scheme(5, 3, [2, 2], [2, 3])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef stock_scheme(n: int, total_profit: int, cost: List[int], profit: List[int]):\n    \"\"\"You have n dollars and plan to purchase goods from a wholesale market. For the i-th item,\n    the cost price is cost[i] dollars, and selling it generates a profit of profit[i] dollars.\n    If your target total profit is total_profit, how many purchasing schemes do you have? Note that\n    you are not obligated to use all of your money. The answer can be large, return it modulo 10**9+7\n    >>> stock_scheme(5, 1, [1, 2], [4, 3])\n    3\n    >>> stock_scheme(5, 3, [2, 2], [2, 3])\n    2\n    \"\"\"", "function_name": "stock_scheme", "parameters": ["n", "total_profit", "cost", "profit"], "assert_statements": ["assert stock_scheme(73, 4, [2, 2, 2, 2, 1, 1, 2, 3, 4, 5, 6, 7], [3, 3, 4, 3, 4, 5, 6, 7, 19, 9, 18, 21]) == 4092", "assert stock_scheme(50, 13, [3, 2, 2, 4, 3, 3, 1, 2], [4, 5, 6, 1, 2, 3, 4, 4]) == 163", "assert stock_scheme(10, 5, [3, 4, 3, 3, 1, 2], [6, 1, 2, 3, 4, 4]) == 41"]}
{"id": 104, "difficulty_types": 6, "question": "from typing import List\nimport heapq\n\ndef time_passing_door(arrival: List[int], state: List[int]) -> List[int]:\n    \"\"\"There are n people, numbered from 0 to n - 1. There is a door that each person can only pass through once,\n    either to enter or to leave, which takes one second.\n\n    You are given a non-decreasing integer array `arrival` of length n, where `arrival[i]` is the time when the\n    i-th person arrives at the door. You are also given an array `state` of length n, where `state[i]` is 0 if \n    the i-th person wishes to enter through the door, and 1 if they wish to leave.\n\n    If two or more people want to use the door at the same time, the following rules must be followed:\n\n    - If the door was not used in the previous second, the person who wants to leave will leave first.\n    - If the door was used to enter in the previous second, the person who wants to enter will enter first.\n    - If the door was used to leave in the previous second, the person who wants to leave will leave first.\n    - If multiple people want to go in the same direction (either all enter or all leave), the person with\n    the smallest number will pass through the door first.\n\n    Return an array `answer` of length n, where `answer[i]` is the time (in seconds) when the i-th person passes \n    through the door.\n\n    Note:\n    - Only one person can pass through the door each second.\n    - To follow the above rules, a person may wait near the door without passing through to enter or leave.\n    >>> time_pass_door([0,0,0], [1,0,1])\n    [0,2,1]\n    >>> time_pass_door([0,0,1,1,2,7,8,8,9,10,10,11,13], [1,1,1,1,1,1,1,1,1,1,1,1,1])\n    [0,1,2,3,4,7,8,9,10,11,12,13,14]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport heapq\n\ndef time_passing_door(arrival: List[int], state: List[int]) -> List[int]:\n    \"\"\"There are n people, numbered from 0 to n - 1. There is a door that each person can only pass through once,\n    either to enter or to leave, which takes one second.\n\n    You are given a non-decreasing integer array `arrival` of length n, where `arrival[i]` is the time when the\n    i-th person arrives at the door. You are also given an array `state` of length n, where `state[i]` is 0 if \n    the i-th person wishes to enter through the door, and 1 if they wish to leave.\n\n    If two or more people want to use the door at the same time, the following rules must be followed:\n\n    - If the door was not used in the previous second, the person who wants to leave will leave first.\n    - If the door was used to enter in the previous second, the person who wants to enter will enter first.\n    - If the door was used to leave in the previous second, the person who wants to leave will leave first.\n    - If multiple people want to go in the same direction (either all enter or all leave), the person with\n    the smallest number will pass through the door first.\n\n    Return an array `answer` of length n, where `answer[i]` is the time (in seconds) when the i-th person passes \n    through the door.\n\n    Note:\n    - Only one person can pass through the door each second.\n    - To follow the above rules, a person may wait near the door without passing through to enter or leave.\n    >>> time_pass_door([0,0,0], [1,0,1])\n    [0,2,1]\n    >>> time_pass_door([0,0,1,1,2,7,8,8,9,10,10,11,13], [1,1,1,1,1,1,1,1,1,1,1,1,1])\n    [0,1,2,3,4,7,8,9,10,11,12,13,14]\n    \"\"\"", "function_name": "time_passing_door", "parameters": ["arrival", "state"], "assert_statements": ["assert time_passing_door([0,1,2,2,4,7,8,8], [0,1,0,0,1,1,0,0]) == [0,1,2,3,4,7,8,9]", "assert time_passing_door([0,0,1,1,2,7,8,8,9,10,10,11,13], [0,1,1,0,1,1,0,0,0,0,0,1,0]) == [3,0,1,4,2,7,8,9,10,11,12,14,13]", "assert time_passing_door([0,0,1,1,2,7,7,7,7,7,7,7], [1,1,1,1,1,1,1,1,1,1,1,1]) == [0,1,2,3,4,7,8,9,10,11,12,13]"]}
{"id": 105, "difficulty_types": 6, "question": "from typing import List\n\ndef space_with_most_talks(n: int, talks: List[List[int]]) -> int:\n    \"\"\"You are an organizer of an international conference, now you have n rooms numbered from 0 to n - 1 and some talks \n    represented by a 2D array `talks` where `talks[i] = [start_i, end_i]` represents a scheduled presentation during the\n    half-closed interval `[start_i, end_i)` (including a and not including b), you need to assign talks to spaces according \n    to the following rules:\n    \n    - Assign each talk to the available space with the lowest number.\n    - If no spaces are available, delay the presentation until space is freed, its duration stays unchanged.\n    - When a space becomes available, prioritize presentations with earlier start times for assignment.\n    \n    Identify and return the number of the space that hosts the most presentations. In case of a tie, return \n    the space with the lowest number. Note that all the values of start_i are unique.\n    >>> space_with_most_talks(2, [[0,6],[1,7],[2,9],[3,5]])\n    0\n    >>> space_with_most_talks(3, [[1,15],[2,10],[3,7],[5,8],[6,9]])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef space_with_most_talks(n: int, talks: List[List[int]]) -> int:\n    \"\"\"You are an organizer of an international conference, now you have n rooms numbered from 0 to n - 1 and some talks \n    represented by a 2D array `talks` where `talks[i] = [start_i, end_i]` represents a scheduled presentation during the\n    half-closed interval `[start_i, end_i)` (including a and not including b), you need to assign talks to spaces according \n    to the following rules:\n    \n    - Assign each talk to the available space with the lowest number.\n    - If no spaces are available, delay the presentation until space is freed, its duration stays unchanged.\n    - When a space becomes available, prioritize presentations with earlier start times for assignment.\n    \n    Identify and return the number of the space that hosts the most presentations. In case of a tie, return \n    the space with the lowest number. Note that all the values of start_i are unique.\n    >>> space_with_most_talks(2, [[0,6],[1,7],[2,9],[3,5]])\n    0\n    >>> space_with_most_talks(3, [[1,15],[2,10],[3,7],[5,8],[6,9]])\n    1\n    \"\"\"", "function_name": "space_with_most_talks", "parameters": ["n", "talks"], "assert_statements": ["assert space_with_most_talks(2, [[0,10],[1,5],[2,7],[3,4]]) == 0", "assert space_with_most_talks(3, [[1,20],[2,10],[3,5],[4,9],[6,8]]) == 1", "assert space_with_most_talks(4, [[0,30],[5,20],[10,40],[15,25],[20,45],[25,50]]) == 1"]}
{"id": 106, "difficulty_types": 6, "question": "from typing import List\n\ndef candy_probability(candy: List[int]) -> float:\n    \"\"\"\n    Given 2n candies of k different flavors. You will be given an integer array candies of size k where candies[i] is the number of candies of flavor i.\n\n    All the candies will be mixed uniformly at random, then we will allocate the first n candies to the first bowl and the remaining n candies to the second bowl (Please read the explanation of the second sample carefully).\n\n    Please be aware that the two bowls are viewed as distinct. For example, if we have two candies of flavors a and b, and two bowls [] and (), then the allocation [a] (b) is viewed differently than the allocation [b] (a) (Please read the explanation of the first sample carefully).\n\n    Return the likelihood of the two bowls containing the same quantity of distinct candies. Answers with a 10-5 deviation from the actual value will be considered correct.\n\n    Example 1:\n    >>> candy_probability([1,1])\n    1.00000\n    Explanation: There are only 2 ways to divide the candies evenly:\n    - A candy of flavor 1 to bowl 1 and a candy of flavor 2 to bowl 2\n    - A candy of flavor 2 to bowl 1 and a candy of flavor 1 to bowl 2\n    In both ways, the number of distinct flavors in each bowl is equivalent. The probability is 2/2 = 1\n\n    Example 2:\n    >>> candy_probability([2,1,1])\n    0.66667\n    Explanation: We have the set of candies [1, 1, 2, 3]\n    This set of candies will be mixed again randomly and we may have one of the 12 different mixes with equal possibilities (i.e. 1/12):\n    [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\n    After that, we add the first two candies to the first bowl and the second two candies to the second bowl.\n    We can see that 8 of these 12 alternate random allocations have the same number of distinct flavors of candies in each bowl.\n    Probability is 8/12 = 0.66667\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef candy_probability(candy: List[int]) -> float:\n    \"\"\"\n    Given 2n candies of k different flavors. You will be given an integer array candies of size k where candies[i] is the number of candies of flavor i.\n\n    All the candies will be mixed uniformly at random, then we will allocate the first n candies to the first bowl and the remaining n candies to the second bowl (Please read the explanation of the second sample carefully).\n\n    Please be aware that the two bowls are viewed as distinct. For example, if we have two candies of flavors a and b, and two bowls [] and (), then the allocation [a] (b) is viewed differently than the allocation [b] (a) (Please read the explanation of the first sample carefully).\n\n    Return the likelihood of the two bowls containing the same quantity of distinct candies. Answers with a 10-5 deviation from the actual value will be considered correct.\n\n    Example 1:\n    >>> candy_probability([1,1])\n    1.00000\n    Explanation: There are only 2 ways to divide the candies evenly:\n    - A candy of flavor 1 to bowl 1 and a candy of flavor 2 to bowl 2\n    - A candy of flavor 2 to bowl 1 and a candy of flavor 1 to bowl 2\n    In both ways, the number of distinct flavors in each bowl is equivalent. The probability is 2/2 = 1\n\n    Example 2:\n    >>> candy_probability([2,1,1])\n    0.66667\n    Explanation: We have the set of candies [1, 1, 2, 3]\n    This set of candies will be mixed again randomly and we may have one of the 12 different mixes with equal possibilities (i.e. 1/12):\n    [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\n    After that, we add the first two candies to the first bowl and the second two candies to the second bowl.\n    We can see that 8 of these 12 alternate random allocations have the same number of distinct flavors of candies in each bowl.\n    Probability is 8/12 = 0.66667\n    \"\"\"", "function_name": "candy_probability", "parameters": ["candy"], "assert_statements": ["assert abs(candy_probability([1, 2, 1, 2]) - 0.60000) < 10 ** -5", "assert abs(candy_probability([1, 2, 1]) - 0.66666) < 10 ** -5", "assert abs(candy_probability([1, 2, 3]) - 0.30000) < 10 ** -5"]}
{"id": 107, "difficulty_types": 6, "question": "from typing import List\n\ndef mini_operations(shells: str) -> int:\n    \"\"\"\n    Dylan embarked on a spring journey to the beach, where he gathered a mix of blue and green seashells along the shore. Upon returning, he organized these seashells into a beginning set he named \"shells,\" which exclusively includes the lowercase letters 'b' for blue shells and 'g' for green shells. The letter 'b' signifies a blue shell, while 'g' stands for a green shell. Dylan aspired to reorganize the shells in his set into three segments: \"blue, green, blue.\" While each segment might vary in quantity, they must all contain at least one shell. Dylan can switch out a blue shell for a green one or vice versa whenever he rearranges the set. What is the minimum number of switches Dylan must perform to achieve his desired sorting?\n\n    >>>  mini_operations(\"bbbgggbbbgggbb\")\n    2\n    >>>  mini_operations(\"bgb\")\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef mini_operations(shells: str) -> int:\n    \"\"\"\n    Dylan embarked on a spring journey to the beach, where he gathered a mix of blue and green seashells along the shore. Upon returning, he organized these seashells into a beginning set he named \"shells,\" which exclusively includes the lowercase letters 'b' for blue shells and 'g' for green shells. The letter 'b' signifies a blue shell, while 'g' stands for a green shell. Dylan aspired to reorganize the shells in his set into three segments: \"blue, green, blue.\" While each segment might vary in quantity, they must all contain at least one shell. Dylan can switch out a blue shell for a green one or vice versa whenever he rearranges the set. What is the minimum number of switches Dylan must perform to achieve his desired sorting?\n\n    >>>  mini_operations(\"bbbgggbbbgggbb\")\n    2\n    >>>  mini_operations(\"bgb\")\n    0\n    \"\"\"", "function_name": "mini_operations", "parameters": ["shells"], "assert_statements": ["assert mini_operations(\"bbbgggbbgggbb\") == 2", "assert mini_operations(\"bgb\") == 0", "assert mini_operations(\"gggbbb\") == 1"]}
{"id": 108, "difficulty_types": 6, "question": "from collections import defaultdict\nfrom typing import List\n\n\ndef find_word_on_board(board: List[List[str]], words: List[str]) -> List[str]:\n    \"\"\"Given an alphabet 'board' of m*n, please use the letters on the alphabet board to form words. Words can only be connected horizontally and vertically, and cannot be reused in a word. Please output the words that can be formed with the letters on the alphabet board and exist in the list 'words'.\n\n    m == board.length\n    n == board[i].length\n    1 <= m, n <= 12\n    board[i][j] is a lowercase English letter.\n    1 <= words.length <= 3 * 104\n    1 <= words[i].length <= 10\n    words[i] consists of lowercase English letters.\n    All the strings of words are unique.\n\n    >>> find_word_on_board([[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], [\"oath\",\"pea\",\"eat\",\"rain\"])\n    [\"eat\",\"oath\"]\n    >>> find_word_on_board([[\"a\",\"b\"],[\"c\",\"d\"]], [\"abcb\"])\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef find_word_on_board(board: List[List[str]], words: List[str]) -> List[str]:\n    \"\"\"Given an alphabet 'board' of m*n, please use the letters on the alphabet board to form words. Words can only be connected horizontally and vertically, and cannot be reused in a word. Please output the words that can be formed with the letters on the alphabet board and exist in the list 'words'.\n\n    m == board.length\n    n == board[i].length\n    1 <= m, n <= 12\n    board[i][j] is a lowercase English letter.\n    1 <= words.length <= 3 * 104\n    1 <= words[i].length <= 10\n    words[i] consists of lowercase English letters.\n    All the strings of words are unique.\n\n    >>> find_word_on_board([[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], [\"oath\",\"pea\",\"eat\",\"rain\"])\n    [\"eat\",\"oath\"]\n    >>> find_word_on_board([[\"a\",\"b\"],[\"c\",\"d\"]], [\"abcb\"])\n    []\n    \"\"\"", "function_name": "find_word_on_board", "parameters": ["board", "words"], "assert_statements": ["assert find_word_on_board([[\"a\", \"b\"], [\"b\", \"c\"], [\"e\", \"d\"]], [\"abcdeb\"]) == [\"abcdeb\"]", "assert find_word_on_board([[\"b\", \"c\", \"d\"], [\"a\", \"b\", \"e\"]], [\"abcdeb\"]) == [\"abcdeb\"]", "assert find_word_on_board([[\"a\", \"b\"], [\"b\", \"c\"]], [\"accd\"]) == []"]}
{"id": 109, "difficulty_types": 6, "question": "from functools import lru_cache\nfrom typing import List\n\n\ndef clean_up_fallen_leaves(grid: List[List[int]]) -> int:\n    \"\"\"There are two robots sweeping fallen leaves in an m*n matrix grid. The number in each grid represents the number of fallen leaves in the area. Robot 1 starts from the upper left corner grid (0,0), and robot 2 starts from the upper right corner grid (0, n-1). Please follow the rules below to return the maximum number of fallen leaves that robots can collect.\n\n    1. Starting from grid (i,j), the robot can move to grid (i+1, j-1), (i+1, j) or (i+1, j+1).\n    2. The robot collects all fallen leaves wherever it passes.\n    3. When robots arrive at the same grid at the same time, only one of them will work.\n    4. The robot cannot move outside of the grid at any time.\n    5. The robot must finally reach the bottom row of the grid.\n\n    m == grid.length\n    n == grid[i].length\n    2 <= m, n <= 70\n    0 <= grid[i][j] <= 100\n\n    >>> clean_up_fallen_leaves([[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]])\n    28\n    >>> clean_up_fallen_leaves([[1,1],[1,1]])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom functools import lru_cache\nfrom typing import List\n\n\ndef clean_up_fallen_leaves(grid: List[List[int]]) -> int:\n    \"\"\"There are two robots sweeping fallen leaves in an m*n matrix grid. The number in each grid represents the number of fallen leaves in the area. Robot 1 starts from the upper left corner grid (0,0), and robot 2 starts from the upper right corner grid (0, n-1). Please follow the rules below to return the maximum number of fallen leaves that robots can collect.\n\n    1. Starting from grid (i,j), the robot can move to grid (i+1, j-1), (i+1, j) or (i+1, j+1).\n    2. The robot collects all fallen leaves wherever it passes.\n    3. When robots arrive at the same grid at the same time, only one of them will work.\n    4. The robot cannot move outside of the grid at any time.\n    5. The robot must finally reach the bottom row of the grid.\n\n    m == grid.length\n    n == grid[i].length\n    2 <= m, n <= 70\n    0 <= grid[i][j] <= 100\n\n    >>> clean_up_fallen_leaves([[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]])\n    28\n    >>> clean_up_fallen_leaves([[1,1],[1,1]])\n    4\n    \"\"\"", "function_name": "clean_up_fallen_leaves", "parameters": ["grid"], "assert_statements": ["assert clean_up_fallen_leaves([[0, 6, 8, 0], [0, 4, 3, 2], [7, 0, 10, 2]]) == 24", "assert clean_up_fallen_leaves([[0, 9], [9, 0]]) == 18", "assert clean_up_fallen_leaves([[20, 3, 5, 7, 32], [4, 7, 4, 0, 0], [4, 6, 7, 34, 0]]) == 100"]}
{"id": 110, "difficulty_types": 6, "question": "from typing import List\n\ndef max_perimeter(grid:List[List[int]])->int:\n    \"\"\"Given a row x col two-dimensional grid map grid, where grid[i][j] = 1 indicates land and grid[i][j] = 0 indicates water. Islands are always surrounded by water, and each island can only be formed by adjacent land connections in a horizontal and/or vertical direction. There is no `` lake'' in the island. (\"Lake\" means that the waters are within the island and are not connected to the waters around the island). The grid is a square with a side length of 1. There are several islands in this body of water. Find the longest perimeter of all the islands and return its perimeter.\n    >>> max_perimeter([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    8\n    >>> max_perimeter([[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]])\n    16\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_perimeter(grid:List[List[int]])->int:\n    \"\"\"Given a row x col two-dimensional grid map grid, where grid[i][j] = 1 indicates land and grid[i][j] = 0 indicates water. Islands are always surrounded by water, and each island can only be formed by adjacent land connections in a horizontal and/or vertical direction. There is no `` lake'' in the island. (\"Lake\" means that the waters are within the island and are not connected to the waters around the island). The grid is a square with a side length of 1. There are several islands in this body of water. Find the longest perimeter of all the islands and return its perimeter.\n    >>> max_perimeter([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    8\n    >>> max_perimeter([[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]])\n    16\n    \"\"\"", "function_name": "max_perimeter", "parameters": ["grid"], "assert_statements": ["assert max_perimeter([[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]) == 16", "assert max_perimeter([[1,1,0,0,0],[1,1,1,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 12", "assert max_perimeter([[1,1,0,0,0],[1,0,0,0,0],[0,0,1,0,0],[0,0,0,1,1],[1,1,1,1,1]]) == 14"]}
{"id": 111, "difficulty_types": 6, "question": "from typing import List\n\ndef make_two_equivalent(a: List[int], b: List[int]) -> str:\n    \"\"\" Define an operation as follows\n    1. choose range [l, r] such that  0 <= l <= r <= len(a),\n    2 . for i in range(l, r), set a[i] = max(a[l], a[l+1],..,a[r]).\n    Suppose we can do any times of above operations (maybe zero), determin if we can make list a equal to list b.\n    Output \"YES\" if we can, otherwise \"No\"\n    >>> make_two_equivalent([1, 2, 3, 2, 4], [1, 3, 3, 2, 4])\n    YES\n    >>> make_two_equivalent([1, 1, 2], [2, 1, 2])\n    NO\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef make_two_equivalent(a: List[int], b: List[int]) -> str:\n    \"\"\" Define an operation as follows\n    1. choose range [l, r] such that  0 <= l <= r <= len(a),\n    2 . for i in range(l, r), set a[i] = max(a[l], a[l+1],..,a[r]).\n    Suppose we can do any times of above operations (maybe zero), determin if we can make list a equal to list b.\n    Output \"YES\" if we can, otherwise \"No\"\n    >>> make_two_equivalent([1, 2, 3, 2, 4], [1, 3, 3, 2, 4])\n    YES\n    >>> make_two_equivalent([1, 1, 2], [2, 1, 2])\n    NO\n    \"\"\"", "function_name": "make_two_equivalent", "parameters": ["a", "b"], "assert_statements": ["assert make_two_equivalent([1],[0]) == 'NO'", "assert make_two_equivalent([1,1],[0,1]) == 'NO'", "assert make_two_equivalent([1,0, 1],[1, 0,1]) == 'YES'"]}
{"id": 112, "difficulty_types": 6, "question": "def magic_equal(x: int, y: int) -> int:\n    \"\"\"\n    You are given two positive integers x and y.\n    In one operation, you can choose to do one of the following:\n\n    If x is a multiple of 11, divide x by 11.\n    If x is a multiple of 5, divide x by 5.\n    Decrement x by 1.\n    Increment x by 1.\n\n    Return the minimum number of operations needed to make x and y equal.\n    >>>magic_equal(26,1)\n    3\n    >>>magic_equal(25,30)\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef magic_equal(x: int, y: int) -> int:\n    \"\"\"\n    You are given two positive integers x and y.\n    In one operation, you can choose to do one of the following:\n\n    If x is a multiple of 11, divide x by 11.\n    If x is a multiple of 5, divide x by 5.\n    Decrement x by 1.\n    Increment x by 1.\n\n    Return the minimum number of operations needed to make x and y equal.\n    >>>magic_equal(26,1)\n    3\n    >>>magic_equal(25,30)\n    5\n    \"\"\"", "function_name": "magic_equal", "parameters": ["x", "y"], "assert_statements": ["assert magic_equal(1, 2) == 1", "assert magic_equal(1, 4) == 3", "assert magic_equal(54, 2) == 4"]}
{"id": 113, "difficulty_types": 6, "question": "from typing import List\n\n\ndef maximum_num_of_blocks(area: List[int], mass: List[int]) -> int:\n    \"\"\"When playing with building blocks, we usually place small and light building blocks on top of larger and heavier building blocks. Given the mass and area of ​​the building blocks, please calculate the maximum number of building blocks that can be stacked?\n\n    height.length == weight.length <= 10000\n\n    >>> maximum_num_of_blocks([65,70,56,75,60,68], [100,150,90,190,95,110])\n    6\n    >>> maximum_num_of_blocks([6, 7, 8], [2, 1, 6])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef maximum_num_of_blocks(area: List[int], mass: List[int]) -> int:\n    \"\"\"When playing with building blocks, we usually place small and light building blocks on top of larger and heavier building blocks. Given the mass and area of ​​the building blocks, please calculate the maximum number of building blocks that can be stacked?\n\n    height.length == weight.length <= 10000\n\n    >>> maximum_num_of_blocks([65,70,56,75,60,68], [100,150,90,190,95,110])\n    6\n    >>> maximum_num_of_blocks([6, 7, 8], [2, 1, 6])\n    2\n    \"\"\"", "function_name": "maximum_num_of_blocks", "parameters": ["area", "mass"], "assert_statements": ["assert maximum_num_of_blocks([1], [1]) == 1", "assert maximum_num_of_blocks([8888, 9998, 1000, 1220, 3675], [2220, 1200, 8976, 3452, 2221]) == 1", "assert maximum_num_of_blocks([1, 1, 1], [1, 1, 1]) == 1"]}
{"id": 114, "difficulty_types": 6, "question": "from typing import List\n\n\ndef maximal_rectangle(matrix: List[List[str]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called matrix. 0 means not planting wheat, and 1 means planting wheat.What is the largest rectangular area for growing wheat in Alice's backyard? Return its area.\n\n    rows == matrix.length\n    cols == matrix[0].length\n    1 <= row, cols <= 200\n    matrix[i][j] is 0 or 1.\n\n    >>> maximal_rectangle([[1,1,1]])\n    3\n    >>> maximal_rectangle([[1,0,1],[1,1,0],[1,1,0]])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef maximal_rectangle(matrix: List[List[str]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called matrix. 0 means not planting wheat, and 1 means planting wheat.What is the largest rectangular area for growing wheat in Alice's backyard? Return its area.\n\n    rows == matrix.length\n    cols == matrix[0].length\n    1 <= row, cols <= 200\n    matrix[i][j] is 0 or 1.\n\n    >>> maximal_rectangle([[1,1,1]])\n    3\n    >>> maximal_rectangle([[1,0,1],[1,1,0],[1,1,0]])\n    4\n    \"\"\"", "function_name": "maximal_rectangle", "parameters": ["matrix"], "assert_statements": ["assert maximal_rectangle([[1]]) == 1", "assert maximal_rectangle([[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 1, 0]]) == 6", "assert maximal_rectangle([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]]) == 9"]}
{"id": 115, "difficulty_types": 6, "question": "from typing import Optional, List\n\n\ndef lexical_order(n: int) -> Optional[List[int]]:\n    \"\"\"\n    Given an integer n, return all numbers in the range [1, n] according to the following requirements:\n    If n is odd, odd numbers should come before even numbers, and both odd and even numbers should be sorted in lexicographical order.\n    If n is even, even numbers should come before odd numbers, and both even and odd numbers should be sorted in lexicographical order.\n    If n is less than or equal to zero, return empty list.\n\n    >>> lexical_order(13)\n    [1, 11, 13, 3, 5, 7, 9, 10, 12, 2, 4, 6, 8]\n    >>> lexical_order(0)\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import Optional, List\n\n\ndef lexical_order(n: int) -> Optional[List[int]]:\n    \"\"\"\n    Given an integer n, return all numbers in the range [1, n] according to the following requirements:\n    If n is odd, odd numbers should come before even numbers, and both odd and even numbers should be sorted in lexicographical order.\n    If n is even, even numbers should come before odd numbers, and both even and odd numbers should be sorted in lexicographical order.\n    If n is less than or equal to zero, return empty list.\n\n    >>> lexical_order(13)\n    [1, 11, 13, 3, 5, 7, 9, 10, 12, 2, 4, 6, 8]\n    >>> lexical_order(0)\n    []\n    \"\"\"", "function_name": "lexical_order", "parameters": ["n"], "assert_statements": ["assert lexical_order(-1) == []", "assert lexical_order(0) == []", "assert lexical_order(13) == [1, 11, 13, 3, 5, 7, 9, 10, 12, 2, 4, 6, 8]"]}
{"id": 116, "difficulty_types": 6, "question": "from typing import List\n\n\ndef find_days(pencils: List[int], k: int) -> int:\n    \"\"\"\n    There are n pencils arranged in a row, each with a unique number, and initially, all of them are unused. Every day, an employee will take away one pencil, until after n days, all the pencils are taken.\n\n    Given an array of pencils of length n, where pencils[i] = x indicates that on the (i+1)th day, the employee will take the pencil at position x, with i starting from 0 and x starting from 1.\n\n    Now, given an integer k, please calculate the number of days needed to reach the situation where exactly two pencils are taken, and there are k untouched pencils between them. If this situation cannot be reached, return -1.\n\n    Hints:\n\n    + n == pencils.length\n    + 1 <= n <= 2 * 10^4\n    + 1 <= pencils[i] <= n\n    + pencils is a permutation of numbers from 1 to n\n    + 0 <= k <= 2 * 10^4\n\n    >>> find_days([1,3,2], 1)\n    2\n    >>> find_days([1,2,3], 1)\n    -1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef find_days(pencils: List[int], k: int) -> int:\n    \"\"\"\n    There are n pencils arranged in a row, each with a unique number, and initially, all of them are unused. Every day, an employee will take away one pencil, until after n days, all the pencils are taken.\n\n    Given an array of pencils of length n, where pencils[i] = x indicates that on the (i+1)th day, the employee will take the pencil at position x, with i starting from 0 and x starting from 1.\n\n    Now, given an integer k, please calculate the number of days needed to reach the situation where exactly two pencils are taken, and there are k untouched pencils between them. If this situation cannot be reached, return -1.\n\n    Hints:\n\n    + n == pencils.length\n    + 1 <= n <= 2 * 10^4\n    + 1 <= pencils[i] <= n\n    + pencils is a permutation of numbers from 1 to n\n    + 0 <= k <= 2 * 10^4\n\n    >>> find_days([1,3,2], 1)\n    2\n    >>> find_days([1,2,3], 1)\n    -1\n    \"\"\"", "function_name": "find_days", "parameters": ["pencils", "k"], "assert_statements": ["assert find_days([1, 2, 3], 1) == -1", "assert find_days([1, 3, 2], 1) == 2", "assert find_days([1, 3, 2, 5, 4], 1) == 2"]}
{"id": 117, "difficulty_types": 6, "question": "from typing import List\n\ndef milk_deliver(scores: List[int]) -> int:\n    \"\"\"You're a milk delivery man, there are n families on a street, they order milk from you all year round and each family gets a milk credit. \n    Now it's an annual reward, the milk company gives gifts to these families based on their credit, you need to distribute the gifts according to the following rules:\n    -Each family is allocated at least one gift.\n    -Neighboring families with higher points will get more gifts.\n    -Prepare the least number of gifts\n    Please calculate how many gifts these families need.\n    >>> milk_deliver([1,1,2])\n    4\n    >>> milk_deliver([3,1,2])\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef milk_deliver(scores: List[int]) -> int:\n    \"\"\"You're a milk delivery man, there are n families on a street, they order milk from you all year round and each family gets a milk credit. \n    Now it's an annual reward, the milk company gives gifts to these families based on their credit, you need to distribute the gifts according to the following rules:\n    -Each family is allocated at least one gift.\n    -Neighboring families with higher points will get more gifts.\n    -Prepare the least number of gifts\n    Please calculate how many gifts these families need.\n    >>> milk_deliver([1,1,2])\n    4\n    >>> milk_deliver([3,1,2])\n    5\n    \"\"\"", "function_name": "milk_deliver", "parameters": ["scores"], "assert_statements": ["assert milk_deliver([1,4,5,1,2,2]) == 10", "assert milk_deliver([1,3,5,4,3,2]) == 13", "assert milk_deliver([3,3,5,5,7,7,4,4]) == 11"]}
{"id": 118, "difficulty_types": 6, "question": "from typing import List\n\ndef get_treasure(labyrinth: List[List[str]], clues: str) -> int:\n    \"\"\"There is a treasure in an M*N labyrinth that is marked with a sign at each location, which is a letter or a number. You inadvertently get a clue to the treasure. This clue does not necessarily lead to the final treasure, but you can only move forward according to this clue. At the same time, the hint has some invalid information, such as non-numbers and characters. There's also a rule that you can't go through a grid again after you've gone through it. If you can execute all the valid parts of the hint, the hint is correct and you return True, if the hint breaks in the middle, you return False!\n    >>> get_treasure([[\"A\",\"B\",\"C\",\"5\"],[\"11\",\"6\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"2\"]], \"#AB%CCED\")\n    True\n    >>> get_treasure([\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"], \"ABCB\")\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_treasure(labyrinth: List[List[str]], clues: str) -> int:\n    \"\"\"There is a treasure in an M*N labyrinth that is marked with a sign at each location, which is a letter or a number. You inadvertently get a clue to the treasure. This clue does not necessarily lead to the final treasure, but you can only move forward according to this clue. At the same time, the hint has some invalid information, such as non-numbers and characters. There's also a rule that you can't go through a grid again after you've gone through it. If you can execute all the valid parts of the hint, the hint is correct and you return True, if the hint breaks in the middle, you return False!\n    >>> get_treasure([[\"A\",\"B\",\"C\",\"5\"],[\"11\",\"6\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"2\"]], \"#AB%CCED\")\n    True\n    >>> get_treasure([\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"], \"ABCB\")\n    False\n    \"\"\"", "function_name": "get_treasure", "parameters": ["labyrinth", "clues"], "assert_statements": ["assert get_treasure([[\"A\",\"B\",\"C\",\"5\"],[\"11\",\"6\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"2\"]], \"#AB%CCED\") == True", "assert get_treasure([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\") == False", "assert get_treasure([[\"A\",\"B\",\"C\",\"5\"],[\"3\",\"6\",\"C\",\"S\"],[\"A\",\"D\",\"D\",\"2\"]], \"ABCCED\") == False"]}
{"id": 119, "difficulty_types": 6, "question": "from typing import List\n\ndef extract_numbers(s:str)->List[int]:\n    \"\"\"Given a sentence which contain multiple numbers. The numbers are not next to each other and they are represented in English format. For example, 123 is represented as \"One Hundred Twenty Three\". Return the numbers in the sentence in a list.\n    >>> extract_numbers(\"One hundred twenty three\")\n    [123]\n    >>> extract_numbers(\"One hundred and one thousand\")\n    [100,1000]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef extract_numbers(s:str)->List[int]:\n    \"\"\"Given a sentence which contain multiple numbers. The numbers are not next to each other and they are represented in English format. For example, 123 is represented as \"One Hundred Twenty Three\". Return the numbers in the sentence in a list.\n    >>> extract_numbers(\"One hundred twenty three\")\n    [123]\n    >>> extract_numbers(\"One hundred and one thousand\")\n    [100,1000]\n    \"\"\"", "function_name": "extract_numbers", "parameters": ["s"], "assert_statements": ["assert extract_numbers(\"Calculate one plus two\") == [1, 2]", "assert extract_numbers(\"One million two hundred thirty four thousand five hundred sixty seven\") == [1234567]", "assert extract_numbers(\"I have a few ten dollar bills which allow me to pay for a twenty five dollar meal\") == [10, 25]"]}
{"id": 120, "difficulty_types": 6, "question": "from typing import List\n\n\ndef rectangular_land(mat: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called mat. 0 means not planting wheat, and 1 means planting wheat. How many different rectangular plots of land are there in Alice's backyard that are all planted with wheat?\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 150\n    grid[i][j] is 0 or 1.\n\n    >>> rectangular_land([[1,1,1]])\n    6\n    >>> rectangular_land([[1,0,1],[1,1,0],[1,1,0]])276\n    13\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef rectangular_land(mat: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called mat. 0 means not planting wheat, and 1 means planting wheat. How many different rectangular plots of land are there in Alice's backyard that are all planted with wheat?\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 150\n    grid[i][j] is 0 or 1.\n\n    >>> rectangular_land([[1,1,1]])\n    6\n    >>> rectangular_land([[1,0,1],[1,1,0],[1,1,0]])276\n    13\n    \"\"\"", "function_name": "rectangular_land", "parameters": ["mat"], "assert_statements": ["assert rectangular_land([[1]]) == 1", "assert rectangular_land([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]]) == 48", "assert rectangular_land([[1, 0, 0, 1, 1], [0, 1, 0, 1, 1]]) == 11"]}
{"id": 121, "difficulty_types": 7, "question": "def custom_sort(dictionary):\n    \"\"\"Given a dictionary with non-negative integers as keys, sort the key-value pairs in the\n    dictionary where the values are strings. Arrange these key-value pairs in descending order\n    based on the count of ones in the ternary representation of the keys. In case of equal\n    counts of ones, arrange them in ascending order based on the alphabetical order of the values.\n    Return the sorted list.\n    >>> custom_sort({1: 'apple', 2: 123, 3: 'banana', 4: 'orange', 5: 456, 6: 'cherry'})\n    [(4, 'orange'), (1, 'apple'), (3, 'banana'), (6, 'cherry')]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef custom_sort(dictionary):\n    \"\"\"Given a dictionary with non-negative integers as keys, sort the key-value pairs in the\n    dictionary where the values are strings. Arrange these key-value pairs in descending order\n    based on the count of ones in the ternary representation of the keys. In case of equal\n    counts of ones, arrange them in ascending order based on the alphabetical order of the values.\n    Return the sorted list.\n    >>> custom_sort({1: 'apple', 2: 123, 3: 'banana', 4: 'orange', 5: 456, 6: 'cherry'})\n    [(4, 'orange'), (1, 'apple'), (3, 'banana'), (6, 'cherry')]\n    \"\"\"", "function_name": "custom_sort", "parameters": ["dictionary"], "assert_statements": ["assert custom_sort({8:8, 3:\"wto\", 9:\"who\", 27:\"www\"}) == [(9, \"who\"), (3, \"wto\"), (27, \"www\")]", "assert custom_sort({79: 112, 18: \"hello\", 111: 222, 0:\"yes\", 999:\"are\", 5:\"you\", 9:\"ok\"}) == [(999, 'are'),\n (9, 'ok'), (5, 'you'), (18, 'hello'), (0, 'yes')]", "assert custom_sort({1: 'abc', 2: 'bcd', 3: 'abc', 4: 'def', 10: 'ghi', 20: 'jkl', 30: 'mno',\n40: 'pqr', 100: 'stu', 200: 'vwx', 300: 'yza', 400: 'bcd'}) == [(400, 'bcd'), (40, 'pqr'),\n(4, 'def'), (10, 'ghi'), (30, 'mno'), (100, 'stu'), (200, 'vwx'), (300, 'yza'), (1, 'abc'),\n (3, 'abc'), (2, 'bcd'), (20, 'jkl')]"]}
{"id": 122, "difficulty_types": 7, "question": "import re\n\n\ndef find_float(data: str):\n    \"\"\"Find the unique floating-point number in the given string, with priority given\n    to those represented in scientific notation.\n    >>> find_float(\"Its height is 1e6 kilometer\")\n    \"1e6\"\n    >>> find_float(\"Its weight is 123. gram\")\n    \"123.\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nimport re\n\n\ndef find_float(data: str):\n    \"\"\"Find the unique floating-point number in the given string, with priority given\n    to those represented in scientific notation.\n    >>> find_float(\"Its height is 1e6 kilometer\")\n    \"1e6\"\n    >>> find_float(\"Its weight is 123. gram\")\n    \"123.\"\n    \"\"\"", "function_name": "find_float", "parameters": ["data"], "assert_statements": ["assert find_float(\"Hello 123.\") == \"123.\"", "assert find_float(\"123.456\") == \"123.456\"", "assert find_float(\"-123.456\") == \"-123.456\""]}
{"id": 123, "difficulty_types": 7, "question": "from typing import List\n\ndef replace_non_coprime_number(nums: List[int]) -> List[int]:\n    \"\"\"You are given an array of integers nums. Perform the following steps:\n\n    Find any two adjacent numbers in nums that are non-coprime.\n    If no such numbers are found, stop the process.\n    Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).\n    Repeat this process as long as you keep finding two adjacent non-coprime numbers.\n    Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will\n    lead to the same result.\n\n    The test cases are generated such that the values in the final array are less than or equal to 108.\n\n    Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.\n    >>> replace_non_coprime_number([6,4,3,2,7,6,2])\n    [12,7,6]\n    >>> replace_non_coprime_number([5,5,4,3,8,7,3])\n    [5,4,3,8,7,3]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef replace_non_coprime_number(nums: List[int]) -> List[int]:\n    \"\"\"You are given an array of integers nums. Perform the following steps:\n\n    Find any two adjacent numbers in nums that are non-coprime.\n    If no such numbers are found, stop the process.\n    Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).\n    Repeat this process as long as you keep finding two adjacent non-coprime numbers.\n    Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will\n    lead to the same result.\n\n    The test cases are generated such that the values in the final array are less than or equal to 108.\n\n    Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.\n    >>> replace_non_coprime_number([6,4,3,2,7,6,2])\n    [12,7,6]\n    >>> replace_non_coprime_number([5,5,4,3,8,7,3])\n    [5,4,3,8,7,3]\n    \"\"\"", "function_name": "replace_non_coprime_number", "parameters": ["nums"], "assert_statements": ["assert replace_non_coprime_number([3,2,1,1,2,3,4,5]) == [3,2,1,1,2,3,4,5]", "assert replace_non_coprime_number([4,2,2,6,2,8,16,2,10,5]) == [240]", "assert replace_non_coprime_number([3,4,20,8,3,7,6,11,9,13,17,2,3,6,6,16,10,11,3,13,4,20,12,10,19,2,6,14,15,13,17,14,13,17,15,13,18,11,8,17,2,19,9,20,14,16,9,8,14,1,16,11,15,17]) == [3,40,3,7,6,11,9,13,17,240,11,3,13,60,19,210,13,17,14,13,17,15,13,18,11,8,17,2,19,9,560,9,56,1,16,11,15,17]"]}
{"id": 124, "difficulty_types": 7, "question": "def get_specific_permutation(N: int, M: int) -> str:\n    \"\"\"Given a integer N (1 <= N <= 9), there are n! different permutations that can be formed using digits less than or equal to N. If we arrange these permutations in ascending order, for example, when n=3, the 1st result is 123, and the 6th result is 321. Please find the Mth permutation when given the values of N and the positive integer M.\n    >>> get_specific_permutation(3, 6)\n    \"321\"\n    >>> get_specific_permutation(4, 9)\n    \"2314\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_specific_permutation(N: int, M: int) -> str:\n    \"\"\"Given a integer N (1 <= N <= 9), there are n! different permutations that can be formed using digits less than or equal to N. If we arrange these permutations in ascending order, for example, when n=3, the 1st result is 123, and the 6th result is 321. Please find the Mth permutation when given the values of N and the positive integer M.\n    >>> get_specific_permutation(3, 6)\n    \"321\"\n    >>> get_specific_permutation(4, 9)\n    \"2314\"\n    \"\"\"", "function_name": "get_specific_permutation", "parameters": ["N", "M"], "assert_statements": ["assert get_specific_permutation(5, 7) == \"13245\"", "assert get_specific_permutation(9, 200) == \"123586497\"", "assert get_specific_permutation(7, 4000) == \"6425371\""]}
{"id": 125, "difficulty_types": 7, "question": "from typing import List\n\ndef generate_string_permutation(raw_data: List[str], replaced_str: str) -> int:\n    \"\"\"Generate all permutations of raw_data elements, excluding one element per permutation.\n    Replace up to three occurrences of replaced_str in each permutation with an empty string.\n    Return the number of unique strings.\n    >>> generate_string_permutation([\"a\", \"b\", \"c\"], \"a\")\n    4\n    >>> generate_string_permutation([\"hello\", \"world\", \"rock\", \"great\"], \"or\")\n    24\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef generate_string_permutation(raw_data: List[str], replaced_str: str) -> int:\n    \"\"\"Generate all permutations of raw_data elements, excluding one element per permutation.\n    Replace up to three occurrences of replaced_str in each permutation with an empty string.\n    Return the number of unique strings.\n    >>> generate_string_permutation([\"a\", \"b\", \"c\"], \"a\")\n    4\n    >>> generate_string_permutation([\"hello\", \"world\", \"rock\", \"great\"], \"or\")\n    24\n    \"\"\"", "function_name": "generate_string_permutation", "parameters": ["raw_data", "replaced_str"], "assert_statements": ["assert generate_string_permutation([\"apple\", \"banana\", \"cherry\", \"teacher\", \"hachimitsu\", \"capybara\"], \"h\") == 720", "assert generate_string_permutation([\"epoch\", \"example\", \"text\", \"replacement\", \"permutation\"], \"ep\") == 120", "assert generate_string_permutation([\"ee\", \"egacbejaee\", \"ooklajfleekla\", \"akeieie\", \"really\"], \"e\") == 114"]}
{"id": 126, "difficulty_types": 7, "question": "from typing import List\n\ndef string_count(s: str, queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a string 's' that is indexed starting at 0, and a two-dimensional array 'queries' consisting of pairs [li, ri], which defines a substring in 's' from the index 'li' to 'ri' inclusive, determine the number of substrings for each query that have matching starting and ending characters. Provide the results as an array 'ans', where 'ans[i]' corresponds to the query 'queries[i]'. A substring is considered to have matching ends if the first and last characters are identical.\n\n    >>> string_count(\"abcaab\", [[0,0],[1,4],[2,5],[0,5]])\n    [1,5,5,10]\n    >>> string_count(\"abcd\", [[0,3]])\n    [4]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef string_count(s: str, queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a string 's' that is indexed starting at 0, and a two-dimensional array 'queries' consisting of pairs [li, ri], which defines a substring in 's' from the index 'li' to 'ri' inclusive, determine the number of substrings for each query that have matching starting and ending characters. Provide the results as an array 'ans', where 'ans[i]' corresponds to the query 'queries[i]'. A substring is considered to have matching ends if the first and last characters are identical.\n\n    >>> string_count(\"abcaab\", [[0,0],[1,4],[2,5],[0,5]])\n    [1,5,5,10]\n    >>> string_count(\"abcd\", [[0,3]])\n    [4]\n    \"\"\"", "function_name": "string_count", "parameters": ["s", "queries"], "assert_statements": ["assert string_count(\"abcaab\", [[0,0],[1,4],[2,5],[0,5]]) == [1,5,5,10]", "assert string_count(\"abcd\", [[0,3]]) == [4]", "assert string_count(\"abcddcba\", [[0,3], [1,3], [0,7]]) == [4,3,12]"]}
{"id": 127, "difficulty_types": 7, "question": "from typing import List\n\ndef max_score(prices: List[int]) -> int:\n    \"\"\"\n    Given a 1-indexed integer array, 'prices', where each element represents the price of a certain stock on the corresponding day, you are required to linearly select some elements from the array. A subsequence selection is termed 'indexes', a 1-indexed integer sub-array of length k. \n\n    This selection is considered 'linear' if the difference between the price of the 'j-th' stock and the price of the '(j - 1)'-th stock is equal to the difference between their indexes in each case, where 1 < j <= k.\n\n    The total achievable score from a given selection is the sum of all prices corresponding to the selected indexes. \n\n    What is the maximum score attainable through linear selection?\n\n    >>> max_score([1,5,3,7,8])\n    20\n    >>> max_score([5,6,7,8,9])\n    35\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_score(prices: List[int]) -> int:\n    \"\"\"\n    Given a 1-indexed integer array, 'prices', where each element represents the price of a certain stock on the corresponding day, you are required to linearly select some elements from the array. A subsequence selection is termed 'indexes', a 1-indexed integer sub-array of length k. \n\n    This selection is considered 'linear' if the difference between the price of the 'j-th' stock and the price of the '(j - 1)'-th stock is equal to the difference between their indexes in each case, where 1 < j <= k.\n\n    The total achievable score from a given selection is the sum of all prices corresponding to the selected indexes. \n\n    What is the maximum score attainable through linear selection?\n\n    >>> max_score([1,5,3,7,8])\n    20\n    >>> max_score([5,6,7,8,9])\n    35\n    \"\"\"", "function_name": "max_score", "parameters": ["prices"], "assert_statements": ["assert max_score([1,5,3,7,8]) == 20", "assert max_score([5,6,7,8,9]) == 35", "assert max_score([1,2,3]) == 6"]}
{"id": 128, "difficulty_types": 7, "question": "from typing import List\n\ndef list_identifier(ids: List[int], parentIds: List[int], target: int) -> List[int]:\n    \"\"\"\n    In a digital family tree, there are n individuals each assigned a unique identifier. The connections between them are tracked with two arrays, ids and parentIds, with ids[i] representing each individual's unique identifier, and parentIds[i] representing the identifier of their immediate ancestor.\n\n    Every individual in this tree is a descendant with exactly one ancestor, except for the founding ancestor who has no predecessor, indicated by a parentIds[i] value of 0.\n\n    When a lineage is set to be discontinued, both the target ancestor and all of their descendants are to be included in the discontinuation.\n\n    You are to determine the set of identifiers for those who are discontinued when an individual with a specific identifier is targeted. List all identifiers of the individuals in this lineage. The order of the list is not important.\n\n    >>> list_identifier([1,3,10,5], [3,0,5,3], 5)\n    [5,10]\n    >>> list_identifier([1], [0], 1)\n    [1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef list_identifier(ids: List[int], parentIds: List[int], target: int) -> List[int]:\n    \"\"\"\n    In a digital family tree, there are n individuals each assigned a unique identifier. The connections between them are tracked with two arrays, ids and parentIds, with ids[i] representing each individual's unique identifier, and parentIds[i] representing the identifier of their immediate ancestor.\n\n    Every individual in this tree is a descendant with exactly one ancestor, except for the founding ancestor who has no predecessor, indicated by a parentIds[i] value of 0.\n\n    When a lineage is set to be discontinued, both the target ancestor and all of their descendants are to be included in the discontinuation.\n\n    You are to determine the set of identifiers for those who are discontinued when an individual with a specific identifier is targeted. List all identifiers of the individuals in this lineage. The order of the list is not important.\n\n    >>> list_identifier([1,3,10,5], [3,0,5,3], 5)\n    [5,10]\n    >>> list_identifier([1], [0], 1)\n    [1]\n    \"\"\"", "function_name": "list_identifier", "parameters": ["ids", "parentIds", "target"], "assert_statements": ["assert sorted(list_identifier([1,3,10,5], [3,0,5,3], 5)) == sorted([5,10])", "assert sorted(list_identifier([1], [0], 1)) == sorted([1])", "assert sorted(list_identifier([2,4,6,8], [4,6,0,6], 4)) == sorted([4,2])"]}
{"id": 129, "difficulty_types": 7, "question": "def divide_string(s: str) -> bool:\n    \"\"\"\n    A string composed entirely of repetitive characters is known as a uniform string.\n\n    For example, \"1111\" and \"33\" are uniform strings. By contrast, \"123\" is not a uniform string.\n    Rule: Given a numeric string s, divide the string into some uniform substrings, such that there is exactly one uniform substring of length 2 and all other uniform substrings have a length of 3.\n\n    If the string s can be divided according to the rule mentioned above, return true; otherwise, return false.\n\n    Substrings are sequences of contiguous characters within the original string.\n    >>> divide_string(\"000111000\")\n    false\n    >>> divide_string(\"00011111222\")\n    true\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef divide_string(s: str) -> bool:\n    \"\"\"\n    A string composed entirely of repetitive characters is known as a uniform string.\n\n    For example, \"1111\" and \"33\" are uniform strings. By contrast, \"123\" is not a uniform string.\n    Rule: Given a numeric string s, divide the string into some uniform substrings, such that there is exactly one uniform substring of length 2 and all other uniform substrings have a length of 3.\n\n    If the string s can be divided according to the rule mentioned above, return true; otherwise, return false.\n\n    Substrings are sequences of contiguous characters within the original string.\n    >>> divide_string(\"000111000\")\n    false\n    >>> divide_string(\"00011111222\")\n    true\n    \"\"\"", "function_name": "divide_string", "parameters": ["s"], "assert_statements": ["assert divide_string(\"000111000\") == False", "assert divide_string(\"00011111222\") == True", "assert divide_string(\"011100022233\") == False"]}
{"id": 130, "difficulty_types": 7, "question": "from typing import List\n\ndef count_subs(s: str, count: int) -> int:\n    \"\"\"\n    Given a string `s` that starts with an index of 0 and only includes lowercase English letters, along with an integer `count`, your task is to find and return the number of substrings within `s` where each type of letter appears exactly `count` times. This would make it an equal-count substring. Note that a substring is a contiguous sequence of non-empty characters within the string.\n\n    >>> count_subs(\"aaabcbbcc\", 3)\n    3\n    Explanation:The output is 3 because there are 3 equal-count substrings. The first substring starts at index 0 and ends at index 2 is \"aaa\", where the letter \"a\" appears exactly 3 times. The second substring starts at index 3 and ends at index 8 is \"bcbbcc\", the letters \"b\" and \"c\" each appear exactly 3 times. The third substring starts at index 0 and ends at index 8 is \"aaabcbbcc\", the letters \"a\", \"b\", and \"c\" each appear exactly 3 times.\n    >>> count_subs(\"abcd\", 2)\n    0\n    Explanation:The output is 0 because each type of letter in `s` appears fewer times than `count`, therefore, there are no equal-count substrings in `s`, so we return 0.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef count_subs(s: str, count: int) -> int:\n    \"\"\"\n    Given a string `s` that starts with an index of 0 and only includes lowercase English letters, along with an integer `count`, your task is to find and return the number of substrings within `s` where each type of letter appears exactly `count` times. This would make it an equal-count substring. Note that a substring is a contiguous sequence of non-empty characters within the string.\n\n    >>> count_subs(\"aaabcbbcc\", 3)\n    3\n    Explanation:The output is 3 because there are 3 equal-count substrings. The first substring starts at index 0 and ends at index 2 is \"aaa\", where the letter \"a\" appears exactly 3 times. The second substring starts at index 3 and ends at index 8 is \"bcbbcc\", the letters \"b\" and \"c\" each appear exactly 3 times. The third substring starts at index 0 and ends at index 8 is \"aaabcbbcc\", the letters \"a\", \"b\", and \"c\" each appear exactly 3 times.\n    >>> count_subs(\"abcd\", 2)\n    0\n    Explanation:The output is 0 because each type of letter in `s` appears fewer times than `count`, therefore, there are no equal-count substrings in `s`, so we return 0.\n    \"\"\"", "function_name": "count_subs", "parameters": ["s", "count"], "assert_statements": ["assert count_subs(\"aaabcbbcc\", 3) == 3", "assert count_subs(\"abcd\", 2) == 0", "assert count_subs(\"a\", 5) == 0"]}
{"id": 131, "difficulty_types": 7, "question": "from typing import List\n\ndef remove_add_game(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a 1-indexed integer array `prices`, where `prices[i]` is the price of a certain stock on day `i`, your task is to linearly select some elements from `prices`.\n\n    A selection `indexes`, where `indexes` is a 1-indexed integer array of length `k` and is a subsequence of the array `[1, 2, ..., n]`, is considered linear if the following condition holds:\n\n    For each `1 < j <= k`, `prices[indexes[j]] - prices[indexes[j - 1]] == indexes[j] - indexes[j - 1]`.\n\n    A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none), without changing the relative order of the remaining elements.\n\n    The score of selecting `indexes` is equal to the sum of the following array: `[prices[indexes[1]], prices[indexes[2]], ..., prices[indexes[k]]`.\n\n    Return the maximum score of a linear selection.\n    >>>remove_add_game([1,2,3,4])\n    [2,1,4,3]\n    >>>remove_add_game([10,1])\n    [10,1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef remove_add_game(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a 1-indexed integer array `prices`, where `prices[i]` is the price of a certain stock on day `i`, your task is to linearly select some elements from `prices`.\n\n    A selection `indexes`, where `indexes` is a 1-indexed integer array of length `k` and is a subsequence of the array `[1, 2, ..., n]`, is considered linear if the following condition holds:\n\n    For each `1 < j <= k`, `prices[indexes[j]] - prices[indexes[j - 1]] == indexes[j] - indexes[j - 1]`.\n\n    A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none), without changing the relative order of the remaining elements.\n\n    The score of selecting `indexes` is equal to the sum of the following array: `[prices[indexes[1]], prices[indexes[2]], ..., prices[indexes[k]]`.\n\n    Return the maximum score of a linear selection.\n    >>>remove_add_game([1,2,3,4])\n    [2,1,4,3]\n    >>>remove_add_game([10,1])\n    [10,1]\n    \"\"\"", "function_name": "remove_add_game", "parameters": ["nums"], "assert_statements": ["assert remove_add_game([5,4,2,3]) == [3,2,5,4]", "assert remove_add_game([2,5]) == [5,2]", "assert remove_add_game([4,4,3,8]) == [4,3,8,4]"]}
{"id": 132, "difficulty_types": 7, "question": "from typing import List\n\ndef minimum_coins(prices: List[int]) -> int:\n    \"\"\"\n    You're in a fruit market where each fruit has a price in gold coins, listed in prices. (index start from 1)\n    The market offers a special deal: when you buy a fruit for its price, you get the next few fruits for free.\n    The number of free fruits you get is equal to the number of the fruit you bought.\n    For example, if you buy the 3rd fruit, you get the next 3 fruits for free.\n    You can also choose to buy a fruit that's available for free to get its corresponding number of free fruits.\n    Your goal is to find out the least amount of gold coins needed to buy all the fruits.\n    >>>minimum_coins([1,2,3,4])\n    3\n    >>>minimum_coins([2, 1])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef minimum_coins(prices: List[int]) -> int:\n    \"\"\"\n    You're in a fruit market where each fruit has a price in gold coins, listed in prices. (index start from 1)\n    The market offers a special deal: when you buy a fruit for its price, you get the next few fruits for free.\n    The number of free fruits you get is equal to the number of the fruit you bought.\n    For example, if you buy the 3rd fruit, you get the next 3 fruits for free.\n    You can also choose to buy a fruit that's available for free to get its corresponding number of free fruits.\n    Your goal is to find out the least amount of gold coins needed to buy all the fruits.\n    >>>minimum_coins([1,2,3,4])\n    3\n    >>>minimum_coins([2, 1])\n    2\n    \"\"\"", "function_name": "minimum_coins", "parameters": ["prices"], "assert_statements": ["assert minimum_coins([3,1,2]) == 4", "assert minimum_coins([11,10,1]) == 12", "assert minimum_coins([1,10,1,1]) == 2"]}
{"id": 133, "difficulty_types": 7, "question": "from typing import List\n\ndef find_words(words: List[str], x: str) -> List[int]:\n    \"\"\"\n    Given an array of strings called 'words' and a character 'x', return an array of indexes.\n    These indexes should correspond to the words in 'words' that contain the character 'x'.\n    The order of indexes in the return array does not matter.\n    >>>find_words([\"bo\",\"god\"], \"o\")\n    [0,1]\n    >>>find_words([\"guo\",\"god\"], \"g\")\n    [0,1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_words(words: List[str], x: str) -> List[int]:\n    \"\"\"\n    Given an array of strings called 'words' and a character 'x', return an array of indexes.\n    These indexes should correspond to the words in 'words' that contain the character 'x'.\n    The order of indexes in the return array does not matter.\n    >>>find_words([\"bo\",\"god\"], \"o\")\n    [0,1]\n    >>>find_words([\"guo\",\"god\"], \"g\")\n    [0,1]\n    \"\"\"", "function_name": "find_words", "parameters": ["words", "x"], "assert_statements": ["assert find_words([\"abc\",\"bcd\",\"cbc\"],\"c\") == [0,1,2]", "assert find_words([\"abc\",\"bcd\",\"aaaa\",\"cbc\"],\"a\") == [0,2]", "assert find_words([\"abc\",\"bcd\",\"aaaa\",\"cbc\"],\"z\") == []"]}
{"id": 134, "difficulty_types": 7, "question": "from typing import List\n\ndef split_to_digits(nums: List[int]) -> List[int]:\n    \"\"\"\n    You are given a positive integer array nums.\n\n    You need to return an array answer, where you split each integer in nums into its digits and place them in answer in the same order as they appeared in nums.\n\n    To split an integer into digits means to arrange the digits of the integer in the original order they appeared in to form an array.\n    >>>split_to_digits([1,2,3,4])\n    [1,2,3,4]\n    >>>split_to_digits([22,13,45])\n    [2,2,1,3,4,5]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef split_to_digits(nums: List[int]) -> List[int]:\n    \"\"\"\n    You are given a positive integer array nums.\n\n    You need to return an array answer, where you split each integer in nums into its digits and place them in answer in the same order as they appeared in nums.\n\n    To split an integer into digits means to arrange the digits of the integer in the original order they appeared in to form an array.\n    >>>split_to_digits([1,2,3,4])\n    [1,2,3,4]\n    >>>split_to_digits([22,13,45])\n    [2,2,1,3,4,5]\n    \"\"\"", "function_name": "split_to_digits", "parameters": ["nums"], "assert_statements": ["assert split_to_digits([7,1,3,9]) == [7,1,3,9]", "assert split_to_digits([9,81,33,17,58,42,8,75]) == [9,8,1,3,3,1,7,5,8,4,2,8,7,5]", "assert split_to_digits([97,97,72,35,21,77,82,30,94,55,76,94,51,82,3]) ==  [9,7,9,7,7,2,3,5,2,1,7,7,8,2,3,0,9,4,5,5,7,6,9,4,5,1,8,2,3]"]}
{"id": 135, "difficulty_types": 7, "question": "from typing import List\n\ndef combine_items_by_value(items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    You are given two 2D integer arrays items1 and items2 representing two sets of items. Each array items has the following properties:\n\n    - items[i] = [valuei, weighti] where valuei is the value of the ith item and weighti is the weight of the ith item.\n\n    - The values of the items in items are unique.\n\n    Return a 2D array ret where ret[i] = [valuei, weighti] such that weighti is the sum of the weights of all items with value equal to valuei.\n    >>>combine_items_by_value([[1,1]],[[2,1]])\n    [[1,1],[2,1]]\n    >>>combine_items_by_value([[1,3],[2,2]][[1,2]])\n    [[1,5],[2,2]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef combine_items_by_value(items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    You are given two 2D integer arrays items1 and items2 representing two sets of items. Each array items has the following properties:\n\n    - items[i] = [valuei, weighti] where valuei is the value of the ith item and weighti is the weight of the ith item.\n\n    - The values of the items in items are unique.\n\n    Return a 2D array ret where ret[i] = [valuei, weighti] such that weighti is the sum of the weights of all items with value equal to valuei.\n    >>>combine_items_by_value([[1,1]],[[2,1]])\n    [[1,1],[2,1]]\n    >>>combine_items_by_value([[1,3],[2,2]][[1,2]])\n    [[1,5],[2,2]]\n    \"\"\"", "function_name": "combine_items_by_value", "parameters": ["items1", "items2"], "assert_statements": ["assert combine_items_by_value([[1,3],[2,2]],[[7,1],[2,2],[1,4]]) == [[1,7],[2,4],[7,1]]", "assert combine_items_by_value([[2,9],[24,4],[11,1],[16,3],[1,4],[28,3],[23,8],[3,3]],[[7,6],[12,7],[9,5],[22,4],[6,3],[17,1]]) == [[1,4],[2,9],[3,3],[6,3],[7,6],[9,5],[11,1],[12,7],[16,3],[17,1],[22,4],[23,8],[24,4],[28,3]]", "assert combine_items_by_value([[18,1],[17,2],[8,8],[29,1],[30,1],[4,3],[28,4]],[[18,3],[17,7],[8,8],[29,3],[30,2],[4,6],[28,2]]) == [[4,9],[8,16],[17,9],[18,4],[28,6],[29,4],[30,3]]"]}
{"id": 136, "difficulty_types": 7, "question": "def count_full_weeks(year: int, month: int) -> int:\n    \"\"\"\n    Given a specific year 'year' and month 'month', return the number of complete weeks in that month.\n\n    Note:\n    + 1583 <= year <= 2100\n    + 1 <= month <= 12\n\n    >>> count_full_weeks(2024, 1)\n    4\n    >>> count_full_weeks(2000, 2)\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef count_full_weeks(year: int, month: int) -> int:\n    \"\"\"\n    Given a specific year 'year' and month 'month', return the number of complete weeks in that month.\n\n    Note:\n    + 1583 <= year <= 2100\n    + 1 <= month <= 12\n\n    >>> count_full_weeks(2024, 1)\n    4\n    >>> count_full_weeks(2000, 2)\n    3\n    \"\"\"", "function_name": "count_full_weeks", "parameters": ["year", "month"], "assert_statements": ["assert count_full_weeks(2024, 1) == 4", "assert count_full_weeks(2024, 2) == 3", "assert count_full_weeks(2024, 3) == 4"]}
{"id": 137, "difficulty_types": 7, "question": "def work_or_rest(day: str) -> str:\n    \"\"\"There is a Chinese saying called \"go fishing for three days and dry the nets for two days\", it means work by fits and starts. \n    Someone has been working this way since January 1, 2000. I want to know if this person is working or resting on a certain day, please help me solve it.\n    Given a day, the format is yyyy-mm-dd, retrun his state \"work\" or \"rest\". if the input date does not exist or early than January 1, 2000, return \"illegal input\"\n    >>> work_or_rest(\"2000-1-2\")\n    \"work\"\n    >>> work_or_rest(\"2000-1-5\")\n    \"rest\"\n    >>> work_or_rest(\"2000-2-30\")\n    \"illegal input\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef work_or_rest(day: str) -> str:\n    \"\"\"There is a Chinese saying called \"go fishing for three days and dry the nets for two days\", it means work by fits and starts. \n    Someone has been working this way since January 1, 2000. I want to know if this person is working or resting on a certain day, please help me solve it.\n    Given a day, the format is yyyy-mm-dd, retrun his state \"work\" or \"rest\". if the input date does not exist or early than January 1, 2000, return \"illegal input\"\n    >>> work_or_rest(\"2000-1-2\")\n    \"work\"\n    >>> work_or_rest(\"2000-1-5\")\n    \"rest\"\n    >>> work_or_rest(\"2000-2-30\")\n    \"illegal input\"\n    \"\"\"", "function_name": "work_or_rest", "parameters": ["day"], "assert_statements": ["assert work_or_rest(\"2020-1-1\") == \"work\"", "assert work_or_rest(\"2020-1-5\") == \"rest\"", "assert work_or_rest(\"2020-2-30\") == \"illegal input\""]}
{"id": 138, "difficulty_types": 7, "question": "from typing import List\n\ndef k_closest(points: List[List[int]], target_point:List[int], k: int) -> List[int]:\n    \"\"\"Given an array called points, where points[i]=[xi, yi, zi] denotes a point in X-Y-Z space, and xi, yi, zi are integers. Also given a target point, return the k closest points to the target point, where distance is defined as euclidean distance. The returned k points should be sorted in ascending order by distance, and if there are points with equal distances, the one with smaller dictionary order by xiyizi is prioritized.\n    >>> k_closest([[1,3,1],[-2,2,1]], [1,2,1], 1)\n    [[1,3,1]]\n    >>> k_closest([[3,3,3],[4,4,4],[-5,-5,-5]], [0,0,0], 2)\n    [[3,3,3], [4,4,4]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef k_closest(points: List[List[int]], target_point:List[int], k: int) -> List[int]:\n    \"\"\"Given an array called points, where points[i]=[xi, yi, zi] denotes a point in X-Y-Z space, and xi, yi, zi are integers. Also given a target point, return the k closest points to the target point, where distance is defined as euclidean distance. The returned k points should be sorted in ascending order by distance, and if there are points with equal distances, the one with smaller dictionary order by xiyizi is prioritized.\n    >>> k_closest([[1,3,1],[-2,2,1]], [1,2,1], 1)\n    [[1,3,1]]\n    >>> k_closest([[3,3,3],[4,4,4],[-5,-5,-5]], [0,0,0], 2)\n    [[3,3,3], [4,4,4]]\n    \"\"\"", "function_name": "k_closest", "parameters": ["points", "target_point", "k"], "assert_statements": ["assert k_closest([[5,6,7],[3,4,5]], [2,8,2], 1) == [[3, 4, 5]]", "assert k_closest([[-1,-1,-1],[1,1,1],[-1,1,-1],[-1,-1,1]], [0,0,0], 3) == [[-1,-1,-1],[-1,-1,1], [-1,1,-1]]", "assert k_closest([[100,23,44],[25,33,78],[32,40,50],[12,90,78],[9,104,33]], [45,63,24], 2) == [[32,40,50], [9,104,33]]"]}
{"id": 139, "difficulty_types": 7, "question": "def restore_message_order(message: str) -> str:\n    \"\"\"In an encrypted communication system, messages are encoded by reversing the order of words.\n    However, these messages may be distorted by leading, trailing, or excessive spaces during transmission.\n    Your task is to develop an algorithm to clean and restore these messages, ensuring that words appear\n    in the correct order and are separated by only a single space between them.\n    >>> restore_message_order(\" apple \")\n    apple\n    >>> restore_message_order(\"   world hello\")\n    hello world\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef restore_message_order(message: str) -> str:\n    \"\"\"In an encrypted communication system, messages are encoded by reversing the order of words.\n    However, these messages may be distorted by leading, trailing, or excessive spaces during transmission.\n    Your task is to develop an algorithm to clean and restore these messages, ensuring that words appear\n    in the correct order and are separated by only a single space between them.\n    >>> restore_message_order(\" apple \")\n    apple\n    >>> restore_message_order(\"   world hello\")\n    hello world\n    \"\"\"", "function_name": "restore_message_order", "parameters": ["message"], "assert_statements": ["assert restore_message_order(\"  \") == \"\"", "assert restore_message_order(\" message      real\") == \"real message\"", "assert restore_message_order(\"   language best  the is php \") == \"php is the best language\""]}
{"id": 140, "difficulty_types": 7, "question": "from typing import List\n\ndef hamming_distance_sum(integers: List[int]) -> int:\n    \"\"\"Given an integer array nums, calculate the total number of positions at which the corresponding bits\n    differ amongst all possible pairs of the numbers within the array. Note that every integer is smaller\n    than 1000000000.\n    >>> hamming_distance_sum([1, 2, 3])\n    4\n    >>> hamming_distance_sum([20, 4, 2])\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef hamming_distance_sum(integers: List[int]) -> int:\n    \"\"\"Given an integer array nums, calculate the total number of positions at which the corresponding bits\n    differ amongst all possible pairs of the numbers within the array. Note that every integer is smaller\n    than 1000000000.\n    >>> hamming_distance_sum([1, 2, 3])\n    4\n    >>> hamming_distance_sum([20, 4, 2])\n    6\n    \"\"\"", "function_name": "hamming_distance_sum", "parameters": ["integers"], "assert_statements": ["assert hamming_distance_sum([7,13,19,3,101, 103, 107, 109, 113, 127, 131, 137, 139, 149]) == 321", "assert hamming_distance_sum([12,34,5,6,7,8,9,10,11,123,138,123,22,938,28,199,20,828,888,231,832,34,985,719]) == 1258", "assert hamming_distance_sum([12,34,5,1,82,34,985,719,24,13,89,891,919,9145,381128927]) == 680"]}
