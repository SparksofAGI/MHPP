{"id": 1, "difficulty_types": 1, "question": "def table_tennis_results(marks: str) -> int:\n    \"\"\"Adham Sharara was elected as the sixth President of the International Table Tennis Federation(ITTF) in 1999.\n    Under his leadership, the ITTF underwent several reforms in the table tennis events to promote the sport globally.\n    For instance, they changed the scoring system from the 21-point format to an 11-point format. Since then, matches\n    have been played with an 11-point system, with a requirement of achieving a two-point lead upon reaching 11 points.\n\n\tRecently, Alice and Bob had a table tennis match. The match progress is represented by a string composed of 'A's \n\tfor Alice's points and 'B's for Bob's points. Please analyze the scores of each game and determine who is currently\n    leading overall. If Alice is leading, output 1; if Bob is leading, output -1; if they are tied, output 0.\n    >>> table_tennis_results(\"AAAAAAAAAAA\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBB\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABABABABAAAABBBABABABBAABBABB\")\n    0\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBBBBBBBB\")\n    -1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef table_tennis_results(marks: str) -> int:\n    \"\"\"Adham Sharara was elected as the sixth President of the International Table Tennis Federation(ITTF) in 1999.\n    Under his leadership, the ITTF underwent several reforms in the table tennis events to promote the sport globally.\n    For instance, they changed the scoring system from the 21-point format to an 11-point format. Since then, matches\n    have been played with an 11-point system, with a requirement of achieving a two-point lead upon reaching 11 points.\n\n\tRecently, Alice and Bob had a table tennis match. The match progress is represented by a string composed of 'A's \n\tfor Alice's points and 'B's for Bob's points. Please analyze the scores of each game and determine who is currently\n    leading overall. If Alice is leading, output 1; if Bob is leading, output -1; if they are tied, output 0.\n    >>> table_tennis_results(\"AAAAAAAAAAA\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBB\")\n    1\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABABABABAAAABBBABABABBAABBABB\")\n    0\n    >>> table_tennis_results(\"BBBAAABABABABAAAAABBBBBBBBBBBB\")\n    -1\n    \"\"\"", "function_name": "table_tennis_results", "parameters": ["marks"]}
{"id": 2, "difficulty_types": 1, "question": "from typing import List\n\ndef expectation_number(scores: List[int]) -> int:\n    \"\"\"The annual spring recruitment has begun at an internet company, and a total of n candidates have been selected.\n    Each candidate submits a resume, and the company generates an estimated ability value based on the provided resume\n    information, where a higher numerical value indicates a higher likelihood of passing the interview.\n\n    Alice and Bob are responsible for reviewing the candidates. They each have all the resumes and will review them in\n    descending order of the candidates' ability values. Since the resumes have been shuffled in advance, the order of\n    appearance of resumes with the same ability values is taken uniformly at random from their permutations.\n\n    Now, given the ability values of n candidates as scores, let X represent the number of resumes that appear at the\n    same position in the review order of both Alice and Bob. Calculate the expected value of X.\n\n    Hint: The formula for calculating the expected value of a discrete non-negative random variable is shown below:\n    E(X) = sum([k * probability_of_k for k in list])\n    >>> expectation_number([1, 2, 3, 4])\n    4\n    >>> expectation_number([1, 1, 2])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef expectation_number(scores: List[int]) -> int:\n    \"\"\"The annual spring recruitment has begun at an internet company, and a total of n candidates have been selected.\n    Each candidate submits a resume, and the company generates an estimated ability value based on the provided resume\n    information, where a higher numerical value indicates a higher likelihood of passing the interview.\n\n    Alice and Bob are responsible for reviewing the candidates. They each have all the resumes and will review them in\n    descending order of the candidates' ability values. Since the resumes have been shuffled in advance, the order of\n    appearance of resumes with the same ability values is taken uniformly at random from their permutations.\n\n    Now, given the ability values of n candidates as scores, let X represent the number of resumes that appear at the\n    same position in the review order of both Alice and Bob. Calculate the expected value of X.\n\n    Hint: The formula for calculating the expected value of a discrete non-negative random variable is shown below:\n    E(X) = sum([k * probability_of_k for k in list])\n    >>> expectation_number([1, 2, 3, 4])\n    4\n    >>> expectation_number([1, 1, 2])\n    2\n    \"\"\"", "function_name": "expectation_number", "parameters": ["scores"]}
{"id": 3, "difficulty_types": 1, "question": "from typing import List\n\ndef get_maximum_capital(n: int, c: int, profits: List[int], capital: List[int]) -> int:\n    \"\"\"As AI products like ChatGPT become popular worldwide, many artificial intelligence companies are eager\n    to try their luck. One company is about to start an IPO, and in order to sell its stocks to venture capital \n    firms at a higher price, the company wants to undertake some projects before the IPO to increase its capital.\n    Due to limited resources, it can only complete up to n different projects before the IPO. Help the company\n    design a way to complete at most n different projects after which it can obtain the maximum total capital.\n\n    You are given m projects. For each project i, it has a net profit profits[i] and the minimum capital capital[i]\n    required to start the project.\n\n    Initially, your capital is c. When you complete a project, you will gain the net profit, and the profit will \n    be added to your total capital.\n\n    In summary, choose a list of up to n different projects from the given projects to maximize the final capital,\n    and output the maximum capital that can be obtained in the end.\n    >>> get_maximum_capital(3, 0, [1,2,3], [0,1,2])\n    6\n    >>> get_maximum_capital(2, 0, [1,2,3], [0,1,1])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_maximum_capital(n: int, c: int, profits: List[int], capital: List[int]) -> int:\n    \"\"\"As AI products like ChatGPT become popular worldwide, many artificial intelligence companies are eager\n    to try their luck. One company is about to start an IPO, and in order to sell its stocks to venture capital \n    firms at a higher price, the company wants to undertake some projects before the IPO to increase its capital.\n    Due to limited resources, it can only complete up to n different projects before the IPO. Help the company\n    design a way to complete at most n different projects after which it can obtain the maximum total capital.\n\n    You are given m projects. For each project i, it has a net profit profits[i] and the minimum capital capital[i]\n    required to start the project.\n\n    Initially, your capital is c. When you complete a project, you will gain the net profit, and the profit will \n    be added to your total capital.\n\n    In summary, choose a list of up to n different projects from the given projects to maximize the final capital,\n    and output the maximum capital that can be obtained in the end.\n    >>> get_maximum_capital(3, 0, [1,2,3], [0,1,2])\n    6\n    >>> get_maximum_capital(2, 0, [1,2,3], [0,1,1])\n    4\n    \"\"\"", "function_name": "get_maximum_capital", "parameters": ["n", "c", "profits", "capital"]}
{"id": 4, "difficulty_types": 1, "question": "def least_goods_number(n: int) -> int:\n    \"\"\"Given a list of products where the first column represents the product name and the second column\n    represents the product price. You have n dollers, please calculate and return the minimum number of products\n    required to spend the total amount exactly. If no combination of products can add up to the total amount,\n    return -1. You can assume that the quantity of each product is unlimited.\n    +---------------+---------------+\n    |     Milk      |       2       |\n    |---------------|---------------|\n    |     Soap      |       3       |\n    |---------------|---------------|\n    |   Batteries   |       5       |\n    |---------------|---------------|\n    |     Eggs      |       1       |\n    +---------------+---------------+\n    >>> least_goods_number(11)\n    3\n    >>> least_goods_number(5)\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef least_goods_number(n: int) -> int:\n    \"\"\"Given a list of products where the first column represents the product name and the second column\n    represents the product price. You have n dollers, please calculate and return the minimum number of products\n    required to spend the total amount exactly. If no combination of products can add up to the total amount,\n    return -1. You can assume that the quantity of each product is unlimited.\n    +---------------+---------------+\n    |     Milk      |       2       |\n    |---------------|---------------|\n    |     Soap      |       3       |\n    |---------------|---------------|\n    |   Batteries   |       5       |\n    |---------------|---------------|\n    |     Eggs      |       1       |\n    +---------------+---------------+\n    >>> least_goods_number(11)\n    3\n    >>> least_goods_number(5)\n    1\n    \"\"\"", "function_name": "least_goods_number", "parameters": ["n"]}
{"id": 5, "difficulty_types": 1, "question": "from typing import List\n\ndef arrange_ark_pairs(ark_deck: List[int]) -> int:\n    \"\"\"Legend tells of a great Ark built by Noah to survive an immense flood that would cover the Earth.\n    To preserve the natural world, Noah invited animals to join him on the Ark, inviting them in pairs so\n    that each species could continue in the new world.\n\n    As the animals boarded the Ark, they were assigned places in a linear formation across the Ark's deck.\n    However, in the rush to board before the rain began, the animal pairs became separated across the 2n available spaces.\n    Each animal is known by a unique identifier, and the list of these identifiers as they are arranged on the Ark\n    is given by an integer array `arkDeck` where `arkDeck[i]` represents the animal occupying the ith space.\n    The pairs were meant to board in order, with the first pair being (0, 1), the second pair (2, 3), and so on,\n    up to the last pair being (2n - 2, 2n - 1).\n\n    Your task is to help Noah figure out the minimum number of exchanges necessary to reposition the animals so that\n    each pair is resting side by side. An exchange is the act of two animals, regardless of their species, standing\n    up from their places and switching spots on the deck.\n    >>> arrange_ark_pairs([0,1,3,2])\n    0\n    >>> arrange_ark_pairs([0,3,2,1])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef arrange_ark_pairs(ark_deck: List[int]) -> int:\n    \"\"\"Legend tells of a great Ark built by Noah to survive an immense flood that would cover the Earth.\n    To preserve the natural world, Noah invited animals to join him on the Ark, inviting them in pairs so\n    that each species could continue in the new world.\n\n    As the animals boarded the Ark, they were assigned places in a linear formation across the Ark's deck.\n    However, in the rush to board before the rain began, the animal pairs became separated across the 2n available spaces.\n    Each animal is known by a unique identifier, and the list of these identifiers as they are arranged on the Ark\n    is given by an integer array `arkDeck` where `arkDeck[i]` represents the animal occupying the ith space.\n    The pairs were meant to board in order, with the first pair being (0, 1), the second pair (2, 3), and so on,\n    up to the last pair being (2n - 2, 2n - 1).\n\n    Your task is to help Noah figure out the minimum number of exchanges necessary to reposition the animals so that\n    each pair is resting side by side. An exchange is the act of two animals, regardless of their species, standing\n    up from their places and switching spots on the deck.\n    >>> arrange_ark_pairs([0,1,3,2])\n    0\n    >>> arrange_ark_pairs([0,3,2,1])\n    1\n    \"\"\"", "function_name": "arrange_ark_pairs", "parameters": ["ark_deck"]}
{"id": 6, "difficulty_types": 1, "question": "def artemis_game(beta: int, theta: int, upperBound: int) -> float:\n    \"\"\"\n    Artemis, engages in a strategic computational challenge.\n\n    Initiating with a tally of zero, Artemis partakes in sequential computational operations with the aim to accumulate a numerical aggregate less than a predefined threshold, denoted by the variable theta. Throughout each computational cycle, Artemis is awarded a quantified increment, discretely and uniformly distributed, within the confines of [1, upperBound], where upperBound defines the maximum achievable singular increment and is a fixed integer value. It is of importance to note that each operation occurs autonomously and the potential outcomes are equitably probable.\n\n    The process of numerical acquisition is suspended when Artemis' aggregate meets or exceeds the marker theta.\n\n    The objective is to assess the likelihood that Artemis concludes these operations possessing a tally not surpassing beta.\n\n    Estimations deviating from the true likelihood by no more than a margin of 10^-5 are deemed satisfactory.\n\n    >>> artemis_game(10, 1, 10)\n    1.00000\n    Rationale: Artemis completes a solitary computational operation and ceases further actions.\n    >>> artemis_game(6, 1, 10)\n    0.60000\n    Rationale: Artemis finalizes a solitary computational operation and refrains from continuing.\n    In 6 out of the 10 equitable scenarios, Artemis' score is confined to or less than 6 points.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef artemis_game(beta: int, theta: int, upperBound: int) -> float:\n    \"\"\"\n    Artemis, engages in a strategic computational challenge.\n\n    Initiating with a tally of zero, Artemis partakes in sequential computational operations with the aim to accumulate a numerical aggregate less than a predefined threshold, denoted by the variable theta. Throughout each computational cycle, Artemis is awarded a quantified increment, discretely and uniformly distributed, within the confines of [1, upperBound], where upperBound defines the maximum achievable singular increment and is a fixed integer value. It is of importance to note that each operation occurs autonomously and the potential outcomes are equitably probable.\n\n    The process of numerical acquisition is suspended when Artemis' aggregate meets or exceeds the marker theta.\n\n    The objective is to assess the likelihood that Artemis concludes these operations possessing a tally not surpassing beta.\n\n    Estimations deviating from the true likelihood by no more than a margin of 10^-5 are deemed satisfactory.\n\n    >>> artemis_game(10, 1, 10)\n    1.00000\n    Rationale: Artemis completes a solitary computational operation and ceases further actions.\n    >>> artemis_game(6, 1, 10)\n    0.60000\n    Rationale: Artemis finalizes a solitary computational operation and refrains from continuing.\n    In 6 out of the 10 equitable scenarios, Artemis' score is confined to or less than 6 points.\n    \"\"\"", "function_name": "artemis_game", "parameters": ["beta", "theta", "upperBound"]}
{"id": 7, "difficulty_types": 1, "question": "from typing import List\n\nclass UnionFind(object):\n    def __init__(self, names):\n        self.parent = {}\n        for name in names:\n            self.parent[name] = name\n\n    def union(self, a, b):\n        if a not in self.parent:\n            self.parent[a] = a\n        if b not in self.parent:\n            self.parent[b] = b\n        root_a = self.find_root(a)\n        root_b = self.find_root(b)\n        if root_a < root_b:\n            self.parent[root_b] = root_a\n        else:\n            self.parent[root_a] = root_b\n\n    def find_root(self, node):\n        while node != self.parent[node]:\n            self.parent[node] = self.parent[self.parent[node]]\n            node = self.parent[node]\n        return node\n\ndef popular_names(names: List[str], synonyms: List[str]) -> List[str]:\n    \"\"\"\n    Each year, the national statistics agency releases a list of the 10,000 most commonly chosen names for new babies, along with the frequency of each name's use. While variations in spelling can make certain names seem different, they may indeed refer to the same moniker. For instance, \"Aiden\" and \"Aidan\" are treated as separate entries in the statistics, even though they actually stem from the same name.\n\n    Given two datasets - one featuring names and their popularity, the other containing pairs of names deemed to be versions of the same underlying name - we wish to devise a method to effectively compute and present the cumulative frequency of each distinct name. This requires that we account for the fact that name equivalency is both transitive and symmetrical. This means that if \"Aiden\" is equivalent to \"Aidan\" and \"Aidan\" is deemed identical to \"Ayden\" then \"Aiden\" and \"Ayden\" must also be considered the same.\n\n    In the resulting list, choose the lexicographically smallest name as the representative for the true name.\n\n    In developing this procedure, we must ensure a systematic approach that can handle the numerous relations between equivalent names and their different spellings. By accounting for these equivalences, a name's total frequency could potentially be much different than what's indicated in the raw newborn name statistics. Thus, this method should more accurately reflect the true popularity of distinct names.\n\n    >>> popular_names([\"Aiden(10)\",\"Aidan(5)\",\"Alex(20)\",\"Lex(2)\",\"Alexander(30)\"], [\"(Aidan,Aiden)\",\"(Aiden,Ayden)\",\"(Alex,Lex)\",\"(Alex,Alexander)\"])\n    [\"Aiden(15)\",\"Alex(52)\"]\n    >>> popular_names([\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Christopher(19)\"], [\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\",\"(Chris,Christopher)\"])\n    [\"John(27)\",\"Chris(36)\"]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\nclass UnionFind(object):\n    def __init__(self, names):\n        self.parent = {}\n        for name in names:\n            self.parent[name] = name\n\n    def union(self, a, b):\n        if a not in self.parent:\n            self.parent[a] = a\n        if b not in self.parent:\n            self.parent[b] = b\n        root_a = self.find_root(a)\n        root_b = self.find_root(b)\n        if root_a < root_b:\n            self.parent[root_b] = root_a\n        else:\n            self.parent[root_a] = root_b\n\n    def find_root(self, node):\n        while node != self.parent[node]:\n            self.parent[node] = self.parent[self.parent[node]]\n            node = self.parent[node]\n        return node\n\ndef popular_names(names: List[str], synonyms: List[str]) -> List[str]:\n    \"\"\"\n    Each year, the national statistics agency releases a list of the 10,000 most commonly chosen names for new babies, along with the frequency of each name's use. While variations in spelling can make certain names seem different, they may indeed refer to the same moniker. For instance, \"Aiden\" and \"Aidan\" are treated as separate entries in the statistics, even though they actually stem from the same name.\n\n    Given two datasets - one featuring names and their popularity, the other containing pairs of names deemed to be versions of the same underlying name - we wish to devise a method to effectively compute and present the cumulative frequency of each distinct name. This requires that we account for the fact that name equivalency is both transitive and symmetrical. This means that if \"Aiden\" is equivalent to \"Aidan\" and \"Aidan\" is deemed identical to \"Ayden\" then \"Aiden\" and \"Ayden\" must also be considered the same.\n\n    In the resulting list, choose the lexicographically smallest name as the representative for the true name.\n\n    In developing this procedure, we must ensure a systematic approach that can handle the numerous relations between equivalent names and their different spellings. By accounting for these equivalences, a name's total frequency could potentially be much different than what's indicated in the raw newborn name statistics. Thus, this method should more accurately reflect the true popularity of distinct names.\n\n    >>> popular_names([\"Aiden(10)\",\"Aidan(5)\",\"Alex(20)\",\"Lex(2)\",\"Alexander(30)\"], [\"(Aidan,Aiden)\",\"(Aiden,Ayden)\",\"(Alex,Lex)\",\"(Alex,Alexander)\"])\n    [\"Aiden(15)\",\"Alex(52)\"]\n    >>> popular_names([\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Christopher(19)\"], [\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\",\"(Chris,Christopher)\"])\n    [\"John(27)\",\"Chris(36)\"]\n    \"\"\"", "function_name": "popular_names", "parameters": ["names", "synonyms"]}
{"id": 8, "difficulty_types": 1, "question": "from typing import List\n\ndef bridge_beams(shorter: int, longer: int, k: int) -> List[int]:\n    \"\"\"\n    The task at hand is both a practical and mathematical challenge, as constructing a bridge requires thorough understanding of engineering principles and creative problem-solving skills. The small stream represents a physical obstacle that needs to be overcome by establishing a steady connection from one side to the other. Metal beams are chosen for their durability and strength, essential for ensuring the longevity and safety of the bridge.\n\n    With two distinct types of beams, the \"shorter\" and the \"longer,\" your solution must accommodate a variety of circumstances. The shorter beams, while potentially more manageable due to their shorter length, might only be appropriate for narrow sections of the stream or for supporting lighter loads. On the other hand, the longer beams, offering a greater span, might be used to cover broader gaps or to bear more weight, but could also require additional support structures to maintain the necessary stability.\n\n    The project requires the precise integration of k beams. Your task is to develop a strategy to establish all potential bridge spans.\n\n    These spans should be organized from the shortest to the longest.\n\n    >>> bridge_beams(1,2,3)\n    [3, 4, 5, 6]\n    Explanation: By using the shorter beam three times, you create a span of 3; mixing two shorter beams with one longer beam results in a span of 4. Continue with this sequence to acquire the exhaustive list of spans.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef bridge_beams(shorter: int, longer: int, k: int) -> List[int]:\n    \"\"\"\n    The task at hand is both a practical and mathematical challenge, as constructing a bridge requires thorough understanding of engineering principles and creative problem-solving skills. The small stream represents a physical obstacle that needs to be overcome by establishing a steady connection from one side to the other. Metal beams are chosen for their durability and strength, essential for ensuring the longevity and safety of the bridge.\n\n    With two distinct types of beams, the \"shorter\" and the \"longer,\" your solution must accommodate a variety of circumstances. The shorter beams, while potentially more manageable due to their shorter length, might only be appropriate for narrow sections of the stream or for supporting lighter loads. On the other hand, the longer beams, offering a greater span, might be used to cover broader gaps or to bear more weight, but could also require additional support structures to maintain the necessary stability.\n\n    The project requires the precise integration of k beams. Your task is to develop a strategy to establish all potential bridge spans.\n\n    These spans should be organized from the shortest to the longest.\n\n    >>> bridge_beams(1,2,3)\n    [3, 4, 5, 6]\n    Explanation: By using the shorter beam three times, you create a span of 3; mixing two shorter beams with one longer beam results in a span of 4. Continue with this sequence to acquire the exhaustive list of spans.\n    \"\"\"", "function_name": "bridge_beams", "parameters": ["shorter", "longer", "k"]}
{"id": 9, "difficulty_types": 1, "question": "from typing import List\n\ndef pokemon(pokemons: List[List[int]], balls: List[List[int]], r: int)->int:\n    \"\"\"In the Pokémon world, Professor Oak invites Ash to participate in a Pokémon-catching drill. A vast field is dotted with many Pokémon, and each Pokémon's information is recorded as [xi, yi, ri], with (xi, yi) being their Global Positioning System (GPS) coordinates and ri as their catch radius. Ash has a set of Master Balls, each with a fixed catch radius R, and the coordinates of each Master Ball are recorded as [xj, yj] in the array balls[j]. The rules for catching Pokémon with Master Balls in this drill are as follows:\n        If any part of a Pokémon, including its edges, is inside or on the border of a Master Ball, then it is considered successfully caught.\n        If a Pokémon is simultaneously caught by multiple Master Balls, it only counts as one successful catch.\n        Please help Ash to calculate how many Pokémon he has successfully caught in total.\n    Note:\n        The input data guarantees that no two Pokémon have the same GPS coordinates; however, their catch radiuses may overlap.\n    >>> pokemon([[1,3,2],[4,3,1],[7,1,2]], [[1,0],[3,3]], 4)\n    2\n    >>> pokemon([[3,3,1],[3,2,1]], [[4,3]], 2)\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef pokemon(pokemons: List[List[int]], balls: List[List[int]], r: int)->int:\n    \"\"\"In the Pokémon world, Professor Oak invites Ash to participate in a Pokémon-catching drill. A vast field is dotted with many Pokémon, and each Pokémon's information is recorded as [xi, yi, ri], with (xi, yi) being their Global Positioning System (GPS) coordinates and ri as their catch radius. Ash has a set of Master Balls, each with a fixed catch radius R, and the coordinates of each Master Ball are recorded as [xj, yj] in the array balls[j]. The rules for catching Pokémon with Master Balls in this drill are as follows:\n        If any part of a Pokémon, including its edges, is inside or on the border of a Master Ball, then it is considered successfully caught.\n        If a Pokémon is simultaneously caught by multiple Master Balls, it only counts as one successful catch.\n        Please help Ash to calculate how many Pokémon he has successfully caught in total.\n    Note:\n        The input data guarantees that no two Pokémon have the same GPS coordinates; however, their catch radiuses may overlap.\n    >>> pokemon([[1,3,2],[4,3,1],[7,1,2]], [[1,0],[3,3]], 4)\n    2\n    >>> pokemon([[3,3,1],[3,2,1]], [[4,3]], 2)\n    1\n    \"\"\"", "function_name": "pokemon", "parameters": ["pokemons", "balls", "r"]}
{"id": 10, "difficulty_types": 1, "question": "from typing import List\n\ndef shingen_impact_explore(nums: List[int]) -> int:\n    \"\"\"In a game called Shingen Impact, an explorer finds a series of ancient barriers in an undeveloped region\n    named Vateyt. These barriers are numbered from 0 to N-1. Each barrier conceals either a Healing Stele, \n    a Cursed Trap, or a neutral passage with nothing within:\n\n    - Healing Stele: Upon contact, it can restore vitality and elemental energy;\n    - Cursed Trap: Approaching it will incur a curse, consuming a certain amount of life;\n    - Neutral Passage: It will not impact the explorer in any way.\n\n    The effects of each barrier on the numeric value are recorded in the array 'nums'. The explorer must dispel the\n    influence of these barriers one by one to further explore new areas and uncover hidden secrets. Initially, the \n    explorer's life is at 1 (with no upper limit) and the plan was to explore each one according to the arrangement\n    order of the barriers. However, it was quickly discovered that heading directly into adventure might result in \n    life depletion. Thus, rearrangement of the exploration sequence is required, strategically placing those Cursed Traps\n    toward the end.\n\n    Therefore, the explorer needs to strategize. The explorer aims to minimally adjust the sequence order, ensuring his life\n    remains positive throughout the process. If there is no possible way to arrange the sequence of barriers to maintain \n    positive life, then the explorer must seek help from the deities and return a result of -1 (indicating the task is \n    unachievable).\n    >>> shingen_impact_explore([-300, 500, 0, -400, 0])\n    -1\n    >>> shingen_impact_explore([110,130,110,-250,-70,-110,-50,-50,90,150])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef shingen_impact_explore(nums: List[int]) -> int:\n    \"\"\"In a game called Shingen Impact, an explorer finds a series of ancient barriers in an undeveloped region\n    named Vateyt. These barriers are numbered from 0 to N-1. Each barrier conceals either a Healing Stele, \n    a Cursed Trap, or a neutral passage with nothing within:\n\n    - Healing Stele: Upon contact, it can restore vitality and elemental energy;\n    - Cursed Trap: Approaching it will incur a curse, consuming a certain amount of life;\n    - Neutral Passage: It will not impact the explorer in any way.\n\n    The effects of each barrier on the numeric value are recorded in the array 'nums'. The explorer must dispel the\n    influence of these barriers one by one to further explore new areas and uncover hidden secrets. Initially, the \n    explorer's life is at 1 (with no upper limit) and the plan was to explore each one according to the arrangement\n    order of the barriers. However, it was quickly discovered that heading directly into adventure might result in \n    life depletion. Thus, rearrangement of the exploration sequence is required, strategically placing those Cursed Traps\n    toward the end.\n\n    Therefore, the explorer needs to strategize. The explorer aims to minimally adjust the sequence order, ensuring his life\n    remains positive throughout the process. If there is no possible way to arrange the sequence of barriers to maintain \n    positive life, then the explorer must seek help from the deities and return a result of -1 (indicating the task is \n    unachievable).\n    >>> shingen_impact_explore([-300, 500, 0, -400, 0])\n    -1\n    >>> shingen_impact_explore([110,130,110,-250,-70,-110,-50,-50,90,150])\n    1\n    \"\"\"", "function_name": "shingen_impact_explore", "parameters": ["nums"]}
{"id": 11, "difficulty_types": 1, "question": "from typing import List\n\ndef can_square(bucket_list: List[int]) -> str:\n    \"\"\" Given a bucket_list with each entry as the number of squares in the bucket, determin if we can build a square using all the given squares. Output \"YES\" if we can, otherwise \"No\".\n    >>> can_square([14, 2])\n    YES\n    >>> can_square([1, 2, 3, 4, 5, 6, 7])\n    NO\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef can_square(bucket_list: List[int]) -> str:\n    \"\"\" Given a bucket_list with each entry as the number of squares in the bucket, determin if we can build a square using all the given squares. Output \"YES\" if we can, otherwise \"No\".\n    >>> can_square([14, 2])\n    YES\n    >>> can_square([1, 2, 3, 4, 5, 6, 7])\n    NO\n    \"\"\"", "function_name": "can_square", "parameters": ["bucket_list"]}
{"id": 12, "difficulty_types": 1, "question": "from typing import List\n\ndef find_champion(grid: List[List[int]]) -> int:\n    \"\"\"\n    In a competition with 'n' teams numbered from 0 to n - 1, you have a 2D boolean matrix 'grid' of size n x n.\n    For all pairs of teams 'i' and 'j' where 0 <= i, j <= n - 1 and i != j: if grid[i][j] == 1, team 'i' is stronger than team 'j'; otherwise, team 'j' is stronger.\n    A team will be the champion if no other team is stronger than it.\n    Return the team that will be the champion.\n    >>>find_champion([[0,1],[0,0]])\n    0\n    >>>find_champion([[0,0,1],[1,0,1],[0,0,0]])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_champion(grid: List[List[int]]) -> int:\n    \"\"\"\n    In a competition with 'n' teams numbered from 0 to n - 1, you have a 2D boolean matrix 'grid' of size n x n.\n    For all pairs of teams 'i' and 'j' where 0 <= i, j <= n - 1 and i != j: if grid[i][j] == 1, team 'i' is stronger than team 'j'; otherwise, team 'j' is stronger.\n    A team will be the champion if no other team is stronger than it.\n    Return the team that will be the champion.\n    >>>find_champion([[0,1],[0,0]])\n    0\n    >>>find_champion([[0,0,1],[1,0,1],[0,0,0]])\n    1\n    \"\"\"", "function_name": "find_champion", "parameters": ["grid"]}
{"id": 13, "difficulty_types": 1, "question": "from typing import List\n\ndef get_highest_occurrence_count(number_list: List[int]) -> int:\n    \"\"\"\n    I was recently talking with my friend John who works as a data analyst.\n    He was telling me about some of the common tasks he has to do with the data sets he works with.\n    John mentioned he often needs to write little functions to calculate these frequencies. Last week, he was working with a data set of numbers and needed to find the total frequency of the number(s) that appear most often.\n    He asked if I could help him turn this task into a simple function. Here is a concise description of what it needs to do:\n\n    Given an array `nums` of positive integers, return the total frequency of the most frequent element(s) in the array `nums`.\n    The frequency of an element is the number of times it appears in the array.\n    >>>get_highest_occurrence_count([2,2,3,3])\n    4\n    >>>get_highest_occurrence_count([4,3,2,1])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_highest_occurrence_count(number_list: List[int]) -> int:\n    \"\"\"\n    I was recently talking with my friend John who works as a data analyst.\n    He was telling me about some of the common tasks he has to do with the data sets he works with.\n    John mentioned he often needs to write little functions to calculate these frequencies. Last week, he was working with a data set of numbers and needed to find the total frequency of the number(s) that appear most often.\n    He asked if I could help him turn this task into a simple function. Here is a concise description of what it needs to do:\n\n    Given an array `nums` of positive integers, return the total frequency of the most frequent element(s) in the array `nums`.\n    The frequency of an element is the number of times it appears in the array.\n    >>>get_highest_occurrence_count([2,2,3,3])\n    4\n    >>>get_highest_occurrence_count([4,3,2,1])\n    4\n    \"\"\"", "function_name": "get_highest_occurrence_count", "parameters": ["number_list"]}
{"id": 14, "difficulty_types": 1, "question": "from typing import List\n\ndef get_max_diagonal_area(dimensions: List[List[int]]) -> int:\n    \"\"\"\n    You were given a 2D array of integers called dimensions representing the lengths and widths of different rectangles. For each index i (where 0 <= i < dimensions.length), dimensions[i][0] is the length of rectangle i and dimensions[i][1] is the width.\n    You needed to find the area of the rectangle with the longest diagonal.\n    If there were multiple rectangles with the same longest diagonal length, he needed to return the area of the rectangle with the largest area.\n    So in summary, given a 2D array of rectangle dimensions, the problem is asking:\n\n    Return the area of the rectangle with the longest diagonal. If there are multiple rectangles with the same max diagonal length, return the one with the largest area.\n    >>>get_max_diagonal_area([[1,2],[3,4]])\n    12\n    >>>get_max_diagonal_area([[10,8],[7,6]])\n    80\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_max_diagonal_area(dimensions: List[List[int]]) -> int:\n    \"\"\"\n    You were given a 2D array of integers called dimensions representing the lengths and widths of different rectangles. For each index i (where 0 <= i < dimensions.length), dimensions[i][0] is the length of rectangle i and dimensions[i][1] is the width.\n    You needed to find the area of the rectangle with the longest diagonal.\n    If there were multiple rectangles with the same longest diagonal length, he needed to return the area of the rectangle with the largest area.\n    So in summary, given a 2D array of rectangle dimensions, the problem is asking:\n\n    Return the area of the rectangle with the longest diagonal. If there are multiple rectangles with the same max diagonal length, return the one with the largest area.\n    >>>get_max_diagonal_area([[1,2],[3,4]])\n    12\n    >>>get_max_diagonal_area([[10,8],[7,6]])\n    80\n    \"\"\"", "function_name": "get_max_diagonal_area", "parameters": ["dimensions"]}
{"id": 15, "difficulty_types": 1, "question": "from typing import List\n\ndef find_smallest_missing_integer(nums: List[int]) -> int:\n    \"\"\"\n    You are given an integer array nums indexed from 0.\n\n    A prefix nums[0..i] is called an ordered prefix if for every 1 <= j <= i, nums[j] equals nums[j - 1] + 1. Note that a prefix with only nums[0] is considered an ordered prefix.\n\n    Return the smallest integer x such that x is greater than or equal to the sum of the longest ordered prefix of nums.\n\n    Note that x cannot already exist in the array nums.\n    >>>find_smallest_missing_integer([1,2,3,4,5])\n    15\n    >>>find_smallest_missing_integer([6,1])\n    7\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_smallest_missing_integer(nums: List[int]) -> int:\n    \"\"\"\n    You are given an integer array nums indexed from 0.\n\n    A prefix nums[0..i] is called an ordered prefix if for every 1 <= j <= i, nums[j] equals nums[j - 1] + 1. Note that a prefix with only nums[0] is considered an ordered prefix.\n\n    Return the smallest integer x such that x is greater than or equal to the sum of the longest ordered prefix of nums.\n\n    Note that x cannot already exist in the array nums.\n    >>>find_smallest_missing_integer([1,2,3,4,5])\n    15\n    >>>find_smallest_missing_integer([6,1])\n    7\n    \"\"\"", "function_name": "find_smallest_missing_integer", "parameters": ["nums"]}
{"id": 16, "difficulty_types": 1, "question": "def find_calling_steps(ring: str, key: str) -> int:\n    \"\"\"Baba is the only country on the planet Padamiya. This country has absolute political power, is rich and powerful. Their forward King Abanov is the best generation of leaders in history, and has promoted the Baba country to unprecedented prosperity. But something happened recently that made him very distressed, because fewer and fewer people can find their destiny in this life.\n\n    There is a romantic legend in this ancient and mysterious country: the local telephone route consists of an unfixed rotation of a string of characters. There is a button in the center of the route. Only by spelling out the specific keyword in the fewest possible steps can you navigate the route. This will allow you to successfully contact the person destined for you in this life.\n    Here's how the phone dial is used: Initially, the first character of the ring is aligned with the 12:00 direction. Rotate the ring clockwise or counterclockwise to align the key character key[i] with the 12:00 direction. Then, click the center button. In this way, the keyword key[i] is considered to be correctly inputted. Each rotation of the dial to a new position and each click of the center button are counted as one step.\n\n    Can you provide the key words in the smallest steps that spell out all the characters to help local residents find their loved ones?\n\n    Among them, the ring and key only contain lowercase English letters. At the same time, the key can definitely be written through the ring.\n\n    1 <= ring.length, key.length <= 100\n    ring and key consist of only lower case English letters.\n    It is guaranteed that key could always be spelled by rotating ring.\n\n    >>> find_calling_steps(\"godding\", \"gd\")\n    4\n    >>> find_calling_steps(\"godding\", \"godding\")\n    13\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef find_calling_steps(ring: str, key: str) -> int:\n    \"\"\"Baba is the only country on the planet Padamiya. This country has absolute political power, is rich and powerful. Their forward King Abanov is the best generation of leaders in history, and has promoted the Baba country to unprecedented prosperity. But something happened recently that made him very distressed, because fewer and fewer people can find their destiny in this life.\n\n    There is a romantic legend in this ancient and mysterious country: the local telephone route consists of an unfixed rotation of a string of characters. There is a button in the center of the route. Only by spelling out the specific keyword in the fewest possible steps can you navigate the route. This will allow you to successfully contact the person destined for you in this life.\n    Here's how the phone dial is used: Initially, the first character of the ring is aligned with the 12:00 direction. Rotate the ring clockwise or counterclockwise to align the key character key[i] with the 12:00 direction. Then, click the center button. In this way, the keyword key[i] is considered to be correctly inputted. Each rotation of the dial to a new position and each click of the center button are counted as one step.\n\n    Can you provide the key words in the smallest steps that spell out all the characters to help local residents find their loved ones?\n\n    Among them, the ring and key only contain lowercase English letters. At the same time, the key can definitely be written through the ring.\n\n    1 <= ring.length, key.length <= 100\n    ring and key consist of only lower case English letters.\n    It is guaranteed that key could always be spelled by rotating ring.\n\n    >>> find_calling_steps(\"godding\", \"gd\")\n    4\n    >>> find_calling_steps(\"godding\", \"godding\")\n    13\n    \"\"\"", "function_name": "find_calling_steps", "parameters": ["ring", "key"]}
{"id": 17, "difficulty_types": 1, "question": "def get_palindromic_string(string1: str, string2: str) -> str:\n    \"\"\"If the reverse of a string is the same as the original string, the string is called a palindrome string.  \n    You are given two strings, please find a substring in the longer string that can be concatenated after the shorter string to form a palindrome string. \n    If it can be found, return the concatenated palindromic string. Otherwise, return None. \n    Note that if more than one substring matches, you need to return the longest one.\n    >>> get_palindromic_string(\"ab\", \"deba\")\n    \"abeba\"\n    >>> get_palindromic_string(\"uvw\", \"v\")\n    \"vv\"\n    >>> get_palindromic_string(\"abc\", \"abcd\")\n    \"\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_palindromic_string(string1: str, string2: str) -> str:\n    \"\"\"If the reverse of a string is the same as the original string, the string is called a palindrome string.  \n    You are given two strings, please find a substring in the longer string that can be concatenated after the shorter string to form a palindrome string. \n    If it can be found, return the concatenated palindromic string. Otherwise, return None. \n    Note that if more than one substring matches, you need to return the longest one.\n    >>> get_palindromic_string(\"ab\", \"deba\")\n    \"abeba\"\n    >>> get_palindromic_string(\"uvw\", \"v\")\n    \"vv\"\n    >>> get_palindromic_string(\"abc\", \"abcd\")\n    \"\"\n    \"\"\"", "function_name": "get_palindromic_string", "parameters": ["string1", "string2"]}
{"id": 18, "difficulty_types": 1, "question": "from typing import List\n\ndef mahjong_practice(tiles:List[int])->int:\n    \"\"\"The game of mahjong requires four players, 144 tiles and two dice to roll. The goal of mahjong is similar to poker, in that the aim is to make matching sets and pairs. A set is three or four identical tiles (e.g. 111, 1111) or three consecutive tiles (e.g. 123), and a pair is two of the same tiles (often called ‘eyes’). To win mahjong a player must form four sets and one pair. A complete mahjong set of 144 tiles includes three suits, each suit contains four sets of tiles numbered one to nine. As mentioned, the goal is to create four sets of three tiles and a pair. The three types of sets a player can make are:\n    Pong! – a set of three identical tiles\n    Gang! – a set of four identical tiles\n    Chi! – a sequence of three consecutive tiles of the same suit \n    Now, for practice, regardless of the suits, just look at the numbers. Given a list of tiles, calculate the maximum number of groups that can form \"Pong\" or \"Chi\".\n    >>> mahjong_practice([2,2,2,3,4])\n    1\n    >>> mahjong_practice([2,2,2,3,4,1,3])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef mahjong_practice(tiles:List[int])->int:\n    \"\"\"The game of mahjong requires four players, 144 tiles and two dice to roll. The goal of mahjong is similar to poker, in that the aim is to make matching sets and pairs. A set is three or four identical tiles (e.g. 111, 1111) or three consecutive tiles (e.g. 123), and a pair is two of the same tiles (often called ‘eyes’). To win mahjong a player must form four sets and one pair. A complete mahjong set of 144 tiles includes three suits, each suit contains four sets of tiles numbered one to nine. As mentioned, the goal is to create four sets of three tiles and a pair. The three types of sets a player can make are:\n    Pong! – a set of three identical tiles\n    Gang! – a set of four identical tiles\n    Chi! – a sequence of three consecutive tiles of the same suit \n    Now, for practice, regardless of the suits, just look at the numbers. Given a list of tiles, calculate the maximum number of groups that can form \"Pong\" or \"Chi\".\n    >>> mahjong_practice([2,2,2,3,4])\n    1\n    >>> mahjong_practice([2,2,2,3,4,1,3])\n    2\n    \"\"\"", "function_name": "mahjong_practice", "parameters": ["tiles"]}
{"id": 19, "difficulty_types": 1, "question": "from typing import List\n\n\ndef find_duplicate(nums: List[int]) -> int:\n    \"\"\"Floyd's cycle detection algorithm, also known as the \"tortoise and hare algorithm,\" is used to detect whether a linked list contains a cycle or loop.\n\n    In this algorithm, two pointers are used: the slow pointer (tortoise) and the fast pointer (hare). The slow pointer moves one step at a time, while the fast pointer moves two steps at a time. If there is a cycle in the linked list, eventually the fast pointer will catch up to the slow pointer and they will meet at a node in the cycle.\n\n    To detect the cycle, the algorithm starts by initializing both pointers to the head of the linked list. Then, the pointers move through the linked list as described above. If the fast pointer reaches the end of the list (i.e. it encounters a null pointer), then there is no cycle in the list. However, if the fast pointer catches up to the slow pointer, then there is a cycle in the list.\n\n    Once a cycle is detected, the algorithm can also find the starting point of the cycle. After the two pointers meet, the slow pointer is reset to the head of the list, and both pointers move one step at a time until they meet again. The node where they meet is the starting point of the cycle.\n\n    Floyd's cycle detection algorithm has a time complexity of O(n), where n is the length of the linked list. It is named after Robert W. Floyd, who described the algorithm in 1967.\n\n    Based on the above background, please find the repeated number in the array 'nums' of length n+1. The numbers in this array are all in the range [1, n].\n\n    1 <= n <= 10^5\n    nums.length == n + 1\n    1 <= nums[i] <= n\n    All the integers in nums appear only once except for precisely one integer which appears two or more times.\n\n    >>> find_duplicate([1,3,4,2,2])\n    2\n    >>> find_duplicate([3,1,3,4,2])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef find_duplicate(nums: List[int]) -> int:\n    \"\"\"Floyd's cycle detection algorithm, also known as the \"tortoise and hare algorithm,\" is used to detect whether a linked list contains a cycle or loop.\n\n    In this algorithm, two pointers are used: the slow pointer (tortoise) and the fast pointer (hare). The slow pointer moves one step at a time, while the fast pointer moves two steps at a time. If there is a cycle in the linked list, eventually the fast pointer will catch up to the slow pointer and they will meet at a node in the cycle.\n\n    To detect the cycle, the algorithm starts by initializing both pointers to the head of the linked list. Then, the pointers move through the linked list as described above. If the fast pointer reaches the end of the list (i.e. it encounters a null pointer), then there is no cycle in the list. However, if the fast pointer catches up to the slow pointer, then there is a cycle in the list.\n\n    Once a cycle is detected, the algorithm can also find the starting point of the cycle. After the two pointers meet, the slow pointer is reset to the head of the list, and both pointers move one step at a time until they meet again. The node where they meet is the starting point of the cycle.\n\n    Floyd's cycle detection algorithm has a time complexity of O(n), where n is the length of the linked list. It is named after Robert W. Floyd, who described the algorithm in 1967.\n\n    Based on the above background, please find the repeated number in the array 'nums' of length n+1. The numbers in this array are all in the range [1, n].\n\n    1 <= n <= 10^5\n    nums.length == n + 1\n    1 <= nums[i] <= n\n    All the integers in nums appear only once except for precisely one integer which appears two or more times.\n\n    >>> find_duplicate([1,3,4,2,2])\n    2\n    >>> find_duplicate([3,1,3,4,2])\n    3\n    \"\"\"", "function_name": "find_duplicate", "parameters": ["nums"]}
{"id": 20, "difficulty_types": 1, "question": "from typing import List\n\n\ndef majority_vote(nums: List[int]) -> List[int]:\n    \"\"\"The core idea of Majority voting method is consumption. First, we consider the basic Majority voting problem, such as finding a number that appears more than 1/2 of the total number of times in a set of number sequences (and assuming that this number always exists). We can directly use proof by contradiction to prove that there may be only one such number. The core idea of Majority voting algorithm is based on this fact:\n\n    Select two different numbers from the sequence and delete them every time. Finally, one number or several identical numbers are left, which is the element that appears more than half of the total. Assume that the elements that exist half of the maximum number of times in the current sequence are x, and the total length of the sequence is n. Then we can divide the array into two parts, one part is the same k elements x, and the other part is (n-k)/2 pairs of different elements. At this time, we assume that there is another element y with a frequency greater than half of the total, Then y should satisfy y>n/2 at this time, but according to our previous reasoning y should satisfy y<=(n-k)/2, which is contradictory.\n\n    Please follow the principle of Majority voting to find elements that appear more than n/3 times in a sequence of size n.\n\n    1 <= nums.length <= 5 * 10^4\n    -10^9 <= nums[i] <= 10^9\n\n    >>> majority_vote([3,2,3])\n    [3]\n    >>> majority_vote([1])\n    [1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef majority_vote(nums: List[int]) -> List[int]:\n    \"\"\"The core idea of Majority voting method is consumption. First, we consider the basic Majority voting problem, such as finding a number that appears more than 1/2 of the total number of times in a set of number sequences (and assuming that this number always exists). We can directly use proof by contradiction to prove that there may be only one such number. The core idea of Majority voting algorithm is based on this fact:\n\n    Select two different numbers from the sequence and delete them every time. Finally, one number or several identical numbers are left, which is the element that appears more than half of the total. Assume that the elements that exist half of the maximum number of times in the current sequence are x, and the total length of the sequence is n. Then we can divide the array into two parts, one part is the same k elements x, and the other part is (n-k)/2 pairs of different elements. At this time, we assume that there is another element y with a frequency greater than half of the total, Then y should satisfy y>n/2 at this time, but according to our previous reasoning y should satisfy y<=(n-k)/2, which is contradictory.\n\n    Please follow the principle of Majority voting to find elements that appear more than n/3 times in a sequence of size n.\n\n    1 <= nums.length <= 5 * 10^4\n    -10^9 <= nums[i] <= 10^9\n\n    >>> majority_vote([3,2,3])\n    [3]\n    >>> majority_vote([1])\n    [1]\n    \"\"\"", "function_name": "majority_vote", "parameters": ["nums"]}
{"id": 21, "difficulty_types": 2, "question": "from typing import List\n\n\ndef complete_combustion(numbers: List[int]) -> List[float]:\n    \"\"\"Input to this function is a list representing the number of elements C, H and O in a\n    compound CxHyOz (z is not equal to 0). When this compound undergoes complete combustion with O2,\n    it produces only CO2 and H2O. The chemical equation is as follows:\n    CxHyOz + aO2 → bCO2 + cH2O\n    Please calculate a, b and c to balance the equation and ensure that the quantities of the three\n    elements are equal on both sides. The input list represents the quantities of C, H, and O in order.\n    Please return a list where the elements represent the quantities of O2, CO2 and H2O respectively.\n    >>> complete_combustion([1,2,1])\n    [1, 1, 1]\n    >>> complete_combustion([2,6,1])\n    [3, 2, 3]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef complete_combustion(numbers: List[int]) -> List[float]:\n    \"\"\"Input to this function is a list representing the number of elements C, H and O in a\n    compound CxHyOz (z is not equal to 0). When this compound undergoes complete combustion with O2,\n    it produces only CO2 and H2O. The chemical equation is as follows:\n    CxHyOz + aO2 → bCO2 + cH2O\n    Please calculate a, b and c to balance the equation and ensure that the quantities of the three\n    elements are equal on both sides. The input list represents the quantities of C, H, and O in order.\n    Please return a list where the elements represent the quantities of O2, CO2 and H2O respectively.\n    >>> complete_combustion([1,2,1])\n    [1, 1, 1]\n    >>> complete_combustion([2,6,1])\n    [3, 2, 3]\n    \"\"\"", "function_name": "complete_combustion", "parameters": ["numbers"]}
{"id": 22, "difficulty_types": 2, "question": "from typing import List\n\ndef max_balance_factor(weights: List[int]) -> int:\n    \"\"\"Write a function to find the maximum balance factor of the given list 'weights'.\n    The maximum balance factor is the sum of a subset of 'weights' that can be removed to split\n    the remaining elements into two parts with equal sums. If no such balance factor exists, return 0.\n\n    Write a function to find the maximum balance factor of object w.\n    The maximum balance factor refers to the size of the sum that results from extracting\n    some or all elements from w, dividing them into two parts, and ensuring that the sums\n    of these two parts are equal. If such a maximum balance factor does not exist. return 0\n    >>> max_balance_factor([4, 2, 3, 9])\n    9\n    >>> max_balance_factor([7, 1, 9])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_balance_factor(weights: List[int]) -> int:\n    \"\"\"Write a function to find the maximum balance factor of the given list 'weights'.\n    The maximum balance factor is the sum of a subset of 'weights' that can be removed to split\n    the remaining elements into two parts with equal sums. If no such balance factor exists, return 0.\n\n    Write a function to find the maximum balance factor of object w.\n    The maximum balance factor refers to the size of the sum that results from extracting\n    some or all elements from w, dividing them into two parts, and ensuring that the sums\n    of these two parts are equal. If such a maximum balance factor does not exist. return 0\n    >>> max_balance_factor([4, 2, 3, 9])\n    9\n    >>> max_balance_factor([7, 1, 9])\n    0\n    \"\"\"", "function_name": "max_balance_factor", "parameters": ["weights"]}
{"id": 23, "difficulty_types": 2, "question": "def laser_arrangement(m):\n    \"\"\"A military restricted area, represented by a square matrix with side length m,\n    requires the installation of laser defense systems. These lasers can be emitted horizontally,\n    vertically, or diagonally at a 45-degree angle to both ends. However, mutually intersecting\n    lasers will destroy each other. How many arrangements are there to reasonably arrange the\n    lasers to ensure complete coverage of the entire area without mutual destruction?\n    >>> laser_arrangement(4)\n    2\n    >>> laser_arrangement(2)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef laser_arrangement(m):\n    \"\"\"A military restricted area, represented by a square matrix with side length m,\n    requires the installation of laser defense systems. These lasers can be emitted horizontally,\n    vertically, or diagonally at a 45-degree angle to both ends. However, mutually intersecting\n    lasers will destroy each other. How many arrangements are there to reasonably arrange the\n    lasers to ensure complete coverage of the entire area without mutual destruction?\n    >>> laser_arrangement(4)\n    2\n    >>> laser_arrangement(2)\n    0\n    \"\"\"", "function_name": "laser_arrangement", "parameters": ["m"]}
{"id": 24, "difficulty_types": 2, "question": "from typing import List\n\ndef dice_probability(num: int) -> List[float]:\n    \"\"\"There is a regular tetrahedral dice with numbers 1, 2, 3, 4, and the mass distribution is uniform.\n    If you roll n of these dice, please return the probabilities of all possible sums in ascending order using a list.\n    >>> dice_probabitliy(1)\n    [0.25, 0.25, 0.25, 0.25]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef dice_probability(num: int) -> List[float]:\n    \"\"\"There is a regular tetrahedral dice with numbers 1, 2, 3, 4, and the mass distribution is uniform.\n    If you roll n of these dice, please return the probabilities of all possible sums in ascending order using a list.\n    >>> dice_probabitliy(1)\n    [0.25, 0.25, 0.25, 0.25]\n    \"\"\"", "function_name": "dice_probability", "parameters": ["num"]}
{"id": 25, "difficulty_types": 2, "question": "from typing import List\n\ndef extract_times(water_map:List[List[str]]) -> int:\n    \"\"\"Given a water map which is a 2-D array representing underground water(\"1\") and soil(\"0\"), you are using a water pump\n    to extract water. Please calculate how many times do you need to turn on the pump. Note that if underground water is\n    interconnected, you only need to turn on the pump once. Connected underground water is formed by connecting adjacent lands\n    horizontally or vertically. You can assume that outside the grid is all surrounded by soil.\n    >>> extract_times([[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]])\n    3\n    >>> extract_times([[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"],[\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\"]])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef extract_times(water_map:List[List[str]]) -> int:\n    \"\"\"Given a water map which is a 2-D array representing underground water(\"1\") and soil(\"0\"), you are using a water pump\n    to extract water. Please calculate how many times do you need to turn on the pump. Note that if underground water is\n    interconnected, you only need to turn on the pump once. Connected underground water is formed by connecting adjacent lands\n    horizontally or vertically. You can assume that outside the grid is all surrounded by soil.\n    >>> extract_times([[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]])\n    3\n    >>> extract_times([[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"],[\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\"]])\n    2\n    \"\"\"", "function_name": "extract_times", "parameters": ["water_map"]}
{"id": 26, "difficulty_types": 2, "question": "def pod_probability(m: int) -> float:\n    \"\"\"\n    An interstellar transport vessel is equipped with precisely m individual passenger pods, each uniquely assigned to m traveling spacefarers based on their purchased tickets. As a result of a minor malfunction in the boarding protocol, the initial spacefarer misplaces their boarding pass upon entry and subsequently selects a pod through a randomized selection process. The subsequent spacefarers will:\n\n    - Proceed to their pre-designated pod if it remains unoccupied, and\n    - Resort to an arbitrary choice of any remaining available pods whenever they encounter their designated pod to be already taken.\n\n    Considering this scenario, devise a function capable of determining with what probability the final spacefarer will occupy their originally assigned pod.\n\n    >>> pod_probability(1)\n    1.00000\n    >>> pod_probability(2)\n    0.50000\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef pod_probability(m: int) -> float:\n    \"\"\"\n    An interstellar transport vessel is equipped with precisely m individual passenger pods, each uniquely assigned to m traveling spacefarers based on their purchased tickets. As a result of a minor malfunction in the boarding protocol, the initial spacefarer misplaces their boarding pass upon entry and subsequently selects a pod through a randomized selection process. The subsequent spacefarers will:\n\n    - Proceed to their pre-designated pod if it remains unoccupied, and\n    - Resort to an arbitrary choice of any remaining available pods whenever they encounter their designated pod to be already taken.\n\n    Considering this scenario, devise a function capable of determining with what probability the final spacefarer will occupy their originally assigned pod.\n\n    >>> pod_probability(1)\n    1.00000\n    >>> pod_probability(2)\n    0.50000\n    \"\"\"", "function_name": "pod_probability", "parameters": ["m"]}
{"id": 27, "difficulty_types": 2, "question": "def state_element(n: int) -> int:\n    \"\"\"\n    There is a sequence of x elements that are initially in a specific state. You first change the state of all the elements, then you change the state of every second element.\n\n    On the third iteration, you change the state of every third element (changing it from its current state to the opposite state). For the ith iteration, you change the state of every i-th element. For the nth iteration, you only change the state of the last element.\n\n    Return the number of elements that are in a specific state after x iterations.\n\n    >>> state_element(121)\n    11\n    >>> state_element(20)\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef state_element(n: int) -> int:\n    \"\"\"\n    There is a sequence of x elements that are initially in a specific state. You first change the state of all the elements, then you change the state of every second element.\n\n    On the third iteration, you change the state of every third element (changing it from its current state to the opposite state). For the ith iteration, you change the state of every i-th element. For the nth iteration, you only change the state of the last element.\n\n    Return the number of elements that are in a specific state after x iterations.\n\n    >>> state_element(121)\n    11\n    >>> state_element(20)\n    4\n    \"\"\"", "function_name": "state_element", "parameters": ["n"]}
{"id": 28, "difficulty_types": 2, "question": "from typing import List\n\ndef arrange_conference(windowsA: List[List[int]], windowsB: List[List[int]], conferenceTime: int) -> List[int]:\n    \"\"\"\n    Consider the time windows of availability for two separate parties, labeled as windowsA and windowsB, and the time span needed for a conference. Your task is to coordinate the earliest overlap in their schedules that can accommodate the conference length.\n\n    Should there be no compatible overlap allowing for the conference, the function should result in an empty list.\n\n    Each time window is structured as [opening, closing], composed of an opening time opening and a closing time closing, reflecting the period from opening to closing.\n\n    The input assures the integrity of the data: each party's time windows do not intersect amongst themselves. So for any pair of time windows [opening1, closing1] and [opening2, closing2] for the same party, it will be true that either opening1 > closing2 or opening2 > closing1.\n\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 8)\n    [60,68]\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 12)\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef arrange_conference(windowsA: List[List[int]], windowsB: List[List[int]], conferenceTime: int) -> List[int]:\n    \"\"\"\n    Consider the time windows of availability for two separate parties, labeled as windowsA and windowsB, and the time span needed for a conference. Your task is to coordinate the earliest overlap in their schedules that can accommodate the conference length.\n\n    Should there be no compatible overlap allowing for the conference, the function should result in an empty list.\n\n    Each time window is structured as [opening, closing], composed of an opening time opening and a closing time closing, reflecting the period from opening to closing.\n\n    The input assures the integrity of the data: each party's time windows do not intersect amongst themselves. So for any pair of time windows [opening1, closing1] and [opening2, closing2] for the same party, it will be true that either opening1 > closing2 or opening2 > closing1.\n\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 8)\n    [60,68]\n    >>> arrange_conference(windowsA = [[10,50],[60,120],[140,210]], windowsB = [[0,15],[60,70]], conferenceTime = 12)\n    []\n    \"\"\"", "function_name": "arrange_conference", "parameters": ["windowsA", "windowsB", "conferenceTime"]}
{"id": 29, "difficulty_types": 2, "question": "from typing import List\n\ndef top_records(entry: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Imagine a dataset containing multiple records of athletes with different identification numbers, where each record is marked as entry, such that entry[i] = [IDi, pointsi] signifies the points earned by athlete IDi in a particular event. Your job is to determine the average of the highest five point totals for every athlete.\n\n    The response should be structured as a list of tuples, summary, where summary[j] = [IDj, topFiveAveragej] matches the IDj of the athlete and their average of the five highest point totals. This list, summary, must be ordered by the athlete's ID in ascending sequence.\n\n    To derive the average of the top five point totals for each athlete, add together the points of their five best performances and then apply integer division by 5.\n\n    >>> top_records(entry = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]])\n    [[1,87],[2,88]]\n    >>> top_records(entry = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]])\n    [[1,100],[7,100]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef top_records(entry: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Imagine a dataset containing multiple records of athletes with different identification numbers, where each record is marked as entry, such that entry[i] = [IDi, pointsi] signifies the points earned by athlete IDi in a particular event. Your job is to determine the average of the highest five point totals for every athlete.\n\n    The response should be structured as a list of tuples, summary, where summary[j] = [IDj, topFiveAveragej] matches the IDj of the athlete and their average of the five highest point totals. This list, summary, must be ordered by the athlete's ID in ascending sequence.\n\n    To derive the average of the top five point totals for each athlete, add together the points of their five best performances and then apply integer division by 5.\n\n    >>> top_records(entry = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]])\n    [[1,87],[2,88]]\n    >>> top_records(entry = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]])\n    [[1,100],[7,100]]\n    \"\"\"", "function_name": "top_records", "parameters": ["entry"]}
{"id": 30, "difficulty_types": 2, "question": "def sum_perfect_integer(lower_bound: int, higher_bound: int, n: int):\n    \"\"\"You are given positive integers lower_bound, higher_bound, and n.\n\n    A number is perfect if it meets both of the following conditions:\n\n    - The count of odd digits in the number is equal to the count of even digits.\n    - The number is divisible by n.\n    Return the number of perfect integers in the range [lower_bound, higher_bound].\n    >>> sum_perfect_integer(4, 4, 1)\n    0\n    >>> sum_perfect_integer(1, 10, 1)\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef sum_perfect_integer(lower_bound: int, higher_bound: int, n: int):\n    \"\"\"You are given positive integers lower_bound, higher_bound, and n.\n\n    A number is perfect if it meets both of the following conditions:\n\n    - The count of odd digits in the number is equal to the count of even digits.\n    - The number is divisible by n.\n    Return the number of perfect integers in the range [lower_bound, higher_bound].\n    >>> sum_perfect_integer(4, 4, 1)\n    0\n    >>> sum_perfect_integer(1, 10, 1)\n    1\n    \"\"\"", "function_name": "sum_perfect_integer", "parameters": ["lower_bound", "higher_bound", "n"]}
{"id": 31, "difficulty_types": 2, "question": "from typing import List\n\ndef maximum_size_after_removal(nums1: List[int], nums2: List[int]):\n    \"\"\" You are given two memory quantities nums1 and nums2 whose subscripts start from 0, and their lengths are both even n.\n\nYou\t must delete n / 2 elements from nums1 and n / 2 elements from nums2. After deletion, you insert the remaining elements from nums1 and nums2 into the set s.\n\nReturns the maximum number of possible collections\n     >>>  maximum_size_after_removal([3,4], [1,2])\n     2\n     >>>  maximum_size_after_removal([1,2,1,2], [1,1,1,1])\n     2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef maximum_size_after_removal(nums1: List[int], nums2: List[int]):\n    \"\"\" You are given two memory quantities nums1 and nums2 whose subscripts start from 0, and their lengths are both even n.\n\nYou\t must delete n / 2 elements from nums1 and n / 2 elements from nums2. After deletion, you insert the remaining elements from nums1 and nums2 into the set s.\n\nReturns the maximum number of possible collections\n     >>>  maximum_size_after_removal([3,4], [1,2])\n     2\n     >>>  maximum_size_after_removal([1,2,1,2], [1,1,1,1])\n     2\n    \"\"\"", "function_name": "maximum_size_after_removal", "parameters": ["nums1", "nums2"]}
{"id": 32, "difficulty_types": 2, "question": "def get_maximum_special_substring(s: str) -> int:\n    \"\"\"Determine the length of the longest substring in a given string 's', which consists solely of a single lower English character and the entire substring appears at least three times in the string 's'.\nIf no such substring exists, return -1.\n    >>>get_maximum_special_substring(\"aaaa\")\n    2\n    >>>get_maximum_special_substring(\"aeebcccdd\")\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_maximum_special_substring(s: str) -> int:\n    \"\"\"Determine the length of the longest substring in a given string 's', which consists solely of a single lower English character and the entire substring appears at least three times in the string 's'.\nIf no such substring exists, return -1.\n    >>>get_maximum_special_substring(\"aaaa\")\n    2\n    >>>get_maximum_special_substring(\"aeebcccdd\")\n    1\n    \"\"\"", "function_name": "get_maximum_special_substring", "parameters": ["s"]}
{"id": 33, "difficulty_types": 2, "question": "from typing import List\n\ndef find_peak(mountain: List[int]) -> List[int]:\n    \"\"\"\n    You need to identify all the peaks in a given array named 'mountain'.\n    A peak is defined as any element that is strictly greater than its neighbors.\n    Keep in mind that the first and last elements of the array cannot be considered as peaks.\n    Return the indices (positions) of all the peaks in the array, in any order.\n    >>> find_peak([1,2,4])\n    []\n    >>> find_peak([9,2,4,7,3])\n    [3]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_peak(mountain: List[int]) -> List[int]:\n    \"\"\"\n    You need to identify all the peaks in a given array named 'mountain'.\n    A peak is defined as any element that is strictly greater than its neighbors.\n    Keep in mind that the first and last elements of the array cannot be considered as peaks.\n    Return the indices (positions) of all the peaks in the array, in any order.\n    >>> find_peak([1,2,4])\n    []\n    >>> find_peak([9,2,4,7,3])\n    [3]\n    \"\"\"", "function_name": "find_peak", "parameters": ["mountain"]}
{"id": 34, "difficulty_types": 2, "question": "from typing import List\n\ndef similar_matrix(mat: List[List[int]], k: int) -> bool:\n    \"\"\"\n    You have a matrix 'mat' sized m x n, starting with index 0.\n    Shift odd-numbered rows right and even-numbered rows left by 'k' positions.\n    Check if the final matrix is the same as the initial one.\n    Return True if they match, otherwise False.\n    >>>similar_matrix([[2,2]], 3)\n    True\n    >>>similar_matrix([[3,1,4,1],[1,4,3,1],[2,4,1,2]], 2)\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef similar_matrix(mat: List[List[int]], k: int) -> bool:\n    \"\"\"\n    You have a matrix 'mat' sized m x n, starting with index 0.\n    Shift odd-numbered rows right and even-numbered rows left by 'k' positions.\n    Check if the final matrix is the same as the initial one.\n    Return True if they match, otherwise False.\n    >>>similar_matrix([[2,2]], 3)\n    True\n    >>>similar_matrix([[3,1,4,1],[1,4,3,1],[2,4,1,2]], 2)\n    False\n    \"\"\"", "function_name": "similar_matrix", "parameters": ["mat", "k"]}
{"id": 35, "difficulty_types": 2, "question": "from typing import List\n\ndef find_k_or(nums: List[int], k: int) -> int:\n    \"\"\"\n    You have an array of integers named 'nums' and an integer 'k'.\n    The 'K-or' of nums is a non-negative integer defined by the following condition:\n    The i-th bit of K-or is 1 if and only if there are at least 'k' elements in 'nums' with their i-th bit as 1.\n    Return the K-or value of nums.\n    Note: For an integer 'x', the i-th bit value is 1 if (2^i AND x) == 2^i, where AND is the bitwise AND operator.\n    >>>find_k_or([8,11,9,7],1)\n    15\n    >>>find_k_or([2,12,1,11,4,5],6)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_k_or(nums: List[int], k: int) -> int:\n    \"\"\"\n    You have an array of integers named 'nums' and an integer 'k'.\n    The 'K-or' of nums is a non-negative integer defined by the following condition:\n    The i-th bit of K-or is 1 if and only if there are at least 'k' elements in 'nums' with their i-th bit as 1.\n    Return the K-or value of nums.\n    Note: For an integer 'x', the i-th bit value is 1 if (2^i AND x) == 2^i, where AND is the bitwise AND operator.\n    >>>find_k_or([8,11,9,7],1)\n    15\n    >>>find_k_or([2,12,1,11,4,5],6)\n    0\n    \"\"\"", "function_name": "find_k_or", "parameters": ["nums", "k"]}
{"id": 36, "difficulty_types": 2, "question": "from typing import List\n\ndef max_profit(prices: List[int]) -> int:\n    \"\"\"\n    Given an array, its i-th element represents the price per ton of water on the i-th day. You can store water in a reservoir, and your reservoir has a capacity of 5 tons. Design an algorithm to calculate the maximum profit you can achieve. You can perform up to 2 storage and release operations for buying and selling.\n    Note: You must release water before storing it.\n\n    >>> max_profit([3,3,5,0,0,3,1,4])\n    30\n    >>> max_profit([1,2,3,4,5])\n    20\n    >>> max_profit([7,6,4,3,1])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_profit(prices: List[int]) -> int:\n    \"\"\"\n    Given an array, its i-th element represents the price per ton of water on the i-th day. You can store water in a reservoir, and your reservoir has a capacity of 5 tons. Design an algorithm to calculate the maximum profit you can achieve. You can perform up to 2 storage and release operations for buying and selling.\n    Note: You must release water before storing it.\n\n    >>> max_profit([3,3,5,0,0,3,1,4])\n    30\n    >>> max_profit([1,2,3,4,5])\n    20\n    >>> max_profit([7,6,4,3,1])\n    0\n    \"\"\"", "function_name": "max_profit", "parameters": ["prices"]}
{"id": 37, "difficulty_types": 2, "question": "from typing import List\n\ndef winning_probability(numbers: List[int]) -> float:\n    \"\"\"In a raffle, lucky number is defined as containing only the factors 3, 5, 7, e.g. 15, 21. The system will generates a random set of numbers, \n    whoever picks the lucky number wins the prize. And no one knows the rules. Everyone picks numbers according to their preferences.\n    Everyone has their own lucky number. For Li, his lucky number is a number that contains 1, so in this raffle, Li will choose his lucky number first. \n    If there's no Li's lucky number in the set, he'll pick it at random.  \n    Can you help Li calculate the probability of winning the prize? \n    >>> winning_probability([1, 4, 12, 21, 33])\n    0.333\n    >>> winning_probability([35, 22, 11])\n    0\n    >>> winning_probability([2, 50, 24, 49])\n    0.25\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef winning_probability(numbers: List[int]) -> float:\n    \"\"\"In a raffle, lucky number is defined as containing only the factors 3, 5, 7, e.g. 15, 21. The system will generates a random set of numbers, \n    whoever picks the lucky number wins the prize. And no one knows the rules. Everyone picks numbers according to their preferences.\n    Everyone has their own lucky number. For Li, his lucky number is a number that contains 1, so in this raffle, Li will choose his lucky number first. \n    If there's no Li's lucky number in the set, he'll pick it at random.  \n    Can you help Li calculate the probability of winning the prize? \n    >>> winning_probability([1, 4, 12, 21, 33])\n    0.333\n    >>> winning_probability([35, 22, 11])\n    0\n    >>> winning_probability([2, 50, 24, 49])\n    0.25\n    \"\"\"", "function_name": "winning_probability", "parameters": ["numbers"]}
{"id": 38, "difficulty_types": 2, "question": "from typing import List\n\ndef symmetry_number(n: int) -> List[int]:\n    \"\"\"If a number is equal to its inverse order, it is called a symmetric number, e.g., '121'. Noting that all single digits are symmetric numbers. If the binary of this symmetric number is also equal to the inverse order of its binary, it is called a binary symmetric number, e.g., '9', whose binary number is '1001'. Further, performing a 01 swap on the binary of the symmetric number to form a flipped binary. If the decimal number corresponding to the flipped binary is a symmetric number, it is called a flipped symmetric number, e.g., '9', whose binary is '1001' , the binary flip number is '0110' and the corresponding decimal number is '6'. Find the count of symmetric numbers, binary symmetric numbers, and flipped symmetric numbers for all natural numbers not greater than the given number.\n    >>> symmetry_number(10)\n    [9, 5, 6]\n    >>> symmetry_number(50)\n    [13, 6, 8]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef symmetry_number(n: int) -> List[int]:\n    \"\"\"If a number is equal to its inverse order, it is called a symmetric number, e.g., '121'. Noting that all single digits are symmetric numbers. If the binary of this symmetric number is also equal to the inverse order of its binary, it is called a binary symmetric number, e.g., '9', whose binary number is '1001'. Further, performing a 01 swap on the binary of the symmetric number to form a flipped binary. If the decimal number corresponding to the flipped binary is a symmetric number, it is called a flipped symmetric number, e.g., '9', whose binary is '1001' , the binary flip number is '0110' and the corresponding decimal number is '6'. Find the count of symmetric numbers, binary symmetric numbers, and flipped symmetric numbers for all natural numbers not greater than the given number.\n    >>> symmetry_number(10)\n    [9, 5, 6]\n    >>> symmetry_number(50)\n    [13, 6, 8]\n    \"\"\"", "function_name": "symmetry_number", "parameters": ["n"]}
{"id": 39, "difficulty_types": 2, "question": "from typing import List\n\n\ndef brew_capability(brew_counts: List[int]) -> int:\n    \"\"\"\n    You are given an integer array `brew_counts`, where `brew_counts[i]` represents the number of brews needed for different batches of a certain brand of tea leaves. Calculate and return the brewing capacity of this brand of tea leaves.\n\n    A brand's brewing capacity is defined as the maximum value of b such that the given brand has b batches of tea leaves that have each been brewed at least b times. If there are multiple possible values for the brewing capacity, the brewing capacity is the maximum among them.\n\n    **Constraints:**\n\n    - `n == brew_counts.length`\n    - `1 <= n <= 5000`\n    - `0 <= brew_counts[i] <= 1000`\n\n    >>> brew_capability([3, 0, 6, 1, 5])\n    3\n    >>> brew_capability([1, 3, 1])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef brew_capability(brew_counts: List[int]) -> int:\n    \"\"\"\n    You are given an integer array `brew_counts`, where `brew_counts[i]` represents the number of brews needed for different batches of a certain brand of tea leaves. Calculate and return the brewing capacity of this brand of tea leaves.\n\n    A brand's brewing capacity is defined as the maximum value of b such that the given brand has b batches of tea leaves that have each been brewed at least b times. If there are multiple possible values for the brewing capacity, the brewing capacity is the maximum among them.\n\n    **Constraints:**\n\n    - `n == brew_counts.length`\n    - `1 <= n <= 5000`\n    - `0 <= brew_counts[i] <= 1000`\n\n    >>> brew_capability([3, 0, 6, 1, 5])\n    3\n    >>> brew_capability([1, 3, 1])\n    1\n    \"\"\"", "function_name": "brew_capability", "parameters": ["brew_counts"]}
{"id": 40, "difficulty_types": 2, "question": "from typing import List\n\ndef triangular_pair_of_a_to_b(a:int,b:int)->int: \n    \"\"\"A triangular number is a term in a sequence formed by the sum of natural numbers, with the nth triangular number represented as T_n, defined as T_n=1+2+3+...+n. This creates a sequence of triangular numbers: 1,3,6,10,15. Given two integer a and b, the sum from the a-th triangular number to the b-th triangular number (including a and b) called the sequence sum of triangular numbers. If there exists two triangular numbers Ti and Tj whose sum is equal to the sequence sum, then the two triangular numbers are called a triangular pair of a_to_b. Note that the sequence ab possibly has more than one triangle pair. For example, the triangular pairs of 3_to_4 are (1,15) and (6,10), because the third and fourth triangular numbers are 6 and 10, respectively. Given a and b (where a>1 and b>a+1), return the number of triangular pairs.\n    >>> triangular_pair_of_a_to_b(3,4)\n    2\n    >>> triangular_pair_of_a_to_b(3,5)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef triangular_pair_of_a_to_b(a:int,b:int)->int: \n    \"\"\"A triangular number is a term in a sequence formed by the sum of natural numbers, with the nth triangular number represented as T_n, defined as T_n=1+2+3+...+n. This creates a sequence of triangular numbers: 1,3,6,10,15. Given two integer a and b, the sum from the a-th triangular number to the b-th triangular number (including a and b) called the sequence sum of triangular numbers. If there exists two triangular numbers Ti and Tj whose sum is equal to the sequence sum, then the two triangular numbers are called a triangular pair of a_to_b. Note that the sequence ab possibly has more than one triangle pair. For example, the triangular pairs of 3_to_4 are (1,15) and (6,10), because the third and fourth triangular numbers are 6 and 10, respectively. Given a and b (where a>1 and b>a+1), return the number of triangular pairs.\n    >>> triangular_pair_of_a_to_b(3,4)\n    2\n    >>> triangular_pair_of_a_to_b(3,5)\n    0\n    \"\"\"", "function_name": "triangular_pair_of_a_to_b", "parameters": ["a", "b"]}
{"id": 41, "difficulty_types": 3, "question": "from typing import List\n\ndef next_fibonacci(numbers: List[int]) -> List[int]:\n    \"\"\"Given a sequence, where each number is greater than 10000 and belongs to the Fibonacci sequence,\n    this function quickly calculates the next Fibonacci number for each individual number and returns\n    them in a list in the order they were given.\n    >>> next_fibonacci([196418, 121393, 10946])\n    [317811, 196418, 17711]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef next_fibonacci(numbers: List[int]) -> List[int]:\n    \"\"\"Given a sequence, where each number is greater than 10000 and belongs to the Fibonacci sequence,\n    this function quickly calculates the next Fibonacci number for each individual number and returns\n    them in a list in the order they were given.\n    >>> next_fibonacci([196418, 121393, 10946])\n    [317811, 196418, 17711]\n    \"\"\"", "function_name": "next_fibonacci", "parameters": ["numbers"]}
{"id": 42, "difficulty_types": 3, "question": "from typing import List\n\ndef largest_multiple_of_three(digits: List[int]) -> str:\n    \"\"\"Given an array, concatenate any number of digits in any order to form the largest number that is divisible by 3,\n    and return it in string type. If such a number does not exist, return an empty string. Also, remember to remove\n    any unnecessary leading zeros.\n    >>> largest_multiple_of_three([1])\n    \"\"\n    >>> largest_multiple_of_three([1, 9, 9, 7])\n    \"99\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef largest_multiple_of_three(digits: List[int]) -> str:\n    \"\"\"Given an array, concatenate any number of digits in any order to form the largest number that is divisible by 3,\n    and return it in string type. If such a number does not exist, return an empty string. Also, remember to remove\n    any unnecessary leading zeros.\n    >>> largest_multiple_of_three([1])\n    \"\"\n    >>> largest_multiple_of_three([1, 9, 9, 7])\n    \"99\"\n    \"\"\"", "function_name": "largest_multiple_of_three", "parameters": ["digits"]}
{"id": 43, "difficulty_types": 3, "question": "def largest_number(n: int, x: int) -> int:\n    \"\"\"When Jason was typing on the keyboard, he noticed that the editor malfunctioned. Despite having\n    already entered an integer, he wants to rearrange the digits of this integer to obtain the largest\n    possible integer. Currently, he can perform the following operation for any number of times:\n    move one digit from the first x digits of the integer to the end. Please calculate and provide the\n    maximum integer that can be obtained.\n    >>> largest_number(28981, 1)\n    98128\n    >>> largest_number(18929, 2)\n    99821\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef largest_number(n: int, x: int) -> int:\n    \"\"\"When Jason was typing on the keyboard, he noticed that the editor malfunctioned. Despite having\n    already entered an integer, he wants to rearrange the digits of this integer to obtain the largest\n    possible integer. Currently, he can perform the following operation for any number of times:\n    move one digit from the first x digits of the integer to the end. Please calculate and provide the\n    maximum integer that can be obtained.\n    >>> largest_number(28981, 1)\n    98128\n    >>> largest_number(18929, 2)\n    99821\n    \"\"\"", "function_name": "largest_number", "parameters": ["n", "x"]}
{"id": 44, "difficulty_types": 3, "question": "from typing import List\n\ndef num_even_product(nums: List[int]) -> int:\n    \"\"\"Given an integer array nums, return the number of subarrays of this array with an even product.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    >>> num_even_product([1,2,3,4])\n    8\n    >>> num_even_product([3,9,11])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef num_even_product(nums: List[int]) -> int:\n    \"\"\"Given an integer array nums, return the number of subarrays of this array with an even product.\n    A subarray is a contiguous non-empty sequence of elements within an array.\n    >>> num_even_product([1,2,3,4])\n    8\n    >>> num_even_product([3,9,11])\n    0\n    \"\"\"", "function_name": "num_even_product", "parameters": ["nums"]}
{"id": 45, "difficulty_types": 3, "question": "def counting_game(n: int) -> int:\n    \"\"\"In a playful counting game, children start counting from 1 but they skip any number that contains the digit 9,\n    considering it to be unlucky. This results in a sequence that avoids the number 9 entirely,\n    such as 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, and so forth.\n\n    Given an integer n, return the nth number in this new integer sequence where the indexing begins at 1.\n    >>> counting_game(4)\n    4\n    >>> counting_game(10)\n    11\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef counting_game(n: int) -> int:\n    \"\"\"In a playful counting game, children start counting from 1 but they skip any number that contains the digit 9,\n    considering it to be unlucky. This results in a sequence that avoids the number 9 entirely,\n    such as 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, and so forth.\n\n    Given an integer n, return the nth number in this new integer sequence where the indexing begins at 1.\n    >>> counting_game(4)\n    4\n    >>> counting_game(10)\n    11\n    \"\"\"", "function_name": "counting_game", "parameters": ["n"]}
{"id": 46, "difficulty_types": 3, "question": "def longest_string(a: int, b: int, c: int) -> int:\n    \"\"\"\n    You are given three integers a, b, and c.\n\n    You have a strings equal to \"OO\", b strings equal to \"PP\", and c strings equal to \"OP\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"OOO\" or \"PPP\" as a substring.\n\n    Return the maximum possible length of the new string.\n\n    A substring is a contiguous non-empty sequence of characters within a string.\n\n    >>> longestString(2,5,1)\n    12\n    >>> longestString(3,2,2)\n    14\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef longest_string(a: int, b: int, c: int) -> int:\n    \"\"\"\n    You are given three integers a, b, and c.\n\n    You have a strings equal to \"OO\", b strings equal to \"PP\", and c strings equal to \"OP\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"OOO\" or \"PPP\" as a substring.\n\n    Return the maximum possible length of the new string.\n\n    A substring is a contiguous non-empty sequence of characters within a string.\n\n    >>> longestString(2,5,1)\n    12\n    >>> longestString(3,2,2)\n    14\n    \"\"\"", "function_name": "longest_string", "parameters": ["a", "b", "c"]}
{"id": 47, "difficulty_types": 3, "question": "from typing import List\n\ndef nums_erase(nums: List[int]) -> bool:\n    \"\"\"\n    You are provided with a sequence of whole numbers delineated as 'nums', inscribed upon an erasable surface intended for mathematical notation.\n\n    Participants named Alice and Bob sequentially undertake the action of removing exactly a single numeral from the aforementioned surface, with the initiator of this sequence being Alice. The objective for each participant is to avoid the situation where the cumulative application of an exclusive binary disjunction operation across all remaining numerical elements results in a nil value; such an outcome would render the active player the defeated party. In this context, the exclusive binary disjunction of a singular element is equivalent to the element itself, and when no elements are present, the result of the operation is zero.\n\n    Further to this, should a player commence their phase of activity with the total binary disjunction of all extant numbers on the erasable surface equaling zero, this circumstance immediately confers victory upon them.\n\n    The query at hand seeks a confirmation of whether Alice is assured victory under the stipulation that each contender employs strategies of the highest caliber. Respond with an affirmation if the probability of Alice winning under these conditions is absolute.\n\n    >>> nums_erase([1,1,2])\n    False\n    >>> nums_erase([0,1])\n    True\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef nums_erase(nums: List[int]) -> bool:\n    \"\"\"\n    You are provided with a sequence of whole numbers delineated as 'nums', inscribed upon an erasable surface intended for mathematical notation.\n\n    Participants named Alice and Bob sequentially undertake the action of removing exactly a single numeral from the aforementioned surface, with the initiator of this sequence being Alice. The objective for each participant is to avoid the situation where the cumulative application of an exclusive binary disjunction operation across all remaining numerical elements results in a nil value; such an outcome would render the active player the defeated party. In this context, the exclusive binary disjunction of a singular element is equivalent to the element itself, and when no elements are present, the result of the operation is zero.\n\n    Further to this, should a player commence their phase of activity with the total binary disjunction of all extant numbers on the erasable surface equaling zero, this circumstance immediately confers victory upon them.\n\n    The query at hand seeks a confirmation of whether Alice is assured victory under the stipulation that each contender employs strategies of the highest caliber. Respond with an affirmation if the probability of Alice winning under these conditions is absolute.\n\n    >>> nums_erase([1,1,2])\n    False\n    >>> nums_erase([0,1])\n    True\n    \"\"\"", "function_name": "nums_erase", "parameters": ["nums"]}
{"id": 48, "difficulty_types": 3, "question": "from typing import List\n\ndef is_vshape(points: List[List[int]]) -> bool:\n    \"\"\"\n    Suppose you have a list `vertices`, with each element vertices[i] = [ai, bi] signifying the coordinates of a vertex in a 2D space. Can these vertices create a shape resembling a V, where no three vertices are collinear and each is unique? The function should return `true` if such a formation is possible.\n    >>> is_vshape([[1,1], [2,3], [3,2]])\n    true\n    >>> is_vshape([[1,1], [2,2], [3,3]])\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef is_vshape(points: List[List[int]]) -> bool:\n    \"\"\"\n    Suppose you have a list `vertices`, with each element vertices[i] = [ai, bi] signifying the coordinates of a vertex in a 2D space. Can these vertices create a shape resembling a V, where no three vertices are collinear and each is unique? The function should return `true` if such a formation is possible.\n    >>> is_vshape([[1,1], [2,3], [3,2]])\n    true\n    >>> is_vshape([[1,1], [2,2], [3,3]])\n    false\n    \"\"\"", "function_name": "is_vshape", "parameters": ["points"]}
{"id": 49, "difficulty_types": 3, "question": "from typing import List\n\ndef max_count(banned: List[int], n: int, maxSum: int) -> int:\n    \"\"\"\n    Given an array of integers `banned`, and two additional integers `n` and `maxSum`, determine the maximum number of integers you can select under the following conditions:\n\n    1.You may only choose from integers within the inclusive range from 1 to `n`.\n    2.You cannot select the same integer more than once.\n    3.None of the selected integers should appear in the `banned` array.\n    4.The total sum of the selected integers must not surpass `maxSum`.\n\n    Can you calculate the largest possible count of integers that can be chosen adhering to these criteria?\n\n    >>> max_count([1,4,6], 6, 4)\n    1\n    Explanation: You can choose the integer 3. It is within the range [1, 6], not in the banned list, and the sum of chosen integers is 3, which does not exceed maxSum.\n    >>> max_count([4,3,5,6], 7, 18)\n    3\n    Explanation: You can choose integers 1, 2, and 7. They all fall within the range [1, 7], none are in the banned list, and the sum of chosen integers is 10, which does not exceed maxSum.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_count(banned: List[int], n: int, maxSum: int) -> int:\n    \"\"\"\n    Given an array of integers `banned`, and two additional integers `n` and `maxSum`, determine the maximum number of integers you can select under the following conditions:\n\n    1.You may only choose from integers within the inclusive range from 1 to `n`.\n    2.You cannot select the same integer more than once.\n    3.None of the selected integers should appear in the `banned` array.\n    4.The total sum of the selected integers must not surpass `maxSum`.\n\n    Can you calculate the largest possible count of integers that can be chosen adhering to these criteria?\n\n    >>> max_count([1,4,6], 6, 4)\n    1\n    Explanation: You can choose the integer 3. It is within the range [1, 6], not in the banned list, and the sum of chosen integers is 3, which does not exceed maxSum.\n    >>> max_count([4,3,5,6], 7, 18)\n    3\n    Explanation: You can choose integers 1, 2, and 7. They all fall within the range [1, 7], none are in the banned list, and the sum of chosen integers is 10, which does not exceed maxSum.\n    \"\"\"", "function_name": "max_count", "parameters": ["banned", "n", "maxSum"]}
{"id": 50, "difficulty_types": 3, "question": "def ab_string(x: int, y: int, z: int) -> int:\n    \"\"\"In the beading activity, there are x number of 'AA', y number of 'BB', and z number of 'AB' letter style beads. Beads are indivisible, and we do not want 'AAA' and 'BBB' to exist in the final product. What is the maximum length that can be made by connecting these beads?\n    NOTE: It is not necessary to use all the beads. The final product will not be connected end to end.\n\n    1 <= x, y, z <= 10^5\n\n    >>> ab_string(2,5,1)\n    12\n    >>> ab_string(3,2,2)\n    14\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef ab_string(x: int, y: int, z: int) -> int:\n    \"\"\"In the beading activity, there are x number of 'AA', y number of 'BB', and z number of 'AB' letter style beads. Beads are indivisible, and we do not want 'AAA' and 'BBB' to exist in the final product. What is the maximum length that can be made by connecting these beads?\n    NOTE: It is not necessary to use all the beads. The final product will not be connected end to end.\n\n    1 <= x, y, z <= 10^5\n\n    >>> ab_string(2,5,1)\n    12\n    >>> ab_string(3,2,2)\n    14\n    \"\"\"", "function_name": "ab_string", "parameters": ["x", "y", "z"]}
{"id": 51, "difficulty_types": 3, "question": "from typing import List\n\ndef check_tail_zeros(nums: List[int]) -> bool:\n    \"\"\"Given an array of positive integers, determine if you can choose two or more elements from the array so that the bitwise OR of these numbers results in at least one zero at the end of its binary form.\n    >>>check_tail_zeros([1,2,10,12,20])\n    True\n    >>>check_tail_zeros([2,4,8,16])\n    True\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef check_tail_zeros(nums: List[int]) -> bool:\n    \"\"\"Given an array of positive integers, determine if you can choose two or more elements from the array so that the bitwise OR of these numbers results in at least one zero at the end of its binary form.\n    >>>check_tail_zeros([1,2,10,12,20])\n    True\n    >>>check_tail_zeros([2,4,8,16])\n    True\n    \"\"\"", "function_name": "check_tail_zeros", "parameters": ["nums"]}
{"id": 52, "difficulty_types": 3, "question": "def divide_white_black(s: str) -> int:\n    \"\"\"\n    There are n balls on a table, each either black or white.\n\n    You have a binary string s of length n, starting from index 0, where '1' represents a black ball and '0' represents a white ball.\n\n    In each step, you can swap two adjacent balls.\n\n    Return the minimum number of steps required to move all black balls to the right and all white balls to the left.\n    >>>divide_white_black(\"001\")\n    0\n    >>>divide_white_black(\"1100\")\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef divide_white_black(s: str) -> int:\n    \"\"\"\n    There are n balls on a table, each either black or white.\n\n    You have a binary string s of length n, starting from index 0, where '1' represents a black ball and '0' represents a white ball.\n\n    In each step, you can swap two adjacent balls.\n\n    Return the minimum number of steps required to move all black balls to the right and all white balls to the left.\n    >>>divide_white_black(\"001\")\n    0\n    >>>divide_white_black(\"1100\")\n    4\n    \"\"\"", "function_name": "divide_white_black", "parameters": ["s"]}
{"id": 53, "difficulty_types": 3, "question": "from typing import List\n\ndef minimum_sum(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    Given two arrays, 'nums1' and 'nums2', consisting of positive integers and zeros,\n    replace all zeros in both arrays with strictly positive integers so that the sum of elements in both arrays becomes equal.\n    Return the smallest possible equal sum. If it's not possible to make the sums equal, return -1.\n    >>>minimum_sum([1,4],[2,3])\n    5\n    >>>minimum_sum([2,4,6,8],[1,2])\n    -1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef minimum_sum(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n    Given two arrays, 'nums1' and 'nums2', consisting of positive integers and zeros,\n    replace all zeros in both arrays with strictly positive integers so that the sum of elements in both arrays becomes equal.\n    Return the smallest possible equal sum. If it's not possible to make the sums equal, return -1.\n    >>>minimum_sum([1,4],[2,3])\n    5\n    >>>minimum_sum([2,4,6,8],[1,2])\n    -1\n    \"\"\"", "function_name": "minimum_sum", "parameters": ["nums1", "nums2"]}
{"id": 54, "difficulty_types": 3, "question": "from typing import List\n\ndef is_maximum_sum_array(arr:List[int])->int:\n    \"\"\"Given an array of real numbers a[1] to a[n], you are allowed to perform any number of operations. In each operation, you select an index i such that 1 < i < n, and then update a[i] to a[i - 1] + a[i + 1] - a[i]. After several operations, the sum of the array becomes the maximum, and then do the same operation will not make the sum of the array become larger, then the array is called the maximum sum array. Given an array, determine whether the array is the maximum sum array.\n\n    >>> is_maximum_sum_array([1,3,2])\n    0\n    >>> is_maximum_sum_array([1,2,3])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef is_maximum_sum_array(arr:List[int])->int:\n    \"\"\"Given an array of real numbers a[1] to a[n], you are allowed to perform any number of operations. In each operation, you select an index i such that 1 < i < n, and then update a[i] to a[i - 1] + a[i + 1] - a[i]. After several operations, the sum of the array becomes the maximum, and then do the same operation will not make the sum of the array become larger, then the array is called the maximum sum array. Given an array, determine whether the array is the maximum sum array.\n\n    >>> is_maximum_sum_array([1,3,2])\n    0\n    >>> is_maximum_sum_array([1,2,3])\n    1\n    \"\"\"", "function_name": "is_maximum_sum_array", "parameters": ["arr"]}
{"id": 55, "difficulty_types": 3, "question": "def minimum_birds(num_containers: int) -> int:\n    \"\"\"\n    You have n sealed containers, each containing a different type of food. One of these foods is toxic, while the others are safe. You have some birds that can be used to test these foods. If a bird eats the toxic food, it will die approximately 24 hours later.\n\n    Your task is to find the most efficient method to determine the container number containing the toxic food, using as few birds as possible. Please write a program to calculate the minimum number of birds needed to ensure the identification of the container with toxic food.\n\n\n    >>> minimum_birds(8)\n    3\n    >>> minimum_birds(16)\n    4\n    >>> minimum_birds(1024)\n    10\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef minimum_birds(num_containers: int) -> int:\n    \"\"\"\n    You have n sealed containers, each containing a different type of food. One of these foods is toxic, while the others are safe. You have some birds that can be used to test these foods. If a bird eats the toxic food, it will die approximately 24 hours later.\n\n    Your task is to find the most efficient method to determine the container number containing the toxic food, using as few birds as possible. Please write a program to calculate the minimum number of birds needed to ensure the identification of the container with toxic food.\n\n\n    >>> minimum_birds(8)\n    3\n    >>> minimum_birds(16)\n    4\n    >>> minimum_birds(1024)\n    10\n    \"\"\"", "function_name": "minimum_birds", "parameters": ["num_containers"]}
{"id": 56, "difficulty_types": 3, "question": "def sit_on_seat(n: int) -> float:\n    \"\"\" \"Waiting for Spring\" is a popular movie released in early 2024, and it is hard to get a ticket. Therefore, it is no surprise that all the seats for this film in Hall 1 of Highway Cinema were sold out. It is known that there are n seats in Hall 1, and n spectators who purchased this event will be present.\n\n    Audiences don't particularly care about their seats. If no one is sitting in the seat they bought when they arrive, they will sit in their own seats. If the seats are already occupied, they will find a seat to watch the movie.\n\n    Unfortunately, the first person to arrive at the theater didn't remember where he was, so he sat down casually. A is the nth arriving passenger. What is the probability that he will be able to sit in his seat?\n\n    1 <= n <= 10^5\n\n    >>> sit_on_seat(1)\n    1\n    >>> sit_on_seat(2)\n    0.5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef sit_on_seat(n: int) -> float:\n    \"\"\" \"Waiting for Spring\" is a popular movie released in early 2024, and it is hard to get a ticket. Therefore, it is no surprise that all the seats for this film in Hall 1 of Highway Cinema were sold out. It is known that there are n seats in Hall 1, and n spectators who purchased this event will be present.\n\n    Audiences don't particularly care about their seats. If no one is sitting in the seat they bought when they arrive, they will sit in their own seats. If the seats are already occupied, they will find a seat to watch the movie.\n\n    Unfortunately, the first person to arrive at the theater didn't remember where he was, so he sat down casually. A is the nth arriving passenger. What is the probability that he will be able to sit in his seat?\n\n    1 <= n <= 10^5\n\n    >>> sit_on_seat(1)\n    1\n    >>> sit_on_seat(2)\n    0.5\n    \"\"\"", "function_name": "sit_on_seat", "parameters": ["n"]}
{"id": 57, "difficulty_types": 3, "question": "from typing import List\n\ndef minimal_avg_distance(nums: List[int]) -> int:\n    \"\"\"The minimum distance of an array is defined as the minimum absolute value of the difference between any two elements, the maximum distance of an array is defined as the maximum absolute value of the difference between any two elements, and the average distance of an array is defined as 1/2 of the minimum distance and the maximum distance. Given an array, you have at most two times to replace an element with any value inside the array. Your goal is to make the average distance as small as possible and return the minimum average distance.\n    >>> minimal_avg_distance([1,4,3])\n    0\n    >>> minimal_avg_distance([1,4,7,8,5])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef minimal_avg_distance(nums: List[int]) -> int:\n    \"\"\"The minimum distance of an array is defined as the minimum absolute value of the difference between any two elements, the maximum distance of an array is defined as the maximum absolute value of the difference between any two elements, and the average distance of an array is defined as 1/2 of the minimum distance and the maximum distance. Given an array, you have at most two times to replace an element with any value inside the array. Your goal is to make the average distance as small as possible and return the minimum average distance.\n    >>> minimal_avg_distance([1,4,3])\n    0\n    >>> minimal_avg_distance([1,4,7,8,5])\n    3\n    \"\"\"", "function_name": "minimal_avg_distance", "parameters": ["nums"]}
{"id": 58, "difficulty_types": 3, "question": "from typing import List\n\ndef fall_time(center:List[int],radius:int,position:List[List[int]])->int:\n    \"\"\" There is a round table with a delicious cake placed at its center. Several ants are positioned around the table, and each of them will walk the shortest distance towards the cake at a constant speed of 1 cm/s. Once an ant reaches the cake, it will walk away in any direction along the circumference of the table. However, when two ants collide, they will both turn and continue walking in the opposite direction, making a 180-degree turn. Your task is to calculate how much time it will take for the last ant to leave the table.\n    Given the coordinates of the center of the round table, the radius of the table, and the coordinates of all ants, return the latest time. Note, please round up the final result.\n    >>> fall_time([0,0],5,[[1,0]])\n    6\n    >>> fall_time([0,0],5,[[1,0],[2,0],[2,2]])\n    8\n    \n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef fall_time(center:List[int],radius:int,position:List[List[int]])->int:\n    \"\"\" There is a round table with a delicious cake placed at its center. Several ants are positioned around the table, and each of them will walk the shortest distance towards the cake at a constant speed of 1 cm/s. Once an ant reaches the cake, it will walk away in any direction along the circumference of the table. However, when two ants collide, they will both turn and continue walking in the opposite direction, making a 180-degree turn. Your task is to calculate how much time it will take for the last ant to leave the table.\n    Given the coordinates of the center of the round table, the radius of the table, and the coordinates of all ants, return the latest time. Note, please round up the final result.\n    >>> fall_time([0,0],5,[[1,0]])\n    6\n    >>> fall_time([0,0],5,[[1,0],[2,0],[2,2]])\n    8\n    \n    \"\"\"", "function_name": "fall_time", "parameters": ["center", "radius", "position"]}
{"id": 59, "difficulty_types": 3, "question": "from typing import List\n\ndef danger_corner(points:List[List[int]])->int:\n    \"\"\"Given n points on a 2D x-y plane, where the coordinates of each point are integers, these points form a polygon with each side either parallel to the x-axis or the y-axis, enclosing an area that represents a lake. Starting at the first coordinate and riding in order, you embark on a bike ride around the polygon back to the starting point. At certain points, if you forget to turn, you would end up in the lake. How many such points exist on the polygon where failing to turn would cause you to ride into the lake?\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,2],[2,2],[2,0]])\n    1\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,0]])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef danger_corner(points:List[List[int]])->int:\n    \"\"\"Given n points on a 2D x-y plane, where the coordinates of each point are integers, these points form a polygon with each side either parallel to the x-axis or the y-axis, enclosing an area that represents a lake. Starting at the first coordinate and riding in order, you embark on a bike ride around the polygon back to the starting point. At certain points, if you forget to turn, you would end up in the lake. How many such points exist on the polygon where failing to turn would cause you to ride into the lake?\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,2],[2,2],[2,0]])\n    1\n    >>> danger_corner([[0,0],[0,1],[1,1],[1,0]])\n    0\n    \"\"\"", "function_name": "danger_corner", "parameters": ["points"]}
{"id": 60, "difficulty_types": 3, "question": "def reach_number(target: int) -> int:\n    \"\"\"A car starts from position 0 and drives on an infinite road. The car can move numMoves times, and each move can choose to move left or right. It is required that only i kilometers can be moved during the i-th move. Given the destination target, calculate the minimum number of moves required to reach the target (ie the minimum numMoves).\n\n    -10^9 <= target <= 10^9\n    target != 0\n\n    >>> reach_number(2)\n    3\n    >>> reach_number(3)\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef reach_number(target: int) -> int:\n    \"\"\"A car starts from position 0 and drives on an infinite road. The car can move numMoves times, and each move can choose to move left or right. It is required that only i kilometers can be moved during the i-th move. Given the destination target, calculate the minimum number of moves required to reach the target (ie the minimum numMoves).\n\n    -10^9 <= target <= 10^9\n    target != 0\n\n    >>> reach_number(2)\n    3\n    >>> reach_number(3)\n    2\n    \"\"\"", "function_name": "reach_number", "parameters": ["target"]}
{"id": 61, "difficulty_types": 4, "question": "def morning_commute(a: int, b: int, c: int, d: int):\n    \"\"\"There are two companies located at both ends of a straight road, with two towns in the middle.\n    Every morning, 'a' people from the left town commute to work at the left company and 'b' people commute\n    to the right company. From the right town, 'c' people commute to the left company and 'd' people commute\n    to the right company. Everyone walks at the same pace. Please calculate how many encounters occur in total on their commute to work each morning.\n    >>> morning_commute(7,3,4,6)\n    12\n    >>> morning_commute(17,31,13,40)\n    403\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef morning_commute(a: int, b: int, c: int, d: int):\n    \"\"\"There are two companies located at both ends of a straight road, with two towns in the middle.\n    Every morning, 'a' people from the left town commute to work at the left company and 'b' people commute\n    to the right company. From the right town, 'c' people commute to the left company and 'd' people commute\n    to the right company. Everyone walks at the same pace. Please calculate how many encounters occur in total on their commute to work each morning.\n    >>> morning_commute(7,3,4,6)\n    12\n    >>> morning_commute(17,31,13,40)\n    403\n    \"\"\"", "function_name": "morning_commute", "parameters": ["a", "b", "c", "d"]}
{"id": 62, "difficulty_types": 4, "question": "def calculate_time(time1: str, time2: str) -> int:\n    \"\"\"Given two strings formatted as \"hh:mm:ss\" representing two time in one day, calculate the difference\n    in seconds between the two time. If the values are not within a reasonable range (for example, the hour\n    is greater than 24 or less than 0), please return -1.\n    >>> calculate_time(\"00:01:10\", \"05:06:58\")\n    18348\n    >>> calculate_time(\"08:10:00\", \"08:09:18\")\n    42\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef calculate_time(time1: str, time2: str) -> int:\n    \"\"\"Given two strings formatted as \"hh:mm:ss\" representing two time in one day, calculate the difference\n    in seconds between the two time. If the values are not within a reasonable range (for example, the hour\n    is greater than 24 or less than 0), please return -1.\n    >>> calculate_time(\"00:01:10\", \"05:06:58\")\n    18348\n    >>> calculate_time(\"08:10:00\", \"08:09:18\")\n    42\n    \"\"\"", "function_name": "calculate_time", "parameters": ["time1", "time2"]}
{"id": 63, "difficulty_types": 4, "question": "from typing import List\n\ndef max_water_container(height: List[int]) -> int:\n    \"\"\"Given an integer array 'height' of length 'n'. There are 'n' vertical lines where the ith line has\n    its two endpoints at (i, 0) and (i, height[i]). Find the two lines that, along with the x-axis, form a container,\n     which can hold the maximum amount of water. Return the maximum volume of water that the container can store.\n    Note: The container should not be tilted.\n    >>> max_water_container([1,1])\n    1\n    >>> max_water_container([1,2,3,4])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_water_container(height: List[int]) -> int:\n    \"\"\"Given an integer array 'height' of length 'n'. There are 'n' vertical lines where the ith line has\n    its two endpoints at (i, 0) and (i, height[i]). Find the two lines that, along with the x-axis, form a container,\n     which can hold the maximum amount of water. Return the maximum volume of water that the container can store.\n    Note: The container should not be tilted.\n    >>> max_water_container([1,1])\n    1\n    >>> max_water_container([1,2,3,4])\n    4\n    \"\"\"", "function_name": "max_water_container", "parameters": ["height"]}
{"id": 64, "difficulty_types": 4, "question": "from typing import List\n\ndef from_starting_station(money: List[int], toll: List[int]) -> int:\n    \"\"\"There is a circular road with 'n' stations, each station has either a good person or a bad person.\n    A good person will give you money, while a bad person will charge you a certain toll. If you do not\n    have enough money to pay the toll, the bad person will not allow you to pass through.\n    Please find which station you can you start from so that you are able to make a complete loop and return\n    to your starting point. If a solution exists, it is guaranteed to be unique. The output should be the index\n    of the list.\n    >>> from_starting_station([2,3,4], [3,4,3])\n    -1\n    >>> from_starting_station([1,2,3,4,5], [3,4,5,1,2])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef from_starting_station(money: List[int], toll: List[int]) -> int:\n    \"\"\"There is a circular road with 'n' stations, each station has either a good person or a bad person.\n    A good person will give you money, while a bad person will charge you a certain toll. If you do not\n    have enough money to pay the toll, the bad person will not allow you to pass through.\n    Please find which station you can you start from so that you are able to make a complete loop and return\n    to your starting point. If a solution exists, it is guaranteed to be unique. The output should be the index\n    of the list.\n    >>> from_starting_station([2,3,4], [3,4,3])\n    -1\n    >>> from_starting_station([1,2,3,4,5], [3,4,5,1,2])\n    3\n    \"\"\"", "function_name": "from_starting_station", "parameters": ["money", "toll"]}
{"id": 65, "difficulty_types": 4, "question": "from typing import List\n\ndef number_of_covered_point(tracks: List[List[int]]) -> int:\n    \"\"\"Given a 2D integer array 'tracks' representing intervals of trains parking on a railway track.\n    For any index i, tracks[i] = [start_i, end_i], where start_i is the starting point of the i_th train\n    and end_i is the ending point of the i_th train.\n\n    Return the number of integer points on the railway track covered by any part of the trains.\n    >>> number_of_covered_point([[1,4],[6,8]])\n    7\n    >>> number_of_covered_point([[3,6],[4,7],[6,8]])\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef number_of_covered_point(tracks: List[List[int]]) -> int:\n    \"\"\"Given a 2D integer array 'tracks' representing intervals of trains parking on a railway track.\n    For any index i, tracks[i] = [start_i, end_i], where start_i is the starting point of the i_th train\n    and end_i is the ending point of the i_th train.\n\n    Return the number of integer points on the railway track covered by any part of the trains.\n    >>> number_of_covered_point([[1,4],[6,8]])\n    7\n    >>> number_of_covered_point([[3,6],[4,7],[6,8]])\n    6\n    \"\"\"", "function_name": "number_of_covered_point", "parameters": ["tracks"]}
{"id": 66, "difficulty_types": 4, "question": "from typing import List\n\ndef sort_binary(arr: List[int]) -> List[int]:\n    \"\"\"\n    Arrange an array of integers in ascending order based on the count of 1's in their binary form. For integers with an identical count of 1's, order them according to their value in ascending sequence. The sorted array should then be returned.\n\n    >>> sort_binary([0,1,2,3,4,5,6,7,8])\n    [0,1,2,4,8,3,5,6,7]\n\n    >>> sort_binary([1024,512,256,128,64,32,16,8,4,2,1])\n    [1,2,4,8,16,32,64,128,256,512,1024]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef sort_binary(arr: List[int]) -> List[int]:\n    \"\"\"\n    Arrange an array of integers in ascending order based on the count of 1's in their binary form. For integers with an identical count of 1's, order them according to their value in ascending sequence. The sorted array should then be returned.\n\n    >>> sort_binary([0,1,2,3,4,5,6,7,8])\n    [0,1,2,4,8,3,5,6,7]\n\n    >>> sort_binary([1024,512,256,128,64,32,16,8,4,2,1])\n    [1,2,4,8,16,32,64,128,256,512,1024]\n    \"\"\"", "function_name": "sort_binary", "parameters": ["arr"]}
{"id": 67, "difficulty_types": 4, "question": "from typing import List\n\ndef convex_polygon(points: List[List[int]]) -> bool:\n    \"\"\"\n    Imagine that you have been supplied with an array of coordinate pairs, where each pair represents a point on the Cartesian coordinate plane. These coordinate pairs are contained in an array called points, where each element points[i] consists of a subarray [xi, yi] that in turn holds the x and y coordinates of the ith point. The task at hand is to take this series of points and establish connections between them in sequential order to construct the outline of a polygon.\n\n    Your challenge is to analyze this sequence of points and determine whether the resulting polygon is convex. An assumption you can safely make is that the series of points given will always form a simple polygon.\n\n    >>> convex_polygon([[0,0],[0,5],[5,5],[5,0]])\n    true\n    >>> convex_polygon([[0,0],[0,10],[10,10],[10,0],[5,5]])\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef convex_polygon(points: List[List[int]]) -> bool:\n    \"\"\"\n    Imagine that you have been supplied with an array of coordinate pairs, where each pair represents a point on the Cartesian coordinate plane. These coordinate pairs are contained in an array called points, where each element points[i] consists of a subarray [xi, yi] that in turn holds the x and y coordinates of the ith point. The task at hand is to take this series of points and establish connections between them in sequential order to construct the outline of a polygon.\n\n    Your challenge is to analyze this sequence of points and determine whether the resulting polygon is convex. An assumption you can safely make is that the series of points given will always form a simple polygon.\n\n    >>> convex_polygon([[0,0],[0,5],[5,5],[5,0]])\n    true\n    >>> convex_polygon([[0,0],[0,10],[10,10],[10,0],[5,5]])\n    false\n    \"\"\"", "function_name": "convex_polygon", "parameters": ["points"]}
{"id": 68, "difficulty_types": 4, "question": "def knight_dialer(n: int) -> int:\n    \"\"\"Given a knight and a two-dimensional matrix chessboard [['1','2','3'],['4','5','6'],['7','8',' 9'],['*','0','#']]. Initially, the knight can be in any position on the chessboard and it can only stand on the numbered grids. The number at the knight's position will be recorded every time he takes a step. How many different numbers can the knight make when he takes n-1 steps?\n\n    As the answer may be very large, return the answer modulo 10^9 + 7.\n\n    1 <= n <= 5000\n\n    >>> knight_dialer(1)\n    10\n    >>> knight_dialer(2)\n    20\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef knight_dialer(n: int) -> int:\n    \"\"\"Given a knight and a two-dimensional matrix chessboard [['1','2','3'],['4','5','6'],['7','8',' 9'],['*','0','#']]. Initially, the knight can be in any position on the chessboard and it can only stand on the numbered grids. The number at the knight's position will be recorded every time he takes a step. How many different numbers can the knight make when he takes n-1 steps?\n\n    As the answer may be very large, return the answer modulo 10^9 + 7.\n\n    1 <= n <= 5000\n\n    >>> knight_dialer(1)\n    10\n    >>> knight_dialer(2)\n    20\n    \"\"\"", "function_name": "knight_dialer", "parameters": ["n"]}
{"id": 69, "difficulty_types": 4, "question": "import heapq\nfrom typing import List\n\n\ndef trap_water(heightMap: List[List[int]]) -> int:\n    \"\"\"When designing a landmark building composed of multiple cuboids with a base area of ​​1*1, the designer wants to calculate the water storage capacity on its roof. Given the building covers a total area of ​​m*n, and the height is provided by a two-dimensional matrix.\n\n    m == heightMap.length\n    n == heightMap[i].length\n    1 <= m, n <= 200\n    0 <= heightMap[i][j] <= 2 * 10^4\n\n    >>> trapRainWater([[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]])\n    4\n    >>> trapRainWater([[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]])\n    10\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nimport heapq\nfrom typing import List\n\n\ndef trap_water(heightMap: List[List[int]]) -> int:\n    \"\"\"When designing a landmark building composed of multiple cuboids with a base area of ​​1*1, the designer wants to calculate the water storage capacity on its roof. Given the building covers a total area of ​​m*n, and the height is provided by a two-dimensional matrix.\n\n    m == heightMap.length\n    n == heightMap[i].length\n    1 <= m, n <= 200\n    0 <= heightMap[i][j] <= 2 * 10^4\n\n    >>> trapRainWater([[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]])\n    4\n    >>> trapRainWater([[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]])\n    10\n    \"\"\"", "function_name": "trap_water", "parameters": ["heightMap"]}
{"id": 70, "difficulty_types": 4, "question": "def optical_experiment(m: int, n: int) -> int:\n    \"\"\"In the school's optical laboratory, there is a square device with mirrors on all four sides.\n    Except for the northwest corner of the device, there is a light receptor at each corner (\n    numbered 0 for the southwest corner, 1 for the southeast corner, and 2 for the northeast corner).\n    The device has a side length of m. Now, a laser is emitted from the northwest corner of the device,\n    first meets the south wall at a distance n from the 0 receptor.\n    Return the number of the receptor that the laser first encounters (it is guaranteed that the laser\n    will eventually hit a receptor).\n    >>> optical_experiment(1, 1)\n    1\n    >>> optical_experiment(3, 2)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef optical_experiment(m: int, n: int) -> int:\n    \"\"\"In the school's optical laboratory, there is a square device with mirrors on all four sides.\n    Except for the northwest corner of the device, there is a light receptor at each corner (\n    numbered 0 for the southwest corner, 1 for the southeast corner, and 2 for the northeast corner).\n    The device has a side length of m. Now, a laser is emitted from the northwest corner of the device,\n    first meets the south wall at a distance n from the 0 receptor.\n    Return the number of the receptor that the laser first encounters (it is guaranteed that the laser\n    will eventually hit a receptor).\n    >>> optical_experiment(1, 1)\n    1\n    >>> optical_experiment(3, 2)\n    0\n    \"\"\"", "function_name": "optical_experiment", "parameters": ["m", "n"]}
{"id": 71, "difficulty_types": 4, "question": "def word_pronunciation(num: int) -> str:\n    \"\"\"At a ceremony, the host will read out the number of guests present today. The number of guests num is now given. Please complete the code and output the correct pronunciation.\n\n    0 <= num <= 2^31 - 1\n\n    >>> word_pronunciation(123)\n    \"One Hundred Twenty Three\"\n    >>> word_pronunciation(12345)\n    \"Twelve Thousand Three Hundred Forty Five\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef word_pronunciation(num: int) -> str:\n    \"\"\"At a ceremony, the host will read out the number of guests present today. The number of guests num is now given. Please complete the code and output the correct pronunciation.\n\n    0 <= num <= 2^31 - 1\n\n    >>> word_pronunciation(123)\n    \"One Hundred Twenty Three\"\n    >>> word_pronunciation(12345)\n    \"Twelve Thousand Three Hundred Forty Five\"\n    \"\"\"", "function_name": "word_pronunciation", "parameters": ["num"]}
{"id": 72, "difficulty_types": 4, "question": "def remove_similar_equal_characters(word: str) -> int:\n    \"\"\"\n    In a single operation, you can change any character in a word to any other lowercase English letter.\n    Your task is to determine the minimum number of such operations needed to modify the word\n    such that\n    1. no two adjacent characters are either the same\n    or\n    2. next to each other in the alphabet.\n    >>> remove_similar_equal_characters(\"bozhijiang\")\n    2\n    >>> remove_similar_equal_characters(\"abddez\")\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef remove_similar_equal_characters(word: str) -> int:\n    \"\"\"\n    In a single operation, you can change any character in a word to any other lowercase English letter.\n    Your task is to determine the minimum number of such operations needed to modify the word\n    such that\n    1. no two adjacent characters are either the same\n    or\n    2. next to each other in the alphabet.\n    >>> remove_similar_equal_characters(\"bozhijiang\")\n    2\n    >>> remove_similar_equal_characters(\"abddez\")\n    2\n    \"\"\"", "function_name": "remove_similar_equal_characters", "parameters": ["word"]}
{"id": 73, "difficulty_types": 4, "question": "from typing import List\n\ndef widest_vertical_region_width(points: List[List[int]]) -> int:\n    \"\"\"\n    You are given n points on a 2D plane, where points[i] = [xi, yi] represents the x and y coordinates of the ith point.\n\n    A vertical region is defined as an infinite area with fixed width on the x-axis and infinite height on the y-axis.\n\n    Return the width of the widest vertical region that has no points inside it.\n\n    Note that points on the edges of a vertical region are not considered inside the region.\n    >>>widest_vertical_region_width([[1,2],[3,4]])\n    2\n    >>>widest_vertical_region_width([[1,0],[1,4],[5,3]])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef widest_vertical_region_width(points: List[List[int]]) -> int:\n    \"\"\"\n    You are given n points on a 2D plane, where points[i] = [xi, yi] represents the x and y coordinates of the ith point.\n\n    A vertical region is defined as an infinite area with fixed width on the x-axis and infinite height on the y-axis.\n\n    Return the width of the widest vertical region that has no points inside it.\n\n    Note that points on the edges of a vertical region are not considered inside the region.\n    >>>widest_vertical_region_width([[1,2],[3,4]])\n    2\n    >>>widest_vertical_region_width([[1,0],[1,4],[5,3]])\n    4\n    \"\"\"", "function_name": "widest_vertical_region_width", "parameters": ["points"]}
{"id": 74, "difficulty_types": 4, "question": "def chess_square_color(coordinates: str) -> bool:\n    \"\"\"\n    You are given a coordinate string 'coordinates' representing the position of a square on a chessboard.\n\n    If the color of the given square is white, return true. If it's black, return false.\n\n    The given coordinate is guaranteed to represent a valid square on the chessboard.\n\n    The coordinate string has the format letter followed by number, where:\n\n    - The letter represents the column from 'a' to 'h'.\n    - The number represents the row from 1 to 8.\n    >>>chess_square_color(\"h3\")\n    True\n    >>>chess_square_color(\"b2\")\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef chess_square_color(coordinates: str) -> bool:\n    \"\"\"\n    You are given a coordinate string 'coordinates' representing the position of a square on a chessboard.\n\n    If the color of the given square is white, return true. If it's black, return false.\n\n    The given coordinate is guaranteed to represent a valid square on the chessboard.\n\n    The coordinate string has the format letter followed by number, where:\n\n    - The letter represents the column from 'a' to 'h'.\n    - The number represents the row from 1 to 8.\n    >>>chess_square_color(\"h3\")\n    True\n    >>>chess_square_color(\"b2\")\n    False\n    \"\"\"", "function_name": "chess_square_color", "parameters": ["coordinates"]}
{"id": 75, "difficulty_types": 4, "question": "from typing import List\n\ndef celsius_to_kelvin_fahrenheit(celsius: float) -> List[float]:\n    \"\"\"\n    You are given a non-negative floating point number celsius representing a temperature rounded to two decimal places in Celsius degrees.\n\n    You need to convert the given Celsius temperature to Kelvin and Fahrenheit and return the results as an array ans = [kelvin, fahrenheit].\n\n    Return the array ans containing the Kelvin and Fahrenheit values. An answer within 10-5 of the actual value will be considered correct.\n    >>>celsius_to_kelvin_fahrenheit(37.50)\n    [310.65000,99.50000]\n    >>>celsius_to_kelvin_fahrenheit(122)\n    [395.15000,251.60000]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef celsius_to_kelvin_fahrenheit(celsius: float) -> List[float]:\n    \"\"\"\n    You are given a non-negative floating point number celsius representing a temperature rounded to two decimal places in Celsius degrees.\n\n    You need to convert the given Celsius temperature to Kelvin and Fahrenheit and return the results as an array ans = [kelvin, fahrenheit].\n\n    Return the array ans containing the Kelvin and Fahrenheit values. An answer within 10-5 of the actual value will be considered correct.\n    >>>celsius_to_kelvin_fahrenheit(37.50)\n    [310.65000,99.50000]\n    >>>celsius_to_kelvin_fahrenheit(122)\n    [395.15000,251.60000]\n    \"\"\"", "function_name": "celsius_to_kelvin_fahrenheit", "parameters": ["celsius"]}
{"id": 76, "difficulty_types": 4, "question": "from typing import List\n\n\ndef can_pooling(trips: List[List[int]]) -> bool:\n    \"\"\"In order to promote the development of tourism, City A organized a \"Chasing the Sunset\" event. The event encourages local residents to use their private cars to pick up passengers at fixed stops and then drive towards the sunset. In order to better allow passengers to observe the sunset, the vehicle cannot change direction.\n\n    An unoccupied standard small car driven by a local resident was taking part in the activity. Now provide the driver with an array of trips, trips[i] = [passengers_i, from_i, to_i], which means that in the i-th trip, there will be passengers_i passengers from the from_i station to the to_i station. Can you please help this driver see if he can complete this task with his private car without overloading? Please return a Boolean value.\n\n    1 <= trips.length <= 1000\n    trips[i].length == 3\n    1 <= passengers_i <= 100\n    0 <= from_i < to_i <= 1000\n\n    >>> can_pooling([[2,1,5],[3,3,7]])\n    false\n    >>> can_pooling([[2,1,5],[3,8,9]])\n    true\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef can_pooling(trips: List[List[int]]) -> bool:\n    \"\"\"In order to promote the development of tourism, City A organized a \"Chasing the Sunset\" event. The event encourages local residents to use their private cars to pick up passengers at fixed stops and then drive towards the sunset. In order to better allow passengers to observe the sunset, the vehicle cannot change direction.\n\n    An unoccupied standard small car driven by a local resident was taking part in the activity. Now provide the driver with an array of trips, trips[i] = [passengers_i, from_i, to_i], which means that in the i-th trip, there will be passengers_i passengers from the from_i station to the to_i station. Can you please help this driver see if he can complete this task with his private car without overloading? Please return a Boolean value.\n\n    1 <= trips.length <= 1000\n    trips[i].length == 3\n    1 <= passengers_i <= 100\n    0 <= from_i < to_i <= 1000\n\n    >>> can_pooling([[2,1,5],[3,3,7]])\n    false\n    >>> can_pooling([[2,1,5],[3,8,9]])\n    true\n    \"\"\"", "function_name": "can_pooling", "parameters": ["trips"]}
{"id": 77, "difficulty_types": 4, "question": "from typing import List\n\ndef store_water(rains: List[int]) -> List[int]:\n    \"\"\"In a region where water is extremely lacking, so that rainwater is one of their important sources of water. Whenever it rains, people in there need to store the rainwater. Local people will prepare n pots and place them everywhere, at first all the pots is empty. When the nth pot is empty before it rains then it will be filled with water. And if the nth pot is full before it rains then rain water of this day will be wasted. So their goal is to keep the pots empty before rainy day, so that any one of the pots can retain its function on the rainy day.W\n    Given an array of rains, when rain[i] > 0, it means that on day i, it will rain where the rain[i] pot is located. When rain[i] == 0, it means that day i is rainless. On days withiout rain, they can choose any of the pots to empty. Return a list named ans, the length of ans is the same as the length of rain, when rain[i]>0, ans[i]==-1, when rain[i]==0, ans[i] indicates the index of the pots that you choose to store. If there is more than one solution, return any one of them. If it causes water storage to be wasted, return an empty list. Note that if the empty pots are emptied, nothing will happen.\n    >>> store_water([1,2])\n    [-1,-1]\n    >>> store_water([1,0,2,0,1,2])\n    [-1,1,-1,2,-1,-1]\n    >>> store_water([1,2,0,1,1])\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef store_water(rains: List[int]) -> List[int]:\n    \"\"\"In a region where water is extremely lacking, so that rainwater is one of their important sources of water. Whenever it rains, people in there need to store the rainwater. Local people will prepare n pots and place them everywhere, at first all the pots is empty. When the nth pot is empty before it rains then it will be filled with water. And if the nth pot is full before it rains then rain water of this day will be wasted. So their goal is to keep the pots empty before rainy day, so that any one of the pots can retain its function on the rainy day.W\n    Given an array of rains, when rain[i] > 0, it means that on day i, it will rain where the rain[i] pot is located. When rain[i] == 0, it means that day i is rainless. On days withiout rain, they can choose any of the pots to empty. Return a list named ans, the length of ans is the same as the length of rain, when rain[i]>0, ans[i]==-1, when rain[i]==0, ans[i] indicates the index of the pots that you choose to store. If there is more than one solution, return any one of them. If it causes water storage to be wasted, return an empty list. Note that if the empty pots are emptied, nothing will happen.\n    >>> store_water([1,2])\n    [-1,-1]\n    >>> store_water([1,0,2,0,1,2])\n    [-1,1,-1,2,-1,-1]\n    >>> store_water([1,2,0,1,1])\n    []\n    \"\"\"", "function_name": "store_water", "parameters": ["rains"]}
{"id": 78, "difficulty_types": 4, "question": "from typing import List\n\ndef longest_wiggle_seq(price: List[int]) -> int:\n    \"\"\"In the stock market, stock prices always fluctuate frequently, going up and down. For those who speculate in stocks, every time when the price of a stock going up and down is a good opportunity for them to make a profit. For each stock, there will be a closing price every day. Closing prices may fluctuate repeatedly within a few days, or may continue to rise or fall. For the latter, speculators focus only on the beginning and end of a sustained rise or fall. Only the days of up and down swaps are worth investment to them. A sequence that contains only the days mentioned above is called a wiggle sequence. That is, the difference between neighboring numbers switches strictly between positive and negative numbers. For example, [1, 6, 3, 4, 2] is a strictly wiggle sequence, and [1, 4, 5, 3] is not a strictly wiggle sequence because the difference between the first three numbers is positive. Given a sequence of stock closing prices, return the length of the longest subsequence which can be taken as an wiggle sequence. A subsequence can be obtained by removing some elements from the original sequence, but keeping the rest of the elements in the original order.\n    >>> longest_wiggle_seq([1,6,3,4,2])\n    5\n    >>> longest_wiggle_seq([1,4,5,3])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef longest_wiggle_seq(price: List[int]) -> int:\n    \"\"\"In the stock market, stock prices always fluctuate frequently, going up and down. For those who speculate in stocks, every time when the price of a stock going up and down is a good opportunity for them to make a profit. For each stock, there will be a closing price every day. Closing prices may fluctuate repeatedly within a few days, or may continue to rise or fall. For the latter, speculators focus only on the beginning and end of a sustained rise or fall. Only the days of up and down swaps are worth investment to them. A sequence that contains only the days mentioned above is called a wiggle sequence. That is, the difference between neighboring numbers switches strictly between positive and negative numbers. For example, [1, 6, 3, 4, 2] is a strictly wiggle sequence, and [1, 4, 5, 3] is not a strictly wiggle sequence because the difference between the first three numbers is positive. Given a sequence of stock closing prices, return the length of the longest subsequence which can be taken as an wiggle sequence. A subsequence can be obtained by removing some elements from the original sequence, but keeping the rest of the elements in the original order.\n    >>> longest_wiggle_seq([1,6,3,4,2])\n    5\n    >>> longest_wiggle_seq([1,4,5,3])\n    3\n    \"\"\"", "function_name": "longest_wiggle_seq", "parameters": ["price"]}
{"id": 79, "difficulty_types": 4, "question": "from typing import List\n\ndef rank_task(tasks: List[List[int]]) ->List[int]:\n    \"\"\"Given a list of tasks named tasks, which contains n individual tasks, and the index of the list starting from 0 to n-1 denote the number of the tasks. Where tasks[i]=[start_time, process_time] means that the tasks start at start_time and take process_time to complete. The list will be sorted by start_time. You can only process one task at a moment. When there comes a task, if it is only one task, you need to execute it immediately to the end. And if there are multiple tasks piled up, you will choose the task with the shortest process_time to be executed first. And if there are multiple tasks with the same processing time, you will choose the task with the smallest index to be executed first. What you need to return is the order of the executing tasks.\n    >>> rank_task([[1,3],[3,5],[3,2]]\n    [0,2,1]\n    >>> rank_task([[2,10],[2,6],[3,5],[3,3],[3,1]])\n    [1,4,3,2,0]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef rank_task(tasks: List[List[int]]) ->List[int]:\n    \"\"\"Given a list of tasks named tasks, which contains n individual tasks, and the index of the list starting from 0 to n-1 denote the number of the tasks. Where tasks[i]=[start_time, process_time] means that the tasks start at start_time and take process_time to complete. The list will be sorted by start_time. You can only process one task at a moment. When there comes a task, if it is only one task, you need to execute it immediately to the end. And if there are multiple tasks piled up, you will choose the task with the shortest process_time to be executed first. And if there are multiple tasks with the same processing time, you will choose the task with the smallest index to be executed first. What you need to return is the order of the executing tasks.\n    >>> rank_task([[1,3],[3,5],[3,2]]\n    [0,2,1]\n    >>> rank_task([[2,10],[2,6],[3,5],[3,3],[3,1]])\n    [1,4,3,2,0]\n    \"\"\"", "function_name": "rank_task", "parameters": ["tasks"]}
{"id": 80, "difficulty_types": 4, "question": "from typing import List\n\n\ndef is_square(p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n    \"\"\"Given the coordinates of four points in the plane, please determine whether the four points can form a square.\n\n    The coordinate of a point pi is represented as [xi, yi].\n    p1.length == p2.length == p3.length == p4.length == 2\n    -10^4 <= xi, yi <= 10^4\n\n    >>> is_square([0,0], [1,1], [1,0], [0,1])\n    true\n    >>> is_square([0,0], [1,1], [1,0], [0,12])\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef is_square(p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n    \"\"\"Given the coordinates of four points in the plane, please determine whether the four points can form a square.\n\n    The coordinate of a point pi is represented as [xi, yi].\n    p1.length == p2.length == p3.length == p4.length == 2\n    -10^4 <= xi, yi <= 10^4\n\n    >>> is_square([0,0], [1,1], [1,0], [0,1])\n    true\n    >>> is_square([0,0], [1,1], [1,0], [0,12])\n    false\n    \"\"\"", "function_name": "is_square", "parameters": ["p1", "p2", "p3", "p4"]}
{"id": 81, "difficulty_types": 5, "question": "def is_isosceles_triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"Given the coordinates of three points in a two-dimensional plane, tell whether the figure formed\n    by connecting these three points is an isosceles triangle (which is a triangle that has at least two\n    sides of equal length).\n    >>> is_isosceles_triangle(0, 0, 1, 0, 1, 1)\n    True\n    >>> is_isosceles_triangle(0, 0, 2, 0, 2, 1)\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef is_isosceles_triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"Given the coordinates of three points in a two-dimensional plane, tell whether the figure formed\n    by connecting these three points is an isosceles triangle (which is a triangle that has at least two\n    sides of equal length).\n    >>> is_isosceles_triangle(0, 0, 1, 0, 1, 1)\n    True\n    >>> is_isosceles_triangle(0, 0, 2, 0, 2, 1)\n    False\n    \"\"\"", "function_name": "is_isosceles_triangle", "parameters": ["x1", "y1", "x2", "y2", "x3", "y3"]}
{"id": 82, "difficulty_types": 5, "question": "def decorate_ways(n: int, m: int) -> int:\n    \"\"\"For Christmas, various colored balls are to be tied to a string for decoration. There are a total\n    of n different colors of balls and a string that has m positions. Please fill all the positions on the\n    string with the condition that no more than two adjacent balls can have the same color. Given the\n    integers n and m, return the total number of possible decoration arrangements.\n    >>> decorate_ways(3, 2)\n    6\n    >>> decorate_ways(7, 3)\n    1344\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef decorate_ways(n: int, m: int) -> int:\n    \"\"\"For Christmas, various colored balls are to be tied to a string for decoration. There are a total\n    of n different colors of balls and a string that has m positions. Please fill all the positions on the\n    string with the condition that no more than two adjacent balls can have the same color. Given the\n    integers n and m, return the total number of possible decoration arrangements.\n    >>> decorate_ways(3, 2)\n    6\n    >>> decorate_ways(7, 3)\n    1344\n    \"\"\"", "function_name": "decorate_ways", "parameters": ["n", "m"]}
{"id": 83, "difficulty_types": 5, "question": "from typing import List\n\ndef four_dimensional_hyperplane(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"In a high-dimensional space, given an array nums containing n integers, the goal is to find all \n    quadruples (nums[i], nums[j], nums[k], nums[l]) that satisfy the following conditions: For 0 <= i, j, k, l < n,\n    the quadruple must form a hyperplane, i.e., nums[i] + nums[j] + nums[k] + nums[l] = target. Returns a list of\n    all quadruples (in any order) that meet these conditions.\n    >>> four_dimensional_hyperplane([1,1,1], 6)\n    []\n    >>> four_dimensional_hyperplane([1,2,3,4,5], 14)\n    [[2,3,4,5]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef four_dimensional_hyperplane(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\"In a high-dimensional space, given an array nums containing n integers, the goal is to find all \n    quadruples (nums[i], nums[j], nums[k], nums[l]) that satisfy the following conditions: For 0 <= i, j, k, l < n,\n    the quadruple must form a hyperplane, i.e., nums[i] + nums[j] + nums[k] + nums[l] = target. Returns a list of\n    all quadruples (in any order) that meet these conditions.\n    >>> four_dimensional_hyperplane([1,1,1], 6)\n    []\n    >>> four_dimensional_hyperplane([1,2,3,4,5], 14)\n    [[2,3,4,5]]\n    \"\"\"", "function_name": "four_dimensional_hyperplane", "parameters": ["nums", "target"]}
{"id": 84, "difficulty_types": 5, "question": "from typing import List\n\ndef min_moves_to_equal_array(nums: List[int]):\n    \"\"\"Given an integer array `nums`, you can select any number of elements in each move, and for each selected\n    element, decrease its value by one, while simultaneously increasing the value of its adjacent elements by one.\n    Determine the minimum number of moves required to make all the elements in the array `nums` equal. If it is\n    impossible to make all the elements equal, return -1.\n    >>> min_moves_to_equal_array([0, 1])\n    -1\n    >>> min_moves_to_equal_array([3,1,5])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef min_moves_to_equal_array(nums: List[int]):\n    \"\"\"Given an integer array `nums`, you can select any number of elements in each move, and for each selected\n    element, decrease its value by one, while simultaneously increasing the value of its adjacent elements by one.\n    Determine the minimum number of moves required to make all the elements in the array `nums` equal. If it is\n    impossible to make all the elements equal, return -1.\n    >>> min_moves_to_equal_array([0, 1])\n    -1\n    >>> min_moves_to_equal_array([3,1,5])\n    2\n    \"\"\"", "function_name": "min_moves_to_equal_array", "parameters": ["nums"]}
{"id": 85, "difficulty_types": 5, "question": "from typing import List\n\ndef pixelquad_number(matrix: List[List[int]]) -> int:\n    \"\"\"Given an m x n integer matrix grid consisting only of 0s and 1s, return the number of \"PixelQuads\" it contains.\n    A \"PixelQuad\" is an axis-aligned rectangle uniquely identified by four 1s at its corners within the matrix grid.\n    The term specifically emphasizes that we are interested in quadrilaterals marked by pixel-like elements, which in this\n    case are the 1s.\n\n    Note: The four 1s that define a PixelQuad must occupy distinct positions.\n    >>> pixelquad_number([[1,1,1,1,1,1]])\n    0\n    >>> pixelquad_number([[1,1,1],[1,1,1]])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef pixelquad_number(matrix: List[List[int]]) -> int:\n    \"\"\"Given an m x n integer matrix grid consisting only of 0s and 1s, return the number of \"PixelQuads\" it contains.\n    A \"PixelQuad\" is an axis-aligned rectangle uniquely identified by four 1s at its corners within the matrix grid.\n    The term specifically emphasizes that we are interested in quadrilaterals marked by pixel-like elements, which in this\n    case are the 1s.\n\n    Note: The four 1s that define a PixelQuad must occupy distinct positions.\n    >>> pixelquad_number([[1,1,1,1,1,1]])\n    0\n    >>> pixelquad_number([[1,1,1],[1,1,1]])\n    3\n    \"\"\"", "function_name": "pixelquad_number", "parameters": ["matrix"]}
{"id": 86, "difficulty_types": 5, "question": "def num_cuts(n: int) -> int:\n    \"\"\"\n    What is the minimum number of cuts needed to divide a circle into n equal slices, given the integer n, assuming the following valid cuts:\n    1. A cut defined by a straight line that touches two points on the circle's periphery and crosses through the center of the circle. \n    2. A cut represented by a straight line that touches one boundary point on the circle and its center?\n\n    >>> num_cuts(4)\n    2\n    Explanation:If n=4, the output should be 2. This implies that by cutting the circle twice right through its center, it can be divided into four equal slices.\n    >>> num_cuts(3)\n    3\n    Explanation: Assuming n=3, the output should be 3 since three cuts are required at minimum to divide the circle into three identical slices. It's important to understand that fewer than three cuts can't result in three equally sized and shaped slices. Also, note that the first cut doesn't separate the circle into different parts.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef num_cuts(n: int) -> int:\n    \"\"\"\n    What is the minimum number of cuts needed to divide a circle into n equal slices, given the integer n, assuming the following valid cuts:\n    1. A cut defined by a straight line that touches two points on the circle's periphery and crosses through the center of the circle. \n    2. A cut represented by a straight line that touches one boundary point on the circle and its center?\n\n    >>> num_cuts(4)\n    2\n    Explanation:If n=4, the output should be 2. This implies that by cutting the circle twice right through its center, it can be divided into four equal slices.\n    >>> num_cuts(3)\n    3\n    Explanation: Assuming n=3, the output should be 3 since three cuts are required at minimum to divide the circle into three identical slices. It's important to understand that fewer than three cuts can't result in three equally sized and shaped slices. Also, note that the first cut doesn't separate the circle into different parts.\n    \"\"\"", "function_name": "num_cuts", "parameters": ["n"]}
{"id": 87, "difficulty_types": 5, "question": "from typing import List\n\ndef card_game(cards: List[int]) -> bool:\n    \"\"\"\n    In a newly invented card game by Claire and David, there lies a sequence of n cards, each inscribed with a numerical figure representing its score. You receive an array of integers, called cards, where cards[i] corresponds to the score on the i-th card in the sequence.\n\n    Claire and David alternate turns, with Claire initiating the play. During their turn, a player must withdraw one card from the sequence.A player is defeated if after their card withdrawal, the aggregate scores of all the withdrawn cards result in a multiple of 3. Conversely, if the game concludes with the withdrawal of the final card and the cumulative score is not a multiple of 3, David claims victory immediately (even if it's Claire's turn).\n\n    Assuming optimal play from both participants, determine the winner by returning true if Claire is victorious, and false if David triumphs.\n\n    >>> card_game([2,1])\n    true\n    Explanation: The gameplay unfolds like this:\n    - Stage 1: Claire may pick any card.\n    - Stage 2: David takes the last card.\n    The total scores of the selected cards sum to 1 + 2 = 3, which is a multiple of 3. Thus, David is defeated and Claire triumphs.\n    >>> card_game([2])\n    false\n    Explanation: Claire selects the sole card, leading to a collective score of 2 for the taken cards.\n    With no cards left and the sum not being a multiple of 3, David is declared the winner.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef card_game(cards: List[int]) -> bool:\n    \"\"\"\n    In a newly invented card game by Claire and David, there lies a sequence of n cards, each inscribed with a numerical figure representing its score. You receive an array of integers, called cards, where cards[i] corresponds to the score on the i-th card in the sequence.\n\n    Claire and David alternate turns, with Claire initiating the play. During their turn, a player must withdraw one card from the sequence.A player is defeated if after their card withdrawal, the aggregate scores of all the withdrawn cards result in a multiple of 3. Conversely, if the game concludes with the withdrawal of the final card and the cumulative score is not a multiple of 3, David claims victory immediately (even if it's Claire's turn).\n\n    Assuming optimal play from both participants, determine the winner by returning true if Claire is victorious, and false if David triumphs.\n\n    >>> card_game([2,1])\n    true\n    Explanation: The gameplay unfolds like this:\n    - Stage 1: Claire may pick any card.\n    - Stage 2: David takes the last card.\n    The total scores of the selected cards sum to 1 + 2 = 3, which is a multiple of 3. Thus, David is defeated and Claire triumphs.\n    >>> card_game([2])\n    false\n    Explanation: Claire selects the sole card, leading to a collective score of 2 for the taken cards.\n    With no cards left and the sum not being a multiple of 3, David is declared the winner.\n    \"\"\"", "function_name": "card_game", "parameters": ["cards"]}
{"id": 88, "difficulty_types": 5, "question": "from typing import List\n\ndef two_probes(probeA: List[int], probeB: List[int]) -> str:\n    \"\"\"\n    A field study is in progress, with data being gathered in real-time. To validate the reliability of the observations, dual probes are deployed to simultaneously record measurements. You will be presented with two datasets: probeA and probeB. In these datasets, probeA[i] and probeB[i] denote the measurements recorded by each probe for the ith observation point.\n\n    Nonetheless, these probes are prone to malfunctions, potentially leading to the omission of measurements at a specific observation point (referred to as a dropout measurement).\n\n    When a measurement is omitted, all subsequent measurements to its right are shifted one position to the left, and the final measurement is substituted with an arbitrary number. This arbitrary number is assured to be different from the dropout measurement.\n\n    For instance, if the expected sequence of measurements is [1,2,3,4,5] and the measurement 3 is omitted, the probe's output might be [1,2,4,5,7] (the final value is arbitrary and not necessarily 7).\n    It is confirmed that only one of the probes may be malfunctioning. Your task is to identify the malfunctioning probe, return either \"A\" or \"B\". If both probes are functioning correctly, or if it is not feasible to ascertain which one is malfunctioning, then return \"NA\".\n\n    >>> two_probes([2,3,4,5], [2,1,3,4])\n    \"A\"\n    Explanation: Probe B has recorded all measurements accurately.\n    Probe A has omitted the measurement for the second observation point, and its final recorded measurement was substituted with 5.\n    >>> two_probes([2,2,2,2,2], [2,2,2,2,5])\n    -1\n    Explanation: It is not possible to determine which probe is malfunctioning.\n    Assuming the omitted measurement by either probe is the last one, then the sequence from the other probe could be a valid output.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef two_probes(probeA: List[int], probeB: List[int]) -> str:\n    \"\"\"\n    A field study is in progress, with data being gathered in real-time. To validate the reliability of the observations, dual probes are deployed to simultaneously record measurements. You will be presented with two datasets: probeA and probeB. In these datasets, probeA[i] and probeB[i] denote the measurements recorded by each probe for the ith observation point.\n\n    Nonetheless, these probes are prone to malfunctions, potentially leading to the omission of measurements at a specific observation point (referred to as a dropout measurement).\n\n    When a measurement is omitted, all subsequent measurements to its right are shifted one position to the left, and the final measurement is substituted with an arbitrary number. This arbitrary number is assured to be different from the dropout measurement.\n\n    For instance, if the expected sequence of measurements is [1,2,3,4,5] and the measurement 3 is omitted, the probe's output might be [1,2,4,5,7] (the final value is arbitrary and not necessarily 7).\n    It is confirmed that only one of the probes may be malfunctioning. Your task is to identify the malfunctioning probe, return either \"A\" or \"B\". If both probes are functioning correctly, or if it is not feasible to ascertain which one is malfunctioning, then return \"NA\".\n\n    >>> two_probes([2,3,4,5], [2,1,3,4])\n    \"A\"\n    Explanation: Probe B has recorded all measurements accurately.\n    Probe A has omitted the measurement for the second observation point, and its final recorded measurement was substituted with 5.\n    >>> two_probes([2,2,2,2,2], [2,2,2,2,5])\n    -1\n    Explanation: It is not possible to determine which probe is malfunctioning.\n    Assuming the omitted measurement by either probe is the last one, then the sequence from the other probe could be a valid output.\n    \"\"\"", "function_name": "two_probes", "parameters": ["probeA", "probeB"]}
{"id": 89, "difficulty_types": 5, "question": "from typing import List\n\ndef catalog_search(titles: List[str], query: str) -> int:\n    \"\"\"\n    Library Catalog Search. Imagine an alphabetically ordered catalogue of book titles where several entries may be blank. Devise a procedure to identify the index of a specific book title in this catalogue.\n\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"beta\")\n    -1\n    Explanation: As the book title is not present in the catalogue, the function should return -1.\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"gamma\")\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef catalog_search(titles: List[str], query: str) -> int:\n    \"\"\"\n    Library Catalog Search. Imagine an alphabetically ordered catalogue of book titles where several entries may be blank. Devise a procedure to identify the index of a specific book title in this catalogue.\n\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"beta\")\n    -1\n    Explanation: As the book title is not present in the catalogue, the function should return -1.\n    >>> catalog_search([\"alpha\", \"\", \"\", \"\", \"gamma\", \"\", \"\", \"kappa\", \"\", \"\", \"sigma\", \"\", \"\"], \"gamma\")\n    4\n    \"\"\"", "function_name": "catalog_search", "parameters": ["titles", "query"]}
{"id": 90, "difficulty_types": 5, "question": "def correct_slogan(s: str, p: str) -> bool:\n    \"\"\"In an activity to collect slogans, a slogan s and its requirement p are given. Please determine whether the slogan s satisfies the rules of p? p contains only lowercase English letters, '.', and '*', the rules are as follows:\n    '.' Matches any single character.\n    '*' Matches zero or more of the preceding element.\n\n    1 <= s.length <= 20\n    1 <= p.length <= 20\n    s contains only lowercase English letters.\n    It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n    >>> correct_slogan(\"ab\", \".*\")\n    true\n    >>> correct_slogan(\"aa\", \"a*\")\n    true\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef correct_slogan(s: str, p: str) -> bool:\n    \"\"\"In an activity to collect slogans, a slogan s and its requirement p are given. Please determine whether the slogan s satisfies the rules of p? p contains only lowercase English letters, '.', and '*', the rules are as follows:\n    '.' Matches any single character.\n    '*' Matches zero or more of the preceding element.\n\n    1 <= s.length <= 20\n    1 <= p.length <= 20\n    s contains only lowercase English letters.\n    It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n    >>> correct_slogan(\"ab\", \".*\")\n    true\n    >>> correct_slogan(\"aa\", \"a*\")\n    true\n    \"\"\"", "function_name": "correct_slogan", "parameters": ["s", "p"]}
{"id": 91, "difficulty_types": 5, "question": "def get_min_flip_cost_to_match(s1: str, s2: str, x: int) -> int:\n    \"\"\"\n    You are given two binary strings s1 and s2 of length n, and a positive integer x.\n\n    You can perform the following operations on s1 any number of times:\n\n    - Choose two indices i and j, and flip s1[i] and s1[j]. The cost is x.\n\n    - Choose an index i < n - 1, and flip s1[i] and s1[i+1]. The cost is 1.\n\n    Return the minimum total cost to make s1 equal to s2, or -1 if it's impossible.\n\n    Flipping a character means changing 0 to 1 or 1 to 0.\n    >>>get_min_flip_cost_to_match(\"1100\",\"0011\",3)\n    2\n    >>>get_min_flip_cost_to_match(\"100\",\"001\",2)\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_min_flip_cost_to_match(s1: str, s2: str, x: int) -> int:\n    \"\"\"\n    You are given two binary strings s1 and s2 of length n, and a positive integer x.\n\n    You can perform the following operations on s1 any number of times:\n\n    - Choose two indices i and j, and flip s1[i] and s1[j]. The cost is x.\n\n    - Choose an index i < n - 1, and flip s1[i] and s1[i+1]. The cost is 1.\n\n    Return the minimum total cost to make s1 equal to s2, or -1 if it's impossible.\n\n    Flipping a character means changing 0 to 1 or 1 to 0.\n    >>>get_min_flip_cost_to_match(\"1100\",\"0011\",3)\n    2\n    >>>get_min_flip_cost_to_match(\"100\",\"001\",2)\n    2\n    \"\"\"", "function_name": "get_min_flip_cost_to_match", "parameters": ["s1", "s2", "x"]}
{"id": 92, "difficulty_types": 5, "question": "def space_centered_text(text: str) -> str:\n    \"\"\"\n    Given a string text consisting of words and spaces, we first split the string into words based on spaces and count the number of spaces.\n\n    If there is only 1 word, we append all spaces to the end of that word.\n\n    Otherwise, we calculate the number of spaces between words as floor(spaces / (words - 1)). We then reconstruct the string by alternating words and spaces between words, appending any extra spaces to the end.\n    >>>space_centered_text(\" bo is the god \")\n    \"bo is the god  \"\n    >>>space_centered_text(\"we like the bo \")\n    \"we like the bo \"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef space_centered_text(text: str) -> str:\n    \"\"\"\n    Given a string text consisting of words and spaces, we first split the string into words based on spaces and count the number of spaces.\n\n    If there is only 1 word, we append all spaces to the end of that word.\n\n    Otherwise, we calculate the number of spaces between words as floor(spaces / (words - 1)). We then reconstruct the string by alternating words and spaces between words, appending any extra spaces to the end.\n    >>>space_centered_text(\" bo is the god \")\n    \"bo is the god  \"\n    >>>space_centered_text(\"we like the bo \")\n    \"we like the bo \"\n    \"\"\"", "function_name": "space_centered_text", "parameters": ["text"]}
{"id": 93, "difficulty_types": 5, "question": "def power(x: float, n: int) -> float:\n    \"\"\"\n    Implement the function pow(x, n), which calculates x raised to the power of n (i.e. xn).\n    >>>power(2.00000,0)\n    1.00000\n    >>>power(1.00000,1)\n    1.00000\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef power(x: float, n: int) -> float:\n    \"\"\"\n    Implement the function pow(x, n), which calculates x raised to the power of n (i.e. xn).\n    >>>power(2.00000,0)\n    1.00000\n    >>>power(1.00000,1)\n    1.00000\n    \"\"\"", "function_name": "power", "parameters": ["x", "n"]}
{"id": 94, "difficulty_types": 5, "question": "from typing import List\n\ndef min_divisor_below_threshold(nums: List[int], threshold: int) -> int:\n    \"\"\"\n    You are given an integer array nums and a positive integer threshold.\n\n    You need to pick a positive integer divisor, divide each number in the array by it, and sum the division results.\n\n    Return the minimum divisor such that the sum of the division results is less than or equal to the threshold.\n\n    Each division result should be rounded up.\n    >>>min_divisor_below_threshold([1,8],4)\n    3\n    >>>min_divisor_below_threshold([1,2,5,9],6)\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef min_divisor_below_threshold(nums: List[int], threshold: int) -> int:\n    \"\"\"\n    You are given an integer array nums and a positive integer threshold.\n\n    You need to pick a positive integer divisor, divide each number in the array by it, and sum the division results.\n\n    Return the minimum divisor such that the sum of the division results is less than or equal to the threshold.\n\n    Each division result should be rounded up.\n    >>>min_divisor_below_threshold([1,8],4)\n    3\n    >>>min_divisor_below_threshold([1,2,5,9],6)\n    5\n    \"\"\"", "function_name": "min_divisor_below_threshold", "parameters": ["nums", "threshold"]}
{"id": 95, "difficulty_types": 5, "question": "from typing import List\n\ndef allocate_to_minimize_max(n: int, quantities: List[int]) -> int:\n    \"\"\"\n    You are given an integer n representing the number of retail stores. There are m different products in total, where quantities[i] represents the amount of the ith product.\n\n    You need to allocate all products to the stores, following these rules:\n\n    Each store can have at most 1 type of product, but the amount can be anything.\n    After allocation, each store will be assigned some number of products (possibly 0). Let x be the maximum number of products assigned to any store. You want to minimize x as much as possible.\n    Return the minimum possible x after allocating products to minimize the maximum number assigned to any store.\n    >>>allocate_to_minimize_max(3,[1,4])\n    2\n    >>>allocate_to_minimize_max(4,[1.10])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef allocate_to_minimize_max(n: int, quantities: List[int]) -> int:\n    \"\"\"\n    You are given an integer n representing the number of retail stores. There are m different products in total, where quantities[i] represents the amount of the ith product.\n\n    You need to allocate all products to the stores, following these rules:\n\n    Each store can have at most 1 type of product, but the amount can be anything.\n    After allocation, each store will be assigned some number of products (possibly 0). Let x be the maximum number of products assigned to any store. You want to minimize x as much as possible.\n    Return the minimum possible x after allocating products to minimize the maximum number assigned to any store.\n    >>>allocate_to_minimize_max(3,[1,4])\n    2\n    >>>allocate_to_minimize_max(4,[1.10])\n    4\n    \"\"\"", "function_name": "allocate_to_minimize_max", "parameters": ["n", "quantities"]}
{"id": 96, "difficulty_types": 5, "question": "from typing import List\nimport collections\n\n\ndef land_shape(grid: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called grid. 0 means not planting wheat, and 1 means planting wheat. How many wheat-growing areas are there in Alice's backyard?\n\n    Note: Land blocks that are connected horizontally or vertically are considered to be the same area.\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 300\n    grid[i][j] is 0 or 1.\n\n    >>> land_shape([[1,1,1]])\n    1\n    >>> land_shape([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport collections\n\n\ndef land_shape(grid: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called grid. 0 means not planting wheat, and 1 means planting wheat. How many wheat-growing areas are there in Alice's backyard?\n\n    Note: Land blocks that are connected horizontally or vertically are considered to be the same area.\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 300\n    grid[i][j] is 0 or 1.\n\n    >>> land_shape([[1,1,1]])\n    1\n    >>> land_shape([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    3\n    \"\"\"", "function_name": "land_shape", "parameters": ["grid"]}
{"id": 97, "difficulty_types": 5, "question": "from typing import List\n\ndef same_network(ip_list: List[List[str]]) -> int:\n    \"\"\"Given two ip addresses and corresponding subnet masks, determine whether the two ip belong to the same network segment. The same network segment is defined as having the same network address, which can be obtained from the '&' operation of the ip address and its subnet mask. The process is as follows, first given a ip address 192.168.2.16 and its subnet mask 255.255.255.0. Their binary representations are 11000000.10101000.00000010.00010000 and 11111111.11111111.11111111.00000000, respectively. After '&' operation it becomes 11000000.10101000.00000010.00000000, then convert it to decimal. Finally, 192.168.2.0 is the network address. Note that the given ipv4 is possible not be a legal ip and the input needs to be verified.\n    >>> same_network([[\"192.168.1.1\", \"255.255.255.0\"], [\"192.168.1.2\", \"255.255.255.0\"]])\n    True\n    >>> same_network([[\"xs.0.0.0\", \"255.255.0.0\"], [\"1.a.0.0\", \"255.255.0.0\"]])\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef same_network(ip_list: List[List[str]]) -> int:\n    \"\"\"Given two ip addresses and corresponding subnet masks, determine whether the two ip belong to the same network segment. The same network segment is defined as having the same network address, which can be obtained from the '&' operation of the ip address and its subnet mask. The process is as follows, first given a ip address 192.168.2.16 and its subnet mask 255.255.255.0. Their binary representations are 11000000.10101000.00000010.00010000 and 11111111.11111111.11111111.00000000, respectively. After '&' operation it becomes 11000000.10101000.00000010.00000000, then convert it to decimal. Finally, 192.168.2.0 is the network address. Note that the given ipv4 is possible not be a legal ip and the input needs to be verified.\n    >>> same_network([[\"192.168.1.1\", \"255.255.255.0\"], [\"192.168.1.2\", \"255.255.255.0\"]])\n    True\n    >>> same_network([[\"xs.0.0.0\", \"255.255.0.0\"], [\"1.a.0.0\", \"255.255.0.0\"]])\n    False\n    \"\"\"", "function_name": "same_network", "parameters": ["ip_list"]}
{"id": 98, "difficulty_types": 5, "question": "from typing import List\n\ndef calculate_maximum_profit(roads:List[int])->int:\n    \"\"\"A beautiful island is under development and now needs a ring road to be built. The ring road is divided into n parts, and several construction companies are competing for the qualification to build it. In order to avoid domination by one company, adjacent parts of the road cannot be built by the same company. Given an array of non-negative integers, each value of which represents the profit that can be made from a particular section of road, calculate the maximum profit that can be made by a construction company.\n    >>> calculate_maximum_profit([2,3,2]\n    3\n    >>> calculate_maximum_profit([0])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef calculate_maximum_profit(roads:List[int])->int:\n    \"\"\"A beautiful island is under development and now needs a ring road to be built. The ring road is divided into n parts, and several construction companies are competing for the qualification to build it. In order to avoid domination by one company, adjacent parts of the road cannot be built by the same company. Given an array of non-negative integers, each value of which represents the profit that can be made from a particular section of road, calculate the maximum profit that can be made by a construction company.\n    >>> calculate_maximum_profit([2,3,2]\n    3\n    >>> calculate_maximum_profit([0])\n    0\n    \"\"\"", "function_name": "calculate_maximum_profit", "parameters": ["roads"]}
{"id": 99, "difficulty_types": 5, "question": "from typing import List\n\ndef is_cube(points: List[List[int]])->int:\n    \"\"\"Given 8 points in 3D space, determine whether a cube can be formed.\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,1,1]])\n    1\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,3,1]])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef is_cube(points: List[List[int]])->int:\n    \"\"\"Given 8 points in 3D space, determine whether a cube can be formed.\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,1,1]])\n    1\n    >>> is_cube([[0,0,0],[1,0,0],[0,1,0],[1,1,0],[0,0,1],[0,1,1],[1,0,1],[1,3,1]])\n    0\n    \"\"\"", "function_name": "is_cube", "parameters": ["points"]}
{"id": 100, "difficulty_types": 5, "question": "def population_growth(n: int) -> bool:\n    \"\"\"Assume that population growth strictly follows the formula x_k = x_0(1+r)^k. Among them, the population growth rate is r, this year's population is x_0, and the population after k years is x_k.\n\n    The population of Baba Country this year is strictly 1 billion, and the population growth rate is r=1. Given an integer n, can you help their king calculate whether there is a population n billion in a certain year? The answer returns a Boolean value.\n\n    -2^31-1 <= n <= 2^31-1\n\n    >>> population_growth(1)\n    true\n    >>> population_growth(3)\n    false\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef population_growth(n: int) -> bool:\n    \"\"\"Assume that population growth strictly follows the formula x_k = x_0(1+r)^k. Among them, the population growth rate is r, this year's population is x_0, and the population after k years is x_k.\n\n    The population of Baba Country this year is strictly 1 billion, and the population growth rate is r=1. Given an integer n, can you help their king calculate whether there is a population n billion in a certain year? The answer returns a Boolean value.\n\n    -2^31-1 <= n <= 2^31-1\n\n    >>> population_growth(1)\n    true\n    >>> population_growth(3)\n    false\n    \"\"\"", "function_name": "population_growth", "parameters": ["n"]}
{"id": 101, "difficulty_types": 6, "question": "from typing import List\n\n\ndef is_new_year(numbers: List[int]):\n    \"\"\"\n    Given a list containing four numbers. First, calculate the square of the first number.\n    For the second number, check if it is divisible by 3. If it is, add it to the result, otherwise subtract it.\n    Multiply the resulting value by the third number three times. For the fourth number, calculate the sum of its digits\n    and compare it with the first number. If the sum is greater, add the fourth number to the result,\n    otherwise keep the result unchanged. If the final result equals 2024, return the string \"Happy New Year\",\n    otherwise return \"Whoops\".\n    >>> is_new_year([2, 0, 2, 4])\n    \"Whoops\"\n    >>> is_new_year([3, 5, 6, 1160])\n    \"Happy New Year\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef is_new_year(numbers: List[int]):\n    \"\"\"\n    Given a list containing four numbers. First, calculate the square of the first number.\n    For the second number, check if it is divisible by 3. If it is, add it to the result, otherwise subtract it.\n    Multiply the resulting value by the third number three times. For the fourth number, calculate the sum of its digits\n    and compare it with the first number. If the sum is greater, add the fourth number to the result,\n    otherwise keep the result unchanged. If the final result equals 2024, return the string \"Happy New Year\",\n    otherwise return \"Whoops\".\n    >>> is_new_year([2, 0, 2, 4])\n    \"Whoops\"\n    >>> is_new_year([3, 5, 6, 1160])\n    \"Happy New Year\"\n    \"\"\"", "function_name": "is_new_year", "parameters": ["numbers"]}
{"id": 102, "difficulty_types": 6, "question": "from typing import List\n\ndef second_smaller_number(nums: List[int]) -> List[int]:\n    \"\"\"Given a non-negative number array, for each number in it, find the second number smaller\n    than it that appears after it. If none exists, represent it as -1.\n    >>> second_smaller_number([1,1,1])\n    [-1,-1,-1]\n    >>> second_smaller_number([6,5,4,3,2,1,0,3])\n    [4, 3, 2, 1, 0, -1, -1, -1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef second_smaller_number(nums: List[int]) -> List[int]:\n    \"\"\"Given a non-negative number array, for each number in it, find the second number smaller\n    than it that appears after it. If none exists, represent it as -1.\n    >>> second_smaller_number([1,1,1])\n    [-1,-1,-1]\n    >>> second_smaller_number([6,5,4,3,2,1,0,3])\n    [4, 3, 2, 1, 0, -1, -1, -1]\n    \"\"\"", "function_name": "second_smaller_number", "parameters": ["nums"]}
{"id": 103, "difficulty_types": 6, "question": "from typing import List\n\ndef stock_scheme(n: int, total_profit: int, cost: List[int], profit: List[int]):\n    \"\"\"You have n dollars and plan to purchase goods from a wholesale market. For the i-th item,\n    the cost price is cost[i] dollars, and selling it generates a profit of profit[i] dollars.\n    If your target total profit is total_profit, how many purchasing schemes do you have? Note that\n    you are not obligated to use all of your money. The answer can be large, return it modulo 10**9+7\n    >>> stock_scheme(5, 1, [1, 2], [4, 3])\n    3\n    >>> stock_scheme(5, 3, [2, 2], [2, 3])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef stock_scheme(n: int, total_profit: int, cost: List[int], profit: List[int]):\n    \"\"\"You have n dollars and plan to purchase goods from a wholesale market. For the i-th item,\n    the cost price is cost[i] dollars, and selling it generates a profit of profit[i] dollars.\n    If your target total profit is total_profit, how many purchasing schemes do you have? Note that\n    you are not obligated to use all of your money. The answer can be large, return it modulo 10**9+7\n    >>> stock_scheme(5, 1, [1, 2], [4, 3])\n    3\n    >>> stock_scheme(5, 3, [2, 2], [2, 3])\n    2\n    \"\"\"", "function_name": "stock_scheme", "parameters": ["n", "total_profit", "cost", "profit"]}
{"id": 104, "difficulty_types": 6, "question": "from typing import List\nimport heapq\n\ndef time_passing_door(arrival: List[int], state: List[int]) -> List[int]:\n    \"\"\"There are n people, numbered from 0 to n - 1. There is a door that each person can only pass through once,\n    either to enter or to leave, which takes one second.\n\n    You are given a non-decreasing integer array `arrival` of length n, where `arrival[i]` is the time when the\n    i-th person arrives at the door. You are also given an array `state` of length n, where `state[i]` is 0 if \n    the i-th person wishes to enter through the door, and 1 if they wish to leave.\n\n    If two or more people want to use the door at the same time, the following rules must be followed:\n\n    - If the door was not used in the previous second, the person who wants to leave will leave first.\n    - If the door was used to enter in the previous second, the person who wants to enter will enter first.\n    - If the door was used to leave in the previous second, the person who wants to leave will leave first.\n    - If multiple people want to go in the same direction (either all enter or all leave), the person with\n    the smallest number will pass through the door first.\n\n    Return an array `answer` of length n, where `answer[i]` is the time (in seconds) when the i-th person passes \n    through the door.\n\n    Note:\n    - Only one person can pass through the door each second.\n    - To follow the above rules, a person may wait near the door without passing through to enter or leave.\n    >>> time_pass_door([0,0,0], [1,0,1])\n    [0,2,1]\n    >>> time_pass_door([0,0,1,1,2,7,8,8,9,10,10,11,13], [1,1,1,1,1,1,1,1,1,1,1,1,1])\n    [0,1,2,3,4,7,8,9,10,11,12,13,14]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport heapq\n\ndef time_passing_door(arrival: List[int], state: List[int]) -> List[int]:\n    \"\"\"There are n people, numbered from 0 to n - 1. There is a door that each person can only pass through once,\n    either to enter or to leave, which takes one second.\n\n    You are given a non-decreasing integer array `arrival` of length n, where `arrival[i]` is the time when the\n    i-th person arrives at the door. You are also given an array `state` of length n, where `state[i]` is 0 if \n    the i-th person wishes to enter through the door, and 1 if they wish to leave.\n\n    If two or more people want to use the door at the same time, the following rules must be followed:\n\n    - If the door was not used in the previous second, the person who wants to leave will leave first.\n    - If the door was used to enter in the previous second, the person who wants to enter will enter first.\n    - If the door was used to leave in the previous second, the person who wants to leave will leave first.\n    - If multiple people want to go in the same direction (either all enter or all leave), the person with\n    the smallest number will pass through the door first.\n\n    Return an array `answer` of length n, where `answer[i]` is the time (in seconds) when the i-th person passes \n    through the door.\n\n    Note:\n    - Only one person can pass through the door each second.\n    - To follow the above rules, a person may wait near the door without passing through to enter or leave.\n    >>> time_pass_door([0,0,0], [1,0,1])\n    [0,2,1]\n    >>> time_pass_door([0,0,1,1,2,7,8,8,9,10,10,11,13], [1,1,1,1,1,1,1,1,1,1,1,1,1])\n    [0,1,2,3,4,7,8,9,10,11,12,13,14]\n    \"\"\"", "function_name": "time_passing_door", "parameters": ["arrival", "state"]}
{"id": 105, "difficulty_types": 6, "question": "from typing import List\n\ndef space_with_most_talks(n: int, talks: List[List[int]]) -> int:\n    \"\"\"You are an organizer of an international conference, now you have n rooms numbered from 0 to n - 1 and some talks \n    represented by a 2D array `talks` where `talks[i] = [start_i, end_i]` represents a scheduled presentation during the\n    half-closed interval `[start_i, end_i)` (including a and not including b), you need to assign talks to spaces according \n    to the following rules:\n    \n    - Assign each talk to the available space with the lowest number.\n    - If no spaces are available, delay the presentation until space is freed, its duration stays unchanged.\n    - When a space becomes available, prioritize presentations with earlier start times for assignment.\n    \n    Identify and return the number of the space that hosts the most presentations. In case of a tie, return \n    the space with the lowest number. Note that all the values of start_i are unique.\n    >>> space_with_most_talks(2, [[0,6],[1,7],[2,9],[3,5]])\n    0\n    >>> space_with_most_talks(3, [[1,15],[2,10],[3,7],[5,8],[6,9]])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef space_with_most_talks(n: int, talks: List[List[int]]) -> int:\n    \"\"\"You are an organizer of an international conference, now you have n rooms numbered from 0 to n - 1 and some talks \n    represented by a 2D array `talks` where `talks[i] = [start_i, end_i]` represents a scheduled presentation during the\n    half-closed interval `[start_i, end_i)` (including a and not including b), you need to assign talks to spaces according \n    to the following rules:\n    \n    - Assign each talk to the available space with the lowest number.\n    - If no spaces are available, delay the presentation until space is freed, its duration stays unchanged.\n    - When a space becomes available, prioritize presentations with earlier start times for assignment.\n    \n    Identify and return the number of the space that hosts the most presentations. In case of a tie, return \n    the space with the lowest number. Note that all the values of start_i are unique.\n    >>> space_with_most_talks(2, [[0,6],[1,7],[2,9],[3,5]])\n    0\n    >>> space_with_most_talks(3, [[1,15],[2,10],[3,7],[5,8],[6,9]])\n    1\n    \"\"\"", "function_name": "space_with_most_talks", "parameters": ["n", "talks"]}
{"id": 106, "difficulty_types": 6, "question": "from typing import List\n\ndef candy_probability(candy: List[int]) -> float:\n    \"\"\"\n    Given 2n candies of k different flavors. You will be given an integer array candies of size k where candies[i] is the number of candies of flavor i.\n\n    All the candies will be mixed uniformly at random, then we will allocate the first n candies to the first bowl and the remaining n candies to the second bowl (Please read the explanation of the second sample carefully).\n\n    Please be aware that the two bowls are viewed as distinct. For example, if we have two candies of flavors a and b, and two bowls [] and (), then the allocation [a] (b) is viewed differently than the allocation [b] (a) (Please read the explanation of the first sample carefully).\n\n    Return the likelihood of the two bowls containing the same quantity of distinct candies. Answers with a 10-5 deviation from the actual value will be considered correct.\n\n    Example 1:\n    >>> candy_probability([1,1])\n    1.00000\n    Explanation: There are only 2 ways to divide the candies evenly:\n    - A candy of flavor 1 to bowl 1 and a candy of flavor 2 to bowl 2\n    - A candy of flavor 2 to bowl 1 and a candy of flavor 1 to bowl 2\n    In both ways, the number of distinct flavors in each bowl is equivalent. The probability is 2/2 = 1\n\n    Example 2:\n    >>> candy_probability([2,1,1])\n    0.66667\n    Explanation: We have the set of candies [1, 1, 2, 3]\n    This set of candies will be mixed again randomly and we may have one of the 12 different mixes with equal possibilities (i.e. 1/12):\n    [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\n    After that, we add the first two candies to the first bowl and the second two candies to the second bowl.\n    We can see that 8 of these 12 alternate random allocations have the same number of distinct flavors of candies in each bowl.\n    Probability is 8/12 = 0.66667\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef candy_probability(candy: List[int]) -> float:\n    \"\"\"\n    Given 2n candies of k different flavors. You will be given an integer array candies of size k where candies[i] is the number of candies of flavor i.\n\n    All the candies will be mixed uniformly at random, then we will allocate the first n candies to the first bowl and the remaining n candies to the second bowl (Please read the explanation of the second sample carefully).\n\n    Please be aware that the two bowls are viewed as distinct. For example, if we have two candies of flavors a and b, and two bowls [] and (), then the allocation [a] (b) is viewed differently than the allocation [b] (a) (Please read the explanation of the first sample carefully).\n\n    Return the likelihood of the two bowls containing the same quantity of distinct candies. Answers with a 10-5 deviation from the actual value will be considered correct.\n\n    Example 1:\n    >>> candy_probability([1,1])\n    1.00000\n    Explanation: There are only 2 ways to divide the candies evenly:\n    - A candy of flavor 1 to bowl 1 and a candy of flavor 2 to bowl 2\n    - A candy of flavor 2 to bowl 1 and a candy of flavor 1 to bowl 2\n    In both ways, the number of distinct flavors in each bowl is equivalent. The probability is 2/2 = 1\n\n    Example 2:\n    >>> candy_probability([2,1,1])\n    0.66667\n    Explanation: We have the set of candies [1, 1, 2, 3]\n    This set of candies will be mixed again randomly and we may have one of the 12 different mixes with equal possibilities (i.e. 1/12):\n    [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\n    After that, we add the first two candies to the first bowl and the second two candies to the second bowl.\n    We can see that 8 of these 12 alternate random allocations have the same number of distinct flavors of candies in each bowl.\n    Probability is 8/12 = 0.66667\n    \"\"\"", "function_name": "candy_probability", "parameters": ["candy"]}
{"id": 107, "difficulty_types": 6, "question": "from typing import List\n\ndef mini_operations(shells: str) -> int:\n    \"\"\"\n    Dylan embarked on a spring journey to the beach, where he gathered a mix of blue and green seashells along the shore. Upon returning, he organized these seashells into a beginning set he named \"shells,\" which exclusively includes the lowercase letters 'b' for blue shells and 'g' for green shells. The letter 'b' signifies a blue shell, while 'g' stands for a green shell. Dylan aspired to reorganize the shells in his set into three segments: \"blue, green, blue.\" While each segment might vary in quantity, they must all contain at least one shell. Dylan can switch out a blue shell for a green one or vice versa whenever he rearranges the set. What is the minimum number of switches Dylan must perform to achieve his desired sorting?\n\n    >>>  mini_operations(\"bbbgggbbbgggbb\")\n    2\n    >>>  mini_operations(\"bgb\")\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef mini_operations(shells: str) -> int:\n    \"\"\"\n    Dylan embarked on a spring journey to the beach, where he gathered a mix of blue and green seashells along the shore. Upon returning, he organized these seashells into a beginning set he named \"shells,\" which exclusively includes the lowercase letters 'b' for blue shells and 'g' for green shells. The letter 'b' signifies a blue shell, while 'g' stands for a green shell. Dylan aspired to reorganize the shells in his set into three segments: \"blue, green, blue.\" While each segment might vary in quantity, they must all contain at least one shell. Dylan can switch out a blue shell for a green one or vice versa whenever he rearranges the set. What is the minimum number of switches Dylan must perform to achieve his desired sorting?\n\n    >>>  mini_operations(\"bbbgggbbbgggbb\")\n    2\n    >>>  mini_operations(\"bgb\")\n    0\n    \"\"\"", "function_name": "mini_operations", "parameters": ["shells"]}
{"id": 108, "difficulty_types": 6, "question": "from collections import defaultdict\nfrom typing import List\n\n\ndef find_word_on_board(board: List[List[str]], words: List[str]) -> List[str]:\n    \"\"\"Given an alphabet 'board' of m*n, please use the letters on the alphabet board to form words. Words can only be connected horizontally and vertically, and cannot be reused in a word. Please output the words that can be formed with the letters on the alphabet board and exist in the list 'words'.\n\n    m == board.length\n    n == board[i].length\n    1 <= m, n <= 12\n    board[i][j] is a lowercase English letter.\n    1 <= words.length <= 3 * 104\n    1 <= words[i].length <= 10\n    words[i] consists of lowercase English letters.\n    All the strings of words are unique.\n\n    >>> find_word_on_board([[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], [\"oath\",\"pea\",\"eat\",\"rain\"])\n    [\"eat\",\"oath\"]\n    >>> find_word_on_board([[\"a\",\"b\"],[\"c\",\"d\"]], [\"abcb\"])\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef find_word_on_board(board: List[List[str]], words: List[str]) -> List[str]:\n    \"\"\"Given an alphabet 'board' of m*n, please use the letters on the alphabet board to form words. Words can only be connected horizontally and vertically, and cannot be reused in a word. Please output the words that can be formed with the letters on the alphabet board and exist in the list 'words'.\n\n    m == board.length\n    n == board[i].length\n    1 <= m, n <= 12\n    board[i][j] is a lowercase English letter.\n    1 <= words.length <= 3 * 104\n    1 <= words[i].length <= 10\n    words[i] consists of lowercase English letters.\n    All the strings of words are unique.\n\n    >>> find_word_on_board([[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], [\"oath\",\"pea\",\"eat\",\"rain\"])\n    [\"eat\",\"oath\"]\n    >>> find_word_on_board([[\"a\",\"b\"],[\"c\",\"d\"]], [\"abcb\"])\n    []\n    \"\"\"", "function_name": "find_word_on_board", "parameters": ["board", "words"]}
{"id": 109, "difficulty_types": 6, "question": "from functools import lru_cache\nfrom typing import List\n\n\ndef clean_up_fallen_leaves(grid: List[List[int]]) -> int:\n    \"\"\"There are two robots sweeping fallen leaves in an m*n matrix grid. The number in each grid represents the number of fallen leaves in the area. Robot 1 starts from the upper left corner grid (0,0), and robot 2 starts from the upper right corner grid (0, n-1). Please follow the rules below to return the maximum number of fallen leaves that robots can collect.\n\n    1. Starting from grid (i,j), the robot can move to grid (i+1, j-1), (i+1, j) or (i+1, j+1).\n    2. The robot collects all fallen leaves wherever it passes.\n    3. When robots arrive at the same grid at the same time, only one of them will work.\n    4. The robot cannot move outside of the grid at any time.\n    5. The robot must finally reach the bottom row of the grid.\n\n    m == grid.length\n    n == grid[i].length\n    2 <= m, n <= 70\n    0 <= grid[i][j] <= 100\n\n    >>> clean_up_fallen_leaves([[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]])\n    28\n    >>> clean_up_fallen_leaves([[1,1],[1,1]])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom functools import lru_cache\nfrom typing import List\n\n\ndef clean_up_fallen_leaves(grid: List[List[int]]) -> int:\n    \"\"\"There are two robots sweeping fallen leaves in an m*n matrix grid. The number in each grid represents the number of fallen leaves in the area. Robot 1 starts from the upper left corner grid (0,0), and robot 2 starts from the upper right corner grid (0, n-1). Please follow the rules below to return the maximum number of fallen leaves that robots can collect.\n\n    1. Starting from grid (i,j), the robot can move to grid (i+1, j-1), (i+1, j) or (i+1, j+1).\n    2. The robot collects all fallen leaves wherever it passes.\n    3. When robots arrive at the same grid at the same time, only one of them will work.\n    4. The robot cannot move outside of the grid at any time.\n    5. The robot must finally reach the bottom row of the grid.\n\n    m == grid.length\n    n == grid[i].length\n    2 <= m, n <= 70\n    0 <= grid[i][j] <= 100\n\n    >>> clean_up_fallen_leaves([[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]])\n    28\n    >>> clean_up_fallen_leaves([[1,1],[1,1]])\n    4\n    \"\"\"", "function_name": "clean_up_fallen_leaves", "parameters": ["grid"]}
{"id": 110, "difficulty_types": 6, "question": "from typing import List\n\ndef max_perimeter(grid:List[List[int]])->int:\n    \"\"\"Given a row x col two-dimensional grid map grid, where grid[i][j] = 1 indicates land and grid[i][j] = 0 indicates water. Islands are always surrounded by water, and each island can only be formed by adjacent land connections in a horizontal and/or vertical direction. There is no `` lake'' in the island. (\"Lake\" means that the waters are within the island and are not connected to the waters around the island). The grid is a square with a side length of 1. There are several islands in this body of water. Find the longest perimeter of all the islands and return its perimeter.\n    >>> max_perimeter([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    8\n    >>> max_perimeter([[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]])\n    16\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_perimeter(grid:List[List[int]])->int:\n    \"\"\"Given a row x col two-dimensional grid map grid, where grid[i][j] = 1 indicates land and grid[i][j] = 0 indicates water. Islands are always surrounded by water, and each island can only be formed by adjacent land connections in a horizontal and/or vertical direction. There is no `` lake'' in the island. (\"Lake\" means that the waters are within the island and are not connected to the waters around the island). The grid is a square with a side length of 1. There are several islands in this body of water. Find the longest perimeter of all the islands and return its perimeter.\n    >>> max_perimeter([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]])\n    8\n    >>> max_perimeter([[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]])\n    16\n    \"\"\"", "function_name": "max_perimeter", "parameters": ["grid"]}
{"id": 111, "difficulty_types": 6, "question": "from typing import List\n\ndef make_two_equivalent(a: List[int], b: List[int]) -> str:\n    \"\"\" Define an operation as follows\n    1. choose range [l, r] such that  0 <= l <= r <= len(a),\n    2 . for i in range(l, r), set a[i] = max(a[l], a[l+1],..,a[r]).\n    Suppose we can do any times of above operations (maybe zero), determin if we can make list a equal to list b.\n    Output \"YES\" if we can, otherwise \"No\"\n    >>> make_two_equivalent([1, 2, 3, 2, 4], [1, 3, 3, 2, 4])\n    YES\n    >>> make_two_equivalent([1, 1, 2], [2, 1, 2])\n    NO\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef make_two_equivalent(a: List[int], b: List[int]) -> str:\n    \"\"\" Define an operation as follows\n    1. choose range [l, r] such that  0 <= l <= r <= len(a),\n    2 . for i in range(l, r), set a[i] = max(a[l], a[l+1],..,a[r]).\n    Suppose we can do any times of above operations (maybe zero), determin if we can make list a equal to list b.\n    Output \"YES\" if we can, otherwise \"No\"\n    >>> make_two_equivalent([1, 2, 3, 2, 4], [1, 3, 3, 2, 4])\n    YES\n    >>> make_two_equivalent([1, 1, 2], [2, 1, 2])\n    NO\n    \"\"\"", "function_name": "make_two_equivalent", "parameters": ["a", "b"]}
{"id": 112, "difficulty_types": 6, "question": "def magic_equal(x: int, y: int) -> int:\n    \"\"\"\n    You are given two positive integers x and y.\n    In one operation, you can choose to do one of the following:\n\n    If x is a multiple of 11, divide x by 11.\n    If x is a multiple of 5, divide x by 5.\n    Decrement x by 1.\n    Increment x by 1.\n\n    Return the minimum number of operations needed to make x and y equal.\n    >>>magic_equal(26,1)\n    3\n    >>>magic_equal(25,30)\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef magic_equal(x: int, y: int) -> int:\n    \"\"\"\n    You are given two positive integers x and y.\n    In one operation, you can choose to do one of the following:\n\n    If x is a multiple of 11, divide x by 11.\n    If x is a multiple of 5, divide x by 5.\n    Decrement x by 1.\n    Increment x by 1.\n\n    Return the minimum number of operations needed to make x and y equal.\n    >>>magic_equal(26,1)\n    3\n    >>>magic_equal(25,30)\n    5\n    \"\"\"", "function_name": "magic_equal", "parameters": ["x", "y"]}
{"id": 113, "difficulty_types": 6, "question": "from typing import List\n\n\ndef maximum_num_of_blocks(area: List[int], mass: List[int]) -> int:\n    \"\"\"When playing with building blocks, we usually place small and light building blocks on top of larger and heavier building blocks. Given the mass and area of ​​the building blocks, please calculate the maximum number of building blocks that can be stacked?\n\n    height.length == weight.length <= 10000\n\n    >>> maximum_num_of_blocks([65,70,56,75,60,68], [100,150,90,190,95,110])\n    6\n    >>> maximum_num_of_blocks([6, 7, 8], [2, 1, 6])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef maximum_num_of_blocks(area: List[int], mass: List[int]) -> int:\n    \"\"\"When playing with building blocks, we usually place small and light building blocks on top of larger and heavier building blocks. Given the mass and area of ​​the building blocks, please calculate the maximum number of building blocks that can be stacked?\n\n    height.length == weight.length <= 10000\n\n    >>> maximum_num_of_blocks([65,70,56,75,60,68], [100,150,90,190,95,110])\n    6\n    >>> maximum_num_of_blocks([6, 7, 8], [2, 1, 6])\n    2\n    \"\"\"", "function_name": "maximum_num_of_blocks", "parameters": ["area", "mass"]}
{"id": 114, "difficulty_types": 6, "question": "from typing import List\n\n\ndef maximal_rectangle(matrix: List[List[str]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called matrix. 0 means not planting wheat, and 1 means planting wheat.What is the largest rectangular area for growing wheat in Alice's backyard? Return its area.\n\n    rows == matrix.length\n    cols == matrix[0].length\n    1 <= row, cols <= 200\n    matrix[i][j] is 0 or 1.\n\n    >>> maximal_rectangle([[1,1,1]])\n    3\n    >>> maximal_rectangle([[1,0,1],[1,1,0],[1,1,0]])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef maximal_rectangle(matrix: List[List[str]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called matrix. 0 means not planting wheat, and 1 means planting wheat.What is the largest rectangular area for growing wheat in Alice's backyard? Return its area.\n\n    rows == matrix.length\n    cols == matrix[0].length\n    1 <= row, cols <= 200\n    matrix[i][j] is 0 or 1.\n\n    >>> maximal_rectangle([[1,1,1]])\n    3\n    >>> maximal_rectangle([[1,0,1],[1,1,0],[1,1,0]])\n    4\n    \"\"\"", "function_name": "maximal_rectangle", "parameters": ["matrix"]}
{"id": 115, "difficulty_types": 6, "question": "from typing import Optional, List\n\n\ndef lexical_order(n: int) -> Optional[List[int]]:\n    \"\"\"\n    Given an integer n, return all numbers in the range [1, n] according to the following requirements:\n    If n is odd, odd numbers should come before even numbers, and both odd and even numbers should be sorted in lexicographical order.\n    If n is even, even numbers should come before odd numbers, and both even and odd numbers should be sorted in lexicographical order.\n    If n is less than or equal to zero, return empty list.\n\n    >>> lexical_order(13)\n    [1, 11, 13, 3, 5, 7, 9, 10, 12, 2, 4, 6, 8]\n    >>> lexical_order(0)\n    []\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import Optional, List\n\n\ndef lexical_order(n: int) -> Optional[List[int]]:\n    \"\"\"\n    Given an integer n, return all numbers in the range [1, n] according to the following requirements:\n    If n is odd, odd numbers should come before even numbers, and both odd and even numbers should be sorted in lexicographical order.\n    If n is even, even numbers should come before odd numbers, and both even and odd numbers should be sorted in lexicographical order.\n    If n is less than or equal to zero, return empty list.\n\n    >>> lexical_order(13)\n    [1, 11, 13, 3, 5, 7, 9, 10, 12, 2, 4, 6, 8]\n    >>> lexical_order(0)\n    []\n    \"\"\"", "function_name": "lexical_order", "parameters": ["n"]}
{"id": 116, "difficulty_types": 6, "question": "from typing import List\n\n\ndef find_days(pencils: List[int], k: int) -> int:\n    \"\"\"\n    There are n pencils arranged in a row, each with a unique number, and initially, all of them are unused. Every day, an employee will take away one pencil, until after n days, all the pencils are taken.\n\n    Given an array of pencils of length n, where pencils[i] = x indicates that on the (i+1)th day, the employee will take the pencil at position x, with i starting from 0 and x starting from 1.\n\n    Now, given an integer k, please calculate the number of days needed to reach the situation where exactly two pencils are taken, and there are k untouched pencils between them. If this situation cannot be reached, return -1.\n\n    Hints:\n\n    + n == pencils.length\n    + 1 <= n <= 2 * 10^4\n    + 1 <= pencils[i] <= n\n    + pencils is a permutation of numbers from 1 to n\n    + 0 <= k <= 2 * 10^4\n\n    >>> find_days([1,3,2], 1)\n    2\n    >>> find_days([1,2,3], 1)\n    -1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef find_days(pencils: List[int], k: int) -> int:\n    \"\"\"\n    There are n pencils arranged in a row, each with a unique number, and initially, all of them are unused. Every day, an employee will take away one pencil, until after n days, all the pencils are taken.\n\n    Given an array of pencils of length n, where pencils[i] = x indicates that on the (i+1)th day, the employee will take the pencil at position x, with i starting from 0 and x starting from 1.\n\n    Now, given an integer k, please calculate the number of days needed to reach the situation where exactly two pencils are taken, and there are k untouched pencils between them. If this situation cannot be reached, return -1.\n\n    Hints:\n\n    + n == pencils.length\n    + 1 <= n <= 2 * 10^4\n    + 1 <= pencils[i] <= n\n    + pencils is a permutation of numbers from 1 to n\n    + 0 <= k <= 2 * 10^4\n\n    >>> find_days([1,3,2], 1)\n    2\n    >>> find_days([1,2,3], 1)\n    -1\n    \"\"\"", "function_name": "find_days", "parameters": ["pencils", "k"]}
{"id": 117, "difficulty_types": 6, "question": "from typing import List\n\ndef milk_deliver(scores: List[int]) -> int:\n    \"\"\"You're a milk delivery man, there are n families on a street, they order milk from you all year round and each family gets a milk credit. \n    Now it's an annual reward, the milk company gives gifts to these families based on their credit, you need to distribute the gifts according to the following rules:\n    -Each family is allocated at least one gift.\n    -Neighboring families with higher points will get more gifts.\n    -Prepare the least number of gifts\n    Please calculate how many gifts these families need.\n    >>> milk_deliver([1,1,2])\n    4\n    >>> milk_deliver([3,1,2])\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef milk_deliver(scores: List[int]) -> int:\n    \"\"\"You're a milk delivery man, there are n families on a street, they order milk from you all year round and each family gets a milk credit. \n    Now it's an annual reward, the milk company gives gifts to these families based on their credit, you need to distribute the gifts according to the following rules:\n    -Each family is allocated at least one gift.\n    -Neighboring families with higher points will get more gifts.\n    -Prepare the least number of gifts\n    Please calculate how many gifts these families need.\n    >>> milk_deliver([1,1,2])\n    4\n    >>> milk_deliver([3,1,2])\n    5\n    \"\"\"", "function_name": "milk_deliver", "parameters": ["scores"]}
{"id": 118, "difficulty_types": 6, "question": "from typing import List\n\ndef get_treasure(labyrinth: List[List[str]], clues: str) -> int:\n    \"\"\"There is a treasure in an M*N labyrinth that is marked with a sign at each location, which is a letter or a number. You inadvertently get a clue to the treasure. This clue does not necessarily lead to the final treasure, but you can only move forward according to this clue. At the same time, the hint has some invalid information, such as non-numbers and characters. There's also a rule that you can't go through a grid again after you've gone through it. If you can execute all the valid parts of the hint, the hint is correct and you return True, if the hint breaks in the middle, you return False!\n    >>> get_treasure([[\"A\",\"B\",\"C\",\"5\"],[\"11\",\"6\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"2\"]], \"#AB%CCED\")\n    True\n    >>> get_treasure([\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"], \"ABCB\")\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_treasure(labyrinth: List[List[str]], clues: str) -> int:\n    \"\"\"There is a treasure in an M*N labyrinth that is marked with a sign at each location, which is a letter or a number. You inadvertently get a clue to the treasure. This clue does not necessarily lead to the final treasure, but you can only move forward according to this clue. At the same time, the hint has some invalid information, such as non-numbers and characters. There's also a rule that you can't go through a grid again after you've gone through it. If you can execute all the valid parts of the hint, the hint is correct and you return True, if the hint breaks in the middle, you return False!\n    >>> get_treasure([[\"A\",\"B\",\"C\",\"5\"],[\"11\",\"6\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"2\"]], \"#AB%CCED\")\n    True\n    >>> get_treasure([\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"], \"ABCB\")\n    False\n    \"\"\"", "function_name": "get_treasure", "parameters": ["labyrinth", "clues"]}
{"id": 119, "difficulty_types": 6, "question": "from typing import List\n\ndef extract_numbers(s:str)->List[int]:\n    \"\"\"Given a sentence which contain multiple numbers. The numbers are not next to each other and they are represented in English format. For example, 123 is represented as \"One Hundred Twenty Three\". Return the numbers in the sentence in a list.\n    >>> extract_numbers(\"One hundred twenty three\")\n    [123]\n    >>> extract_numbers(\"One hundred and one thousand\")\n    [100,1000]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef extract_numbers(s:str)->List[int]:\n    \"\"\"Given a sentence which contain multiple numbers. The numbers are not next to each other and they are represented in English format. For example, 123 is represented as \"One Hundred Twenty Three\". Return the numbers in the sentence in a list.\n    >>> extract_numbers(\"One hundred twenty three\")\n    [123]\n    >>> extract_numbers(\"One hundred and one thousand\")\n    [100,1000]\n    \"\"\"", "function_name": "extract_numbers", "parameters": ["s"]}
{"id": 120, "difficulty_types": 6, "question": "from typing import List\n\n\ndef rectangular_land(mat: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called mat. 0 means not planting wheat, and 1 means planting wheat. How many different rectangular plots of land are there in Alice's backyard that are all planted with wheat?\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 150\n    grid[i][j] is 0 or 1.\n\n    >>> rectangular_land([[1,1,1]])\n    6\n    >>> rectangular_land([[1,0,1],[1,1,0],[1,1,0]])276\n    13\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef rectangular_land(mat: List[List[int]]) -> int:\n    \"\"\"There is an open space in Alice's backyard. She divided the open space into m*n parts, and each part can choose to grow wheat or not. Alice's strategy for using m*n pieces of land is now given, represented by a binary matrix called mat. 0 means not planting wheat, and 1 means planting wheat. How many different rectangular plots of land are there in Alice's backyard that are all planted with wheat?\n\n    m == grid.length\n    n == grid[i].length\n    1 <= m, n <= 150\n    grid[i][j] is 0 or 1.\n\n    >>> rectangular_land([[1,1,1]])\n    6\n    >>> rectangular_land([[1,0,1],[1,1,0],[1,1,0]])276\n    13\n    \"\"\"", "function_name": "rectangular_land", "parameters": ["mat"]}
{"id": 121, "difficulty_types": 7, "question": "def custom_sort(dictionary):\n    \"\"\"Given a dictionary with non-negative integers as keys, sort the key-value pairs in the\n    dictionary where the values are strings. Arrange these key-value pairs in descending order\n    based on the count of ones in the ternary representation of the keys. In case of equal\n    counts of ones, arrange them in ascending order based on the alphabetical order of the values.\n    Return the sorted list.\n    >>> custom_sort({1: 'apple', 2: 123, 3: 'banana', 4: 'orange', 5: 456, 6: 'cherry'})\n    [(4, 'orange'), (1, 'apple'), (3, 'banana'), (6, 'cherry')]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef custom_sort(dictionary):\n    \"\"\"Given a dictionary with non-negative integers as keys, sort the key-value pairs in the\n    dictionary where the values are strings. Arrange these key-value pairs in descending order\n    based on the count of ones in the ternary representation of the keys. In case of equal\n    counts of ones, arrange them in ascending order based on the alphabetical order of the values.\n    Return the sorted list.\n    >>> custom_sort({1: 'apple', 2: 123, 3: 'banana', 4: 'orange', 5: 456, 6: 'cherry'})\n    [(4, 'orange'), (1, 'apple'), (3, 'banana'), (6, 'cherry')]\n    \"\"\"", "function_name": "custom_sort", "parameters": ["dictionary"]}
{"id": 122, "difficulty_types": 7, "question": "import re\n\n\ndef find_float(data: str):\n    \"\"\"Find the unique floating-point number in the given string, with priority given\n    to those represented in scientific notation.\n    >>> find_float(\"Its height is 1e6 kilometer\")\n    \"1e6\"\n    >>> find_float(\"Its weight is 123. gram\")\n    \"123.\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nimport re\n\n\ndef find_float(data: str):\n    \"\"\"Find the unique floating-point number in the given string, with priority given\n    to those represented in scientific notation.\n    >>> find_float(\"Its height is 1e6 kilometer\")\n    \"1e6\"\n    >>> find_float(\"Its weight is 123. gram\")\n    \"123.\"\n    \"\"\"", "function_name": "find_float", "parameters": ["data"]}
{"id": 123, "difficulty_types": 7, "question": "from typing import List\n\ndef replace_non_coprime_number(nums: List[int]) -> List[int]:\n    \"\"\"You are given an array of integers nums. Perform the following steps:\n\n    Find any two adjacent numbers in nums that are non-coprime.\n    If no such numbers are found, stop the process.\n    Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).\n    Repeat this process as long as you keep finding two adjacent non-coprime numbers.\n    Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will\n    lead to the same result.\n\n    The test cases are generated such that the values in the final array are less than or equal to 108.\n\n    Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.\n    >>> replace_non_coprime_number([6,4,3,2,7,6,2])\n    [12,7,6]\n    >>> replace_non_coprime_number([5,5,4,3,8,7,3])\n    [5,4,3,8,7,3]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef replace_non_coprime_number(nums: List[int]) -> List[int]:\n    \"\"\"You are given an array of integers nums. Perform the following steps:\n\n    Find any two adjacent numbers in nums that are non-coprime.\n    If no such numbers are found, stop the process.\n    Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).\n    Repeat this process as long as you keep finding two adjacent non-coprime numbers.\n    Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will\n    lead to the same result.\n\n    The test cases are generated such that the values in the final array are less than or equal to 108.\n\n    Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.\n    >>> replace_non_coprime_number([6,4,3,2,7,6,2])\n    [12,7,6]\n    >>> replace_non_coprime_number([5,5,4,3,8,7,3])\n    [5,4,3,8,7,3]\n    \"\"\"", "function_name": "replace_non_coprime_number", "parameters": ["nums"]}
{"id": 124, "difficulty_types": 7, "question": "def get_specific_permutation(N: int, M: int) -> str:\n    \"\"\"Given a integer N (1 <= N <= 9), there are n! different permutations that can be formed using digits less than or equal to N. If we arrange these permutations in ascending order, for example, when n=3, the 1st result is 123, and the 6th result is 321. Please find the Mth permutation when given the values of N and the positive integer M.\n    >>> get_specific_permutation(3, 6)\n    \"321\"\n    >>> get_specific_permutation(4, 9)\n    \"2314\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_specific_permutation(N: int, M: int) -> str:\n    \"\"\"Given a integer N (1 <= N <= 9), there are n! different permutations that can be formed using digits less than or equal to N. If we arrange these permutations in ascending order, for example, when n=3, the 1st result is 123, and the 6th result is 321. Please find the Mth permutation when given the values of N and the positive integer M.\n    >>> get_specific_permutation(3, 6)\n    \"321\"\n    >>> get_specific_permutation(4, 9)\n    \"2314\"\n    \"\"\"", "function_name": "get_specific_permutation", "parameters": ["N", "M"]}
{"id": 125, "difficulty_types": 7, "question": "from typing import List\n\ndef generate_string_permutation(raw_data: List[str], replaced_str: str) -> int:\n    \"\"\"Generate all permutations of raw_data elements, excluding one element per permutation.\n    Replace up to three occurrences of replaced_str in each permutation with an empty string.\n    Return the number of unique strings.\n    >>> generate_string_permutation([\"a\", \"b\", \"c\"], \"a\")\n    4\n    >>> generate_string_permutation([\"hello\", \"world\", \"rock\", \"great\"], \"or\")\n    24\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef generate_string_permutation(raw_data: List[str], replaced_str: str) -> int:\n    \"\"\"Generate all permutations of raw_data elements, excluding one element per permutation.\n    Replace up to three occurrences of replaced_str in each permutation with an empty string.\n    Return the number of unique strings.\n    >>> generate_string_permutation([\"a\", \"b\", \"c\"], \"a\")\n    4\n    >>> generate_string_permutation([\"hello\", \"world\", \"rock\", \"great\"], \"or\")\n    24\n    \"\"\"", "function_name": "generate_string_permutation", "parameters": ["raw_data", "replaced_str"]}
{"id": 126, "difficulty_types": 7, "question": "from typing import List\n\ndef string_count(s: str, queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a string 's' that is indexed starting at 0, and a two-dimensional array 'queries' consisting of pairs [li, ri], which defines a substring in 's' from the index 'li' to 'ri' inclusive, determine the number of substrings for each query that have matching starting and ending characters. Provide the results as an array 'ans', where 'ans[i]' corresponds to the query 'queries[i]'. A substring is considered to have matching ends if the first and last characters are identical.\n\n    >>> string_count(\"abcaab\", [[0,0],[1,4],[2,5],[0,5]])\n    [1,5,5,10]\n    >>> string_count(\"abcd\", [[0,3]])\n    [4]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef string_count(s: str, queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a string 's' that is indexed starting at 0, and a two-dimensional array 'queries' consisting of pairs [li, ri], which defines a substring in 's' from the index 'li' to 'ri' inclusive, determine the number of substrings for each query that have matching starting and ending characters. Provide the results as an array 'ans', where 'ans[i]' corresponds to the query 'queries[i]'. A substring is considered to have matching ends if the first and last characters are identical.\n\n    >>> string_count(\"abcaab\", [[0,0],[1,4],[2,5],[0,5]])\n    [1,5,5,10]\n    >>> string_count(\"abcd\", [[0,3]])\n    [4]\n    \"\"\"", "function_name": "string_count", "parameters": ["s", "queries"]}
{"id": 127, "difficulty_types": 7, "question": "from typing import List\n\ndef max_score(prices: List[int]) -> int:\n    \"\"\"\n    Given a 1-indexed integer array, 'prices', where each element represents the price of a certain stock on the corresponding day, you are required to linearly select some elements from the array. A subsequence selection is termed 'indexes', a 1-indexed integer sub-array of length k. \n\n    This selection is considered 'linear' if the difference between the price of the 'j-th' stock and the price of the '(j - 1)'-th stock is equal to the difference between their indexes in each case, where 1 < j <= k.\n\n    The total achievable score from a given selection is the sum of all prices corresponding to the selected indexes. \n\n    What is the maximum score attainable through linear selection?\n\n    >>> max_score([1,5,3,7,8])\n    20\n    >>> max_score([5,6,7,8,9])\n    35\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_score(prices: List[int]) -> int:\n    \"\"\"\n    Given a 1-indexed integer array, 'prices', where each element represents the price of a certain stock on the corresponding day, you are required to linearly select some elements from the array. A subsequence selection is termed 'indexes', a 1-indexed integer sub-array of length k. \n\n    This selection is considered 'linear' if the difference between the price of the 'j-th' stock and the price of the '(j - 1)'-th stock is equal to the difference between their indexes in each case, where 1 < j <= k.\n\n    The total achievable score from a given selection is the sum of all prices corresponding to the selected indexes. \n\n    What is the maximum score attainable through linear selection?\n\n    >>> max_score([1,5,3,7,8])\n    20\n    >>> max_score([5,6,7,8,9])\n    35\n    \"\"\"", "function_name": "max_score", "parameters": ["prices"]}
{"id": 128, "difficulty_types": 7, "question": "from typing import List\n\ndef list_identifier(ids: List[int], parentIds: List[int], target: int) -> List[int]:\n    \"\"\"\n    In a digital family tree, there are n individuals each assigned a unique identifier. The connections between them are tracked with two arrays, ids and parentIds, with ids[i] representing each individual's unique identifier, and parentIds[i] representing the identifier of their immediate ancestor.\n\n    Every individual in this tree is a descendant with exactly one ancestor, except for the founding ancestor who has no predecessor, indicated by a parentIds[i] value of 0.\n\n    When a lineage is set to be discontinued, both the target ancestor and all of their descendants are to be included in the discontinuation.\n\n    You are to determine the set of identifiers for those who are discontinued when an individual with a specific identifier is targeted. List all identifiers of the individuals in this lineage. The order of the list is not important.\n\n    >>> list_identifier([1,3,10,5], [3,0,5,3], 5)\n    [5,10]\n    >>> list_identifier([1], [0], 1)\n    [1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef list_identifier(ids: List[int], parentIds: List[int], target: int) -> List[int]:\n    \"\"\"\n    In a digital family tree, there are n individuals each assigned a unique identifier. The connections between them are tracked with two arrays, ids and parentIds, with ids[i] representing each individual's unique identifier, and parentIds[i] representing the identifier of their immediate ancestor.\n\n    Every individual in this tree is a descendant with exactly one ancestor, except for the founding ancestor who has no predecessor, indicated by a parentIds[i] value of 0.\n\n    When a lineage is set to be discontinued, both the target ancestor and all of their descendants are to be included in the discontinuation.\n\n    You are to determine the set of identifiers for those who are discontinued when an individual with a specific identifier is targeted. List all identifiers of the individuals in this lineage. The order of the list is not important.\n\n    >>> list_identifier([1,3,10,5], [3,0,5,3], 5)\n    [5,10]\n    >>> list_identifier([1], [0], 1)\n    [1]\n    \"\"\"", "function_name": "list_identifier", "parameters": ["ids", "parentIds", "target"]}
{"id": 129, "difficulty_types": 7, "question": "def divide_string(s: str) -> bool:\n    \"\"\"\n    A string composed entirely of repetitive characters is known as a uniform string.\n\n    For example, \"1111\" and \"33\" are uniform strings. By contrast, \"123\" is not a uniform string.\n    Rule: Given a numeric string s, divide the string into some uniform substrings, such that there is exactly one uniform substring of length 2 and all other uniform substrings have a length of 3.\n\n    If the string s can be divided according to the rule mentioned above, return true; otherwise, return false.\n\n    Substrings are sequences of contiguous characters within the original string.\n    >>> divide_string(\"000111000\")\n    false\n    >>> divide_string(\"00011111222\")\n    true\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef divide_string(s: str) -> bool:\n    \"\"\"\n    A string composed entirely of repetitive characters is known as a uniform string.\n\n    For example, \"1111\" and \"33\" are uniform strings. By contrast, \"123\" is not a uniform string.\n    Rule: Given a numeric string s, divide the string into some uniform substrings, such that there is exactly one uniform substring of length 2 and all other uniform substrings have a length of 3.\n\n    If the string s can be divided according to the rule mentioned above, return true; otherwise, return false.\n\n    Substrings are sequences of contiguous characters within the original string.\n    >>> divide_string(\"000111000\")\n    false\n    >>> divide_string(\"00011111222\")\n    true\n    \"\"\"", "function_name": "divide_string", "parameters": ["s"]}
{"id": 130, "difficulty_types": 7, "question": "from typing import List\n\ndef count_subs(s: str, count: int) -> int:\n    \"\"\"\n    Given a string `s` that starts with an index of 0 and only includes lowercase English letters, along with an integer `count`, your task is to find and return the number of substrings within `s` where each type of letter appears exactly `count` times. This would make it an equal-count substring. Note that a substring is a contiguous sequence of non-empty characters within the string.\n\n    >>> count_subs(\"aaabcbbcc\", 3)\n    3\n    Explanation:The output is 3 because there are 3 equal-count substrings. The first substring starts at index 0 and ends at index 2 is \"aaa\", where the letter \"a\" appears exactly 3 times. The second substring starts at index 3 and ends at index 8 is \"bcbbcc\", the letters \"b\" and \"c\" each appear exactly 3 times. The third substring starts at index 0 and ends at index 8 is \"aaabcbbcc\", the letters \"a\", \"b\", and \"c\" each appear exactly 3 times.\n    >>> count_subs(\"abcd\", 2)\n    0\n    Explanation:The output is 0 because each type of letter in `s` appears fewer times than `count`, therefore, there are no equal-count substrings in `s`, so we return 0.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef count_subs(s: str, count: int) -> int:\n    \"\"\"\n    Given a string `s` that starts with an index of 0 and only includes lowercase English letters, along with an integer `count`, your task is to find and return the number of substrings within `s` where each type of letter appears exactly `count` times. This would make it an equal-count substring. Note that a substring is a contiguous sequence of non-empty characters within the string.\n\n    >>> count_subs(\"aaabcbbcc\", 3)\n    3\n    Explanation:The output is 3 because there are 3 equal-count substrings. The first substring starts at index 0 and ends at index 2 is \"aaa\", where the letter \"a\" appears exactly 3 times. The second substring starts at index 3 and ends at index 8 is \"bcbbcc\", the letters \"b\" and \"c\" each appear exactly 3 times. The third substring starts at index 0 and ends at index 8 is \"aaabcbbcc\", the letters \"a\", \"b\", and \"c\" each appear exactly 3 times.\n    >>> count_subs(\"abcd\", 2)\n    0\n    Explanation:The output is 0 because each type of letter in `s` appears fewer times than `count`, therefore, there are no equal-count substrings in `s`, so we return 0.\n    \"\"\"", "function_name": "count_subs", "parameters": ["s", "count"]}
{"id": 131, "difficulty_types": 7, "question": "from typing import List\n\ndef remove_add_game(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a 1-indexed integer array `prices`, where `prices[i]` is the price of a certain stock on day `i`, your task is to linearly select some elements from `prices`.\n\n    A selection `indexes`, where `indexes` is a 1-indexed integer array of length `k` and is a subsequence of the array `[1, 2, ..., n]`, is considered linear if the following condition holds:\n\n    For each `1 < j <= k`, `prices[indexes[j]] - prices[indexes[j - 1]] == indexes[j] - indexes[j - 1]`.\n\n    A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none), without changing the relative order of the remaining elements.\n\n    The score of selecting `indexes` is equal to the sum of the following array: `[prices[indexes[1]], prices[indexes[2]], ..., prices[indexes[k]]`.\n\n    Return the maximum score of a linear selection.\n    >>>remove_add_game([1,2,3,4])\n    [2,1,4,3]\n    >>>remove_add_game([10,1])\n    [10,1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef remove_add_game(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a 1-indexed integer array `prices`, where `prices[i]` is the price of a certain stock on day `i`, your task is to linearly select some elements from `prices`.\n\n    A selection `indexes`, where `indexes` is a 1-indexed integer array of length `k` and is a subsequence of the array `[1, 2, ..., n]`, is considered linear if the following condition holds:\n\n    For each `1 < j <= k`, `prices[indexes[j]] - prices[indexes[j - 1]] == indexes[j] - indexes[j - 1]`.\n\n    A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none), without changing the relative order of the remaining elements.\n\n    The score of selecting `indexes` is equal to the sum of the following array: `[prices[indexes[1]], prices[indexes[2]], ..., prices[indexes[k]]`.\n\n    Return the maximum score of a linear selection.\n    >>>remove_add_game([1,2,3,4])\n    [2,1,4,3]\n    >>>remove_add_game([10,1])\n    [10,1]\n    \"\"\"", "function_name": "remove_add_game", "parameters": ["nums"]}
{"id": 132, "difficulty_types": 7, "question": "from typing import List\n\ndef minimum_coins(prices: List[int]) -> int:\n    \"\"\"\n    You're in a fruit market where each fruit has a price in gold coins, listed in prices. (index start from 1)\n    The market offers a special deal: when you buy a fruit for its price, you get the next few fruits for free.\n    The number of free fruits you get is equal to the number of the fruit you bought.\n    For example, if you buy the 3rd fruit, you get the next 3 fruits for free.\n    You can also choose to buy a fruit that's available for free to get its corresponding number of free fruits.\n    Your goal is to find out the least amount of gold coins needed to buy all the fruits.\n    >>>minimum_coins([1,2,3,4])\n    3\n    >>>minimum_coins([2, 1])\n    2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef minimum_coins(prices: List[int]) -> int:\n    \"\"\"\n    You're in a fruit market where each fruit has a price in gold coins, listed in prices. (index start from 1)\n    The market offers a special deal: when you buy a fruit for its price, you get the next few fruits for free.\n    The number of free fruits you get is equal to the number of the fruit you bought.\n    For example, if you buy the 3rd fruit, you get the next 3 fruits for free.\n    You can also choose to buy a fruit that's available for free to get its corresponding number of free fruits.\n    Your goal is to find out the least amount of gold coins needed to buy all the fruits.\n    >>>minimum_coins([1,2,3,4])\n    3\n    >>>minimum_coins([2, 1])\n    2\n    \"\"\"", "function_name": "minimum_coins", "parameters": ["prices"]}
{"id": 133, "difficulty_types": 7, "question": "from typing import List\n\ndef find_words(words: List[str], x: str) -> List[int]:\n    \"\"\"\n    Given an array of strings called 'words' and a character 'x', return an array of indexes.\n    These indexes should correspond to the words in 'words' that contain the character 'x'.\n    The order of indexes in the return array does not matter.\n    >>>find_words([\"bo\",\"god\"], \"o\")\n    [0,1]\n    >>>find_words([\"guo\",\"god\"], \"g\")\n    [0,1]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_words(words: List[str], x: str) -> List[int]:\n    \"\"\"\n    Given an array of strings called 'words' and a character 'x', return an array of indexes.\n    These indexes should correspond to the words in 'words' that contain the character 'x'.\n    The order of indexes in the return array does not matter.\n    >>>find_words([\"bo\",\"god\"], \"o\")\n    [0,1]\n    >>>find_words([\"guo\",\"god\"], \"g\")\n    [0,1]\n    \"\"\"", "function_name": "find_words", "parameters": ["words", "x"]}
{"id": 134, "difficulty_types": 7, "question": "from typing import List\n\ndef split_to_digits(nums: List[int]) -> List[int]:\n    \"\"\"\n    You are given a positive integer array nums.\n\n    You need to return an array answer, where you split each integer in nums into its digits and place them in answer in the same order as they appeared in nums.\n\n    To split an integer into digits means to arrange the digits of the integer in the original order they appeared in to form an array.\n    >>>split_to_digits([1,2,3,4])\n    [1,2,3,4]\n    >>>split_to_digits([22,13,45])\n    [2,2,1,3,4,5]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef split_to_digits(nums: List[int]) -> List[int]:\n    \"\"\"\n    You are given a positive integer array nums.\n\n    You need to return an array answer, where you split each integer in nums into its digits and place them in answer in the same order as they appeared in nums.\n\n    To split an integer into digits means to arrange the digits of the integer in the original order they appeared in to form an array.\n    >>>split_to_digits([1,2,3,4])\n    [1,2,3,4]\n    >>>split_to_digits([22,13,45])\n    [2,2,1,3,4,5]\n    \"\"\"", "function_name": "split_to_digits", "parameters": ["nums"]}
{"id": 135, "difficulty_types": 7, "question": "from typing import List\n\ndef combine_items_by_value(items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    You are given two 2D integer arrays items1 and items2 representing two sets of items. Each array items has the following properties:\n\n    - items[i] = [valuei, weighti] where valuei is the value of the ith item and weighti is the weight of the ith item.\n\n    - The values of the items in items are unique.\n\n    Return a 2D array ret where ret[i] = [valuei, weighti] such that weighti is the sum of the weights of all items with value equal to valuei.\n    >>>combine_items_by_value([[1,1]],[[2,1]])\n    [[1,1],[2,1]]\n    >>>combine_items_by_value([[1,3],[2,2]][[1,2]])\n    [[1,5],[2,2]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef combine_items_by_value(items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    You are given two 2D integer arrays items1 and items2 representing two sets of items. Each array items has the following properties:\n\n    - items[i] = [valuei, weighti] where valuei is the value of the ith item and weighti is the weight of the ith item.\n\n    - The values of the items in items are unique.\n\n    Return a 2D array ret where ret[i] = [valuei, weighti] such that weighti is the sum of the weights of all items with value equal to valuei.\n    >>>combine_items_by_value([[1,1]],[[2,1]])\n    [[1,1],[2,1]]\n    >>>combine_items_by_value([[1,3],[2,2]][[1,2]])\n    [[1,5],[2,2]]\n    \"\"\"", "function_name": "combine_items_by_value", "parameters": ["items1", "items2"]}
{"id": 136, "difficulty_types": 7, "question": "def count_full_weeks(year: int, month: int) -> int:\n    \"\"\"\n    Given a specific year 'year' and month 'month', return the number of complete weeks in that month.\n\n    Note:\n    + 1583 <= year <= 2100\n    + 1 <= month <= 12\n\n    >>> count_full_weeks(2024, 1)\n    4\n    >>> count_full_weeks(2000, 2)\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef count_full_weeks(year: int, month: int) -> int:\n    \"\"\"\n    Given a specific year 'year' and month 'month', return the number of complete weeks in that month.\n\n    Note:\n    + 1583 <= year <= 2100\n    + 1 <= month <= 12\n\n    >>> count_full_weeks(2024, 1)\n    4\n    >>> count_full_weeks(2000, 2)\n    3\n    \"\"\"", "function_name": "count_full_weeks", "parameters": ["year", "month"]}
{"id": 137, "difficulty_types": 7, "question": "def work_or_rest(day: str) -> str:\n    \"\"\"There is a Chinese saying called \"go fishing for three days and dry the nets for two days\", it means work by fits and starts. \n    Someone has been working this way since January 1, 2000. I want to know if this person is working or resting on a certain day, please help me solve it.\n    Given a day, the format is yyyy-mm-dd, retrun his state \"work\" or \"rest\". if the input date does not exist or early than January 1, 2000, return \"illegal input\"\n    >>> work_or_rest(\"2000-1-2\")\n    \"work\"\n    >>> work_or_rest(\"2000-1-5\")\n    \"rest\"\n    >>> work_or_rest(\"2000-2-30\")\n    \"illegal input\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef work_or_rest(day: str) -> str:\n    \"\"\"There is a Chinese saying called \"go fishing for three days and dry the nets for two days\", it means work by fits and starts. \n    Someone has been working this way since January 1, 2000. I want to know if this person is working or resting on a certain day, please help me solve it.\n    Given a day, the format is yyyy-mm-dd, retrun his state \"work\" or \"rest\". if the input date does not exist or early than January 1, 2000, return \"illegal input\"\n    >>> work_or_rest(\"2000-1-2\")\n    \"work\"\n    >>> work_or_rest(\"2000-1-5\")\n    \"rest\"\n    >>> work_or_rest(\"2000-2-30\")\n    \"illegal input\"\n    \"\"\"", "function_name": "work_or_rest", "parameters": ["day"]}
{"id": 138, "difficulty_types": 7, "question": "from typing import List\n\ndef k_closest(points: List[List[int]], target_point:List[int], k: int) -> List[int]:\n    \"\"\"Given an array called points, where points[i]=[xi, yi, zi] denotes a point in X-Y-Z space, and xi, yi, zi are integers. Also given a target point, return the k closest points to the target point, where distance is defined as euclidean distance. The returned k points should be sorted in ascending order by distance, and if there are points with equal distances, the one with smaller dictionary order by xiyizi is prioritized.\n    >>> k_closest([[1,3,1],[-2,2,1]], [1,2,1], 1)\n    [[1,3,1]]\n    >>> k_closest([[3,3,3],[4,4,4],[-5,-5,-5]], [0,0,0], 2)\n    [[3,3,3], [4,4,4]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef k_closest(points: List[List[int]], target_point:List[int], k: int) -> List[int]:\n    \"\"\"Given an array called points, where points[i]=[xi, yi, zi] denotes a point in X-Y-Z space, and xi, yi, zi are integers. Also given a target point, return the k closest points to the target point, where distance is defined as euclidean distance. The returned k points should be sorted in ascending order by distance, and if there are points with equal distances, the one with smaller dictionary order by xiyizi is prioritized.\n    >>> k_closest([[1,3,1],[-2,2,1]], [1,2,1], 1)\n    [[1,3,1]]\n    >>> k_closest([[3,3,3],[4,4,4],[-5,-5,-5]], [0,0,0], 2)\n    [[3,3,3], [4,4,4]]\n    \"\"\"", "function_name": "k_closest", "parameters": ["points", "target_point", "k"]}
{"id": 139, "difficulty_types": 7, "question": "def restore_message_order(message: str) -> str:\n    \"\"\"In an encrypted communication system, messages are encoded by reversing the order of words.\n    However, these messages may be distorted by leading, trailing, or excessive spaces during transmission.\n    Your task is to develop an algorithm to clean and restore these messages, ensuring that words appear\n    in the correct order and are separated by only a single space between them.\n    >>> restore_message_order(\" apple \")\n    apple\n    >>> restore_message_order(\"   world hello\")\n    hello world\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef restore_message_order(message: str) -> str:\n    \"\"\"In an encrypted communication system, messages are encoded by reversing the order of words.\n    However, these messages may be distorted by leading, trailing, or excessive spaces during transmission.\n    Your task is to develop an algorithm to clean and restore these messages, ensuring that words appear\n    in the correct order and are separated by only a single space between them.\n    >>> restore_message_order(\" apple \")\n    apple\n    >>> restore_message_order(\"   world hello\")\n    hello world\n    \"\"\"", "function_name": "restore_message_order", "parameters": ["message"]}
{"id": 140, "difficulty_types": 7, "question": "from typing import List\n\ndef hamming_distance_sum(integers: List[int]) -> int:\n    \"\"\"Given an integer array nums, calculate the total number of positions at which the corresponding bits\n    differ amongst all possible pairs of the numbers within the array. Note that every integer is smaller\n    than 1000000000.\n    >>> hamming_distance_sum([1, 2, 3])\n    4\n    >>> hamming_distance_sum([20, 4, 2])\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef hamming_distance_sum(integers: List[int]) -> int:\n    \"\"\"Given an integer array nums, calculate the total number of positions at which the corresponding bits\n    differ amongst all possible pairs of the numbers within the array. Note that every integer is smaller\n    than 1000000000.\n    >>> hamming_distance_sum([1, 2, 3])\n    4\n    >>> hamming_distance_sum([20, 4, 2])\n    6\n    \"\"\"", "function_name": "hamming_distance_sum", "parameters": ["integers"]}
{"id": 141, "difficulty_types": 1, "question": "from typing import List\n\ndef manhattan_project(n: int, time: int) -> int:\n    \"\"\"\n    During the height of the Manhattan Project, a group of n scientists were working tirelessly on the development of the atomic bomb. The project was shrouded in secrecy, and the scientists were stationed in a secure facility, arranged in a line numbered from 1 to n.\n\n    Initially, the first scientist in the line possessed a highly classified document containing crucial information related to the project. For security reasons, this document needed to be shared among the scientists for analysis and modifications. Every second, the scientist holding the document would pass it to the next scientist standing in the line. Once the document reached the last scientist in the line, the direction would change, and they would continue passing the document in the opposite direction.\n\n    For example, once the document reached the nth scientist, they would pass it to the (n - 1)th scientist, then to the (n - 2)th scientist, and so on, reversing the direction of the document's flow.\n\n    Given the two positive integers n and time, representing the number of scientists and the elapsed time in seconds, respectively, the task was to determine the index of the scientist holding the classified document after time seconds.\n\n    This background, set against the backdrop of the Manhattan Project, maintains the same logic as the original problem while adding a historical context and heightening the sense of secrecy and importance surrounding the document being passed among the scientists.\n\n    >>> manhattan_project(4, 5) \n    2\n    Rationale: The whole process can be denoted as: 1 -> 2 -> 3 -> 4 -> 3 -> 2, so the result is 2. \n    >>> manhattan_project(3, 2)\n    3\n    Rationale: The whole process can be denoted as: 1 -> 2 -> 3, so the result is 3.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef manhattan_project(n: int, time: int) -> int:\n    \"\"\"\n    During the height of the Manhattan Project, a group of n scientists were working tirelessly on the development of the atomic bomb. The project was shrouded in secrecy, and the scientists were stationed in a secure facility, arranged in a line numbered from 1 to n.\n\n    Initially, the first scientist in the line possessed a highly classified document containing crucial information related to the project. For security reasons, this document needed to be shared among the scientists for analysis and modifications. Every second, the scientist holding the document would pass it to the next scientist standing in the line. Once the document reached the last scientist in the line, the direction would change, and they would continue passing the document in the opposite direction.\n\n    For example, once the document reached the nth scientist, they would pass it to the (n - 1)th scientist, then to the (n - 2)th scientist, and so on, reversing the direction of the document's flow.\n\n    Given the two positive integers n and time, representing the number of scientists and the elapsed time in seconds, respectively, the task was to determine the index of the scientist holding the classified document after time seconds.\n\n    This background, set against the backdrop of the Manhattan Project, maintains the same logic as the original problem while adding a historical context and heightening the sense of secrecy and importance surrounding the document being passed among the scientists.\n\n    >>> manhattan_project(4, 5) \n    2\n    Rationale: The whole process can be denoted as: 1 -> 2 -> 3 -> 4 -> 3 -> 2, so the result is 2. \n    >>> manhattan_project(3, 2)\n    3\n    Rationale: The whole process can be denoted as: 1 -> 2 -> 3, so the result is 3.\n    \"\"\"", "function_name": "manhattan_project", "parameters": ["n", "time"]}
{"id": 142, "difficulty_types": 1, "question": "from typing import List\n\ndef weapon_mandalorian(materials: List[int], manuals: List[List[int]], attribute: List[List[int]], limit: int) -> int:\n    \"\"\"\n    Welcome to the bustling Galactic Trade Center, a hub for interstellar travelers seeking rare and valuable resources. Our mandalorians, arrive with their backpacks filled with five distinct types of valuable minerals, labeled 0 to 4. Each mineral, represented by materials[j], indicates the quantity the mandalorian possesses.\n\n    The Trade Center a vast array of advanced weapons, each crafted from specific combinations of minerals. Manuals[i][j] represents the amount of the j-th mineral required to build the i-th weapon. Each weapon has a unique attribute[i] = [x, y], where x represents its power output and y represents its stability rating.\n\n    Mandalorians aim to acquire the most powerful weapon possible, but they must prioritize stability. They need to ensure the weapon's stability rating is at least limit. Your task is to determine the maximum power output the mandalorian can achieve while meeting the stability requirement. If no weapon meets the stability requirement, return -1.\n\n    Important Notes:\n    Each weapon can only be acquired once.\n    The mandalorians cannot trade minerals or acquire additional resources at the Trade Centor.\n    \n    >>> weapon_mandalorian([3,2,4,1,2], [[1,1,0,1,2],[2,1,4,0,0],[3,2,4,1,0]], [[3,2],[2,4],[7,6]], 5)\n    7\n    Rationale: The amount of materials can satisfy the following two options: Option one: Make weapon 0 and weapon 1, which can provide a stability of 2+4 and a power of 3+2. Option two: Only make weapon 2, which can provide a stability of 6 and a power of 7. Therefore, under the condition of meeting the stability requirement, the highest power that can be obtained is 7.\n    >>> weapon_mandalorian([10,10,10,10,10], [[1,1,1,1,1],[3,3,3,3,3],[10,10,10,10,10]], [[5,5],[6,6],[10,10]], 1)\n    11\n    Rationale: Making weapon 0 and weapon 1, the highest power that can be obtained is 11.\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef weapon_mandalorian(materials: List[int], manuals: List[List[int]], attribute: List[List[int]], limit: int) -> int:\n    \"\"\"\n    Welcome to the bustling Galactic Trade Center, a hub for interstellar travelers seeking rare and valuable resources. Our mandalorians, arrive with their backpacks filled with five distinct types of valuable minerals, labeled 0 to 4. Each mineral, represented by materials[j], indicates the quantity the mandalorian possesses.\n\n    The Trade Center a vast array of advanced weapons, each crafted from specific combinations of minerals. Manuals[i][j] represents the amount of the j-th mineral required to build the i-th weapon. Each weapon has a unique attribute[i] = [x, y], where x represents its power output and y represents its stability rating.\n\n    Mandalorians aim to acquire the most powerful weapon possible, but they must prioritize stability. They need to ensure the weapon's stability rating is at least limit. Your task is to determine the maximum power output the mandalorian can achieve while meeting the stability requirement. If no weapon meets the stability requirement, return -1.\n\n    Important Notes:\n    Each weapon can only be acquired once.\n    The mandalorians cannot trade minerals or acquire additional resources at the Trade Centor.\n    \n    >>> weapon_mandalorian([3,2,4,1,2], [[1,1,0,1,2],[2,1,4,0,0],[3,2,4,1,0]], [[3,2],[2,4],[7,6]], 5)\n    7\n    Rationale: The amount of materials can satisfy the following two options: Option one: Make weapon 0 and weapon 1, which can provide a stability of 2+4 and a power of 3+2. Option two: Only make weapon 2, which can provide a stability of 6 and a power of 7. Therefore, under the condition of meeting the stability requirement, the highest power that can be obtained is 7.\n    >>> weapon_mandalorian([10,10,10,10,10], [[1,1,1,1,1],[3,3,3,3,3],[10,10,10,10,10]], [[5,5],[6,6],[10,10]], 1)\n    11\n    Rationale: Making weapon 0 and weapon 1, the highest power that can be obtained is 11.\n    \"\"\"", "function_name": "weapon_mandalorian", "parameters": ["materials", "manuals", "attribute", "limit"]}
{"id": 143, "difficulty_types": 1, "question": "from typing import List\n\ndef master_carpenter(l: List[int], k: int) -> int:\n    \"\"\"\n    The air in my workshop, thick with the scent of sawdust and seasoned wood, hummed with anticipation. My next masterpiece, a grand, intricate sculpture of a phoenix rising from the ashes, was already taking shape in my mind. Its delicate wings, the fiery plumage, the proud, defiant gaze – it would be a testament to my craft, a beacon of beauty and resilience.\n\n    But before I could begin, a crucial decision loomed: the wood. I had a collection of logs, each a unique gift from the forest, their lengths varying like the whispers of the wind. Each log, a potential piece of the phoenix, held the promise of its own story, its own texture, its own grain.\n\n    The phoenix, however, demanded a specific number of identically sized wooden pieces, at least k in number, to achieve its intricate form. I needed to maximize the size of these pieces, ensuring I had enough to complete the sculpture.\n\n    Each log, with its length l[i], held a potential solution. But how to find the perfect balance between size and quantity? How to ensure I could cut the logs into at least k pieces, each of maximum length, and still have enough to bring my vision to life? If it's impossible to cut the logs into at least k pieces, I must accept defeat and return 0.\n    >>> master_carpenter([232, 124, 456], 7)\n    114\n    >>> master_carpenter([1, 2, 3], 7)\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef master_carpenter(l: List[int], k: int) -> int:\n    \"\"\"\n    The air in my workshop, thick with the scent of sawdust and seasoned wood, hummed with anticipation. My next masterpiece, a grand, intricate sculpture of a phoenix rising from the ashes, was already taking shape in my mind. Its delicate wings, the fiery plumage, the proud, defiant gaze – it would be a testament to my craft, a beacon of beauty and resilience.\n\n    But before I could begin, a crucial decision loomed: the wood. I had a collection of logs, each a unique gift from the forest, their lengths varying like the whispers of the wind. Each log, a potential piece of the phoenix, held the promise of its own story, its own texture, its own grain.\n\n    The phoenix, however, demanded a specific number of identically sized wooden pieces, at least k in number, to achieve its intricate form. I needed to maximize the size of these pieces, ensuring I had enough to complete the sculpture.\n\n    Each log, with its length l[i], held a potential solution. But how to find the perfect balance between size and quantity? How to ensure I could cut the logs into at least k pieces, each of maximum length, and still have enough to bring my vision to life? If it's impossible to cut the logs into at least k pieces, I must accept defeat and return 0.\n    >>> master_carpenter([232, 124, 456], 7)\n    114\n    >>> master_carpenter([1, 2, 3], 7)\n    0\n    \"\"\"", "function_name": "master_carpenter", "parameters": ["l", "k"]}
{"id": 144, "difficulty_types": 1, "question": "from typing import List\n\n\ndef counting_stars(arr: List[int]) -> List[int]:\n    \"\"\"\n    In the year 2103, humanity had developed the technology for interstellar travel. Daniels, a brilliant astrophysicist turned space explorer, was chosen to lead the mission beyond our solar system. Her ship, the Covenant, was equipped with revolutionary warp drive technology and advanced sensors capable of analyzing entire solar systems from a distance.\n\n    After months of travel through the cosmic void, Daniels and her diverse crew of scientists and engineers arrived at their destination: Origae, a star cluster never before observed up close by human eyes. As they entered the cluster, their sensors detected something extraordinary - a solar system unlike any they had ever encountered.\n\n    This system, which they named the Harmony Array, defied all known laws of celestial mechanics. Its planets were perfectly aligned in a straight line, each orbiting their sun in perfect synchronization. The crew was awestruck by this cosmic anomaly, theorizing that it might be the result of an advanced alien civilization's stellar engineering.\n\n    There are a total of n planets in the Harmony Array, and their sizes are represented by an array called arr in the ship's computer system. Each element in arr corresponds to the diameter of a planet, measured in thousands of kilometers.\n\n    Eager to study this phenomenon, Daniels decided to pilot the Stellar Voyager from the planet closest to the sun towards the outermost planet. She wanted to know how many planets she could observe from each planet's position in the line. This information would be crucial for understanding the system's structure and for planning detailed observations of each planet.\n\n    >>> counting_stars([1, 2, 3, 4, 5])\n    [5, 5, 4, 3, 2]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef counting_stars(arr: List[int]) -> List[int]:\n    \"\"\"\n    In the year 2103, humanity had developed the technology for interstellar travel. Daniels, a brilliant astrophysicist turned space explorer, was chosen to lead the mission beyond our solar system. Her ship, the Covenant, was equipped with revolutionary warp drive technology and advanced sensors capable of analyzing entire solar systems from a distance.\n\n    After months of travel through the cosmic void, Daniels and her diverse crew of scientists and engineers arrived at their destination: Origae, a star cluster never before observed up close by human eyes. As they entered the cluster, their sensors detected something extraordinary - a solar system unlike any they had ever encountered.\n\n    This system, which they named the Harmony Array, defied all known laws of celestial mechanics. Its planets were perfectly aligned in a straight line, each orbiting their sun in perfect synchronization. The crew was awestruck by this cosmic anomaly, theorizing that it might be the result of an advanced alien civilization's stellar engineering.\n\n    There are a total of n planets in the Harmony Array, and their sizes are represented by an array called arr in the ship's computer system. Each element in arr corresponds to the diameter of a planet, measured in thousands of kilometers.\n\n    Eager to study this phenomenon, Daniels decided to pilot the Stellar Voyager from the planet closest to the sun towards the outermost planet. She wanted to know how many planets she could observe from each planet's position in the line. This information would be crucial for understanding the system's structure and for planning detailed observations of each planet.\n\n    >>> counting_stars([1, 2, 3, 4, 5])\n    [5, 5, 4, 3, 2]\n    \"\"\"", "function_name": "counting_stars", "parameters": ["arr"]}
{"id": 145, "difficulty_types": 1, "question": "from typing import List\n\n\ndef data_collection(links: List[List[int]], events: List[List[int]]) -> int:\n    \"\"\"\n    You are a data scientist working on a project that requires you to collect data from various locations. You have access to a network of data centers, each containing valuable data points. Your goal is to optimize your travel schedule to maximize the amount of data you can collect while also taking advantage of opportunities to attend industry conferences and workshops at certain locations.\n\n    Rules and Restrictions:\n    1. You can travel among N data centers, represented by indices from 0 to N-1. Initially, you are at data center 0 on Monday.\n    2. These data centers are connected by high-speed data transfer links. These links are represented by an NN matrix (not necessarily symmetric), called the \"links matrix,\" which represents the status of data transfer links from data center i to data center j. If there is no link from data center i to data center j, links[i][j] = 0; otherwise, links[i][j] = 1. Also, links[i][i] = 0.\n    3. You have a total of K weeks (each week has 7 days) to travel. You can transfer data from one data center to another only on Monday mornings. Since the data transfer time is negligible, we do not consider the impact of transfer time.\n    4. For each data center, you can attend conferences or workshops on restricted days in different weeks. This is given by an NK matrix called the \"events matrix.\" For the value of events[i][j], it represents the maximum number of days you can attend conferences/workshops at data center i during the j+1 week.\n\n    Given the links matrix and the events matrix, you need to output the maximum number of days you can attend conferences/workshops during the K weeks.\n\n    >>> data_collection([[0,1,0],[1,0,1],[0,1,0]], [[1,2,3],[4,5,6],[7,8,9]])\n    21\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef data_collection(links: List[List[int]], events: List[List[int]]) -> int:\n    \"\"\"\n    You are a data scientist working on a project that requires you to collect data from various locations. You have access to a network of data centers, each containing valuable data points. Your goal is to optimize your travel schedule to maximize the amount of data you can collect while also taking advantage of opportunities to attend industry conferences and workshops at certain locations.\n\n    Rules and Restrictions:\n    1. You can travel among N data centers, represented by indices from 0 to N-1. Initially, you are at data center 0 on Monday.\n    2. These data centers are connected by high-speed data transfer links. These links are represented by an NN matrix (not necessarily symmetric), called the \"links matrix,\" which represents the status of data transfer links from data center i to data center j. If there is no link from data center i to data center j, links[i][j] = 0; otherwise, links[i][j] = 1. Also, links[i][i] = 0.\n    3. You have a total of K weeks (each week has 7 days) to travel. You can transfer data from one data center to another only on Monday mornings. Since the data transfer time is negligible, we do not consider the impact of transfer time.\n    4. For each data center, you can attend conferences or workshops on restricted days in different weeks. This is given by an NK matrix called the \"events matrix.\" For the value of events[i][j], it represents the maximum number of days you can attend conferences/workshops at data center i during the j+1 week.\n\n    Given the links matrix and the events matrix, you need to output the maximum number of days you can attend conferences/workshops during the K weeks.\n\n    >>> data_collection([[0,1,0],[1,0,1],[0,1,0]], [[1,2,3],[4,5,6],[7,8,9]])\n    21\n    \"\"\"", "function_name": "data_collection", "parameters": ["links", "events"]}
{"id": 146, "difficulty_types": 1, "question": "from typing import List\n\ndef elder_scrolls(scrolls: List[List[int]]) -> int:\n    \"\"\"\n    In the distant land of Tamriel, within the bustling city of Cyrodiil, stands the prestigious Arcane University, a beacon of knowledge and mystical power. The university is renowned for its grand library, a labyrinthine vault that houses countless tomes, grimoires, and ancient artifacts. Among these treasures lies a legendary collection of scrolls, known as the Elder Scrolls, each imbued with prophecies and secrets that shape the very fabric of reality.\n\n    The Elder Scrolls are not mere parchments; they are living artifacts, each described by a unique pair of integers (w, h), representing their width and height. The scrolls possess a peculiar property: they can be nested within one another, much like a set of intricate matryoshka dolls. A smaller scroll can be stored inside a larger scroll if both its width and height are strictly less than those of the larger scroll. This nesting unlocks their true potential, creating a chain of knowledge and power that amplifies their mystical properties.\n\n    The wise mages of the Arcane University are the guardians of these sacred scrolls. They have long studied the art of scroll nesting, understanding that the proper arrangement can unleash powerful enchantments and divine insights. Their ultimate goal is to determine the maximum number of scrolls that can be nested within each other, forming an unbroken chain of wisdom that spans the ages.\n\n    To achieve this, the mages must carefully examine each scroll, comparing their dimensions to find the perfect fit. They start with the smallest scroll and seek the next in the sequence, ensuring that each subsequent scroll can contain the previous one. The challenge lies in the vast number of scrolls and the myriad of possible combinations.\n\n    The mages believe that by unlocking the full potential of the Elder Scrolls, they can harness their combined power to protect Tamriel from the forces of darkness that threaten its shores. Legends speak of ancient mages who could wield the nested scrolls to cast spells of unimaginable magnitude, turning the tide of battles and shaping the course of history.\n\n    As the mages delve deeper into the library's vaults, they uncover scrolls of varying sizes, each bearing cryptic inscriptions and arcane symbols. They meticulously record the dimensions of each scroll, using their knowledge of mathematics and magic to devise algorithms that will help them find the optimal nesting sequence.\n\n    The task is daunting, but the mages are undeterred. They understand that the fate of Tamriel rests on their ability to unlock the secrets of the Elder Scrolls. With each nested scroll, they draw closer to unraveling the mysteries of the universe and securing the future of their beloved land.\n\n    >>> elder_scrolls([[5,4],[6,4],[6,7],[2,3]])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef elder_scrolls(scrolls: List[List[int]]) -> int:\n    \"\"\"\n    In the distant land of Tamriel, within the bustling city of Cyrodiil, stands the prestigious Arcane University, a beacon of knowledge and mystical power. The university is renowned for its grand library, a labyrinthine vault that houses countless tomes, grimoires, and ancient artifacts. Among these treasures lies a legendary collection of scrolls, known as the Elder Scrolls, each imbued with prophecies and secrets that shape the very fabric of reality.\n\n    The Elder Scrolls are not mere parchments; they are living artifacts, each described by a unique pair of integers (w, h), representing their width and height. The scrolls possess a peculiar property: they can be nested within one another, much like a set of intricate matryoshka dolls. A smaller scroll can be stored inside a larger scroll if both its width and height are strictly less than those of the larger scroll. This nesting unlocks their true potential, creating a chain of knowledge and power that amplifies their mystical properties.\n\n    The wise mages of the Arcane University are the guardians of these sacred scrolls. They have long studied the art of scroll nesting, understanding that the proper arrangement can unleash powerful enchantments and divine insights. Their ultimate goal is to determine the maximum number of scrolls that can be nested within each other, forming an unbroken chain of wisdom that spans the ages.\n\n    To achieve this, the mages must carefully examine each scroll, comparing their dimensions to find the perfect fit. They start with the smallest scroll and seek the next in the sequence, ensuring that each subsequent scroll can contain the previous one. The challenge lies in the vast number of scrolls and the myriad of possible combinations.\n\n    The mages believe that by unlocking the full potential of the Elder Scrolls, they can harness their combined power to protect Tamriel from the forces of darkness that threaten its shores. Legends speak of ancient mages who could wield the nested scrolls to cast spells of unimaginable magnitude, turning the tide of battles and shaping the course of history.\n\n    As the mages delve deeper into the library's vaults, they uncover scrolls of varying sizes, each bearing cryptic inscriptions and arcane symbols. They meticulously record the dimensions of each scroll, using their knowledge of mathematics and magic to devise algorithms that will help them find the optimal nesting sequence.\n\n    The task is daunting, but the mages are undeterred. They understand that the fate of Tamriel rests on their ability to unlock the secrets of the Elder Scrolls. With each nested scroll, they draw closer to unraveling the mysteries of the universe and securing the future of their beloved land.\n\n    >>> elder_scrolls([[5,4],[6,4],[6,7],[2,3]])\n    3\n    \"\"\"", "function_name": "elder_scrolls", "parameters": ["scrolls"]}
{"id": 147, "difficulty_types": 1, "question": "from typing import List\n\n\ndef indiana_jones(a: List[int]) -> int:\n    \"\"\"\n    In the heart of the dense and mystical Whisperwood Forest, shrouded in centuries of legend and lore, lies a series of ancient ruins. These ruins are the remnants of the once-great civilization of the Elderfolk, a people renowned for their mastery of magic and their vast wealth. The Elderfolk, it is said, possessed treasures beyond imagination—golden artifacts imbued with arcane power, gemstones that could capture the essence of the elements, and scrolls containing secrets of the universe itself.\n\n    For generations, adventurers and treasure hunters have sought these ruins, drawn by tales of unimaginable riches. However, the Elderfolk were not only skilled in the arts of magic but also in the crafting of intricate and deadly traps. They protected their treasures with powerful magical barriers, designed to thwart any who dared to disturb their sacred sites.\n\n    You, Indiana Jones, known far and wide for your cunning, skill, and unyielding determination, have finally discovered the secret path that leads to these fabled ruins. The path is treacherous, winding through dense thickets and across hidden ravines, but your expertise and intuition guide you unerringly toward your goal.\n\n    Each ruin contains a chamber with a specific amount of treasure, but the magical barriers present a unique challenge. The barriers are enchanted such that if treasures from adjacent ruins are taken on the same day, a deadly trap will be triggered, sealing the ruins forever and endangering the life of the treasure hunter.\n\n    You have one day to collect as much treasure as possible without triggering the traps. Given a non-negative integer list representing the amount of treasure in each ruin, your task is to calculate the maximum amount of treasure you can collect in one day while avoiding the deadly traps.\n\n    >>> indiana_jones([1, 2, 3, 4, 5])\n    9\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef indiana_jones(a: List[int]) -> int:\n    \"\"\"\n    In the heart of the dense and mystical Whisperwood Forest, shrouded in centuries of legend and lore, lies a series of ancient ruins. These ruins are the remnants of the once-great civilization of the Elderfolk, a people renowned for their mastery of magic and their vast wealth. The Elderfolk, it is said, possessed treasures beyond imagination—golden artifacts imbued with arcane power, gemstones that could capture the essence of the elements, and scrolls containing secrets of the universe itself.\n\n    For generations, adventurers and treasure hunters have sought these ruins, drawn by tales of unimaginable riches. However, the Elderfolk were not only skilled in the arts of magic but also in the crafting of intricate and deadly traps. They protected their treasures with powerful magical barriers, designed to thwart any who dared to disturb their sacred sites.\n\n    You, Indiana Jones, known far and wide for your cunning, skill, and unyielding determination, have finally discovered the secret path that leads to these fabled ruins. The path is treacherous, winding through dense thickets and across hidden ravines, but your expertise and intuition guide you unerringly toward your goal.\n\n    Each ruin contains a chamber with a specific amount of treasure, but the magical barriers present a unique challenge. The barriers are enchanted such that if treasures from adjacent ruins are taken on the same day, a deadly trap will be triggered, sealing the ruins forever and endangering the life of the treasure hunter.\n\n    You have one day to collect as much treasure as possible without triggering the traps. Given a non-negative integer list representing the amount of treasure in each ruin, your task is to calculate the maximum amount of treasure you can collect in one day while avoiding the deadly traps.\n\n    >>> indiana_jones([1, 2, 3, 4, 5])\n    9\n    \"\"\"", "function_name": "indiana_jones", "parameters": ["a"]}
{"id": 148, "difficulty_types": 1, "question": "def find_maximum_number(k: int, x: int) -> int:\n    \"\"\"\n    You are a software engineer working for a company that sells digital products online. The company has a unique pricing strategy where the price of each product is determined by the number of set bits in its binary representation at specific positions. The positions are determined by a given value x, where the price is calculated based on the set bits at positions x, 2x, 3x, etc., starting from the least significant bit. The following table contains examples of how the price is calculated.\n\n    x | num | Binary Representation | Price\n    --|-----|----------------------|-------\n    1 | 13  | 000001101            | 3\n    2 | 13  | 000001101            | 1\n    2 | 233 | 011101001            | 3\n    3 | 13  | 000001101            | 1\n    3 | 362 | 101101010            | 2\n\n    The accumulated price of a product num is the total price of all products from 1 to num. A product is considered cheap if its accumulated price is less than or equal to a given budget k.\n\n    Your task is to find the highest-priced product that the company can offer while ensuring that it is still considered cheap.\n\n    >>> find_maximum_number(k = 9, x = 1)\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef find_maximum_number(k: int, x: int) -> int:\n    \"\"\"\n    You are a software engineer working for a company that sells digital products online. The company has a unique pricing strategy where the price of each product is determined by the number of set bits in its binary representation at specific positions. The positions are determined by a given value x, where the price is calculated based on the set bits at positions x, 2x, 3x, etc., starting from the least significant bit. The following table contains examples of how the price is calculated.\n\n    x | num | Binary Representation | Price\n    --|-----|----------------------|-------\n    1 | 13  | 000001101            | 3\n    2 | 13  | 000001101            | 1\n    2 | 233 | 011101001            | 3\n    3 | 13  | 000001101            | 1\n    3 | 362 | 101101010            | 2\n\n    The accumulated price of a product num is the total price of all products from 1 to num. A product is considered cheap if its accumulated price is less than or equal to a given budget k.\n\n    Your task is to find the highest-priced product that the company can offer while ensuring that it is still considered cheap.\n\n    >>> find_maximum_number(k = 9, x = 1)\n    6\n    \"\"\"", "function_name": "find_maximum_number", "parameters": ["k", "x"]}
{"id": 149, "difficulty_types": 1, "question": "from typing import List\ndef age_alternating_queue(fruit_queue: List[int]) -> int:\n    \"\"\"\n    At the New York Welfare Relief Station, individuals gather daily at noon to enjoy fruit together. To foster communication between the elderly and the young, the station evaluates the \"age alternating queue\" formed by the participants. Each day, the New York Statistics Bureau counts the peak number of people who can effectively communicate, using this as an indicator to assess the contributions of welfare assistance stations. Your task is to help the Statistics Bureau by writing a program that determines the maximum length of subfruit_queueays where the ages alternate according to specific rules.\n\n    Given an fruit_queueay of integers representing the ages of individuals in the queue, a valid subfruit_queueay is defined by one of the following conditions:\n\n    For any index k in the subfruit_queueay:\n    If k is even, then a[k] > a[k + 1]\n    If k is odd, then a[k] < a[k + 1]\n    OR\n\n    For any index k in the subfruit_queueay:\n    If k is even, then a[k] < a[k + 1]\n    If k is odd, then a[k] > a[k + 1]\n    >>> age_alternating_queue([1,2,3,4])\n    2\n    >>> age_alternating_queue([7,6,2,13])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef age_alternating_queue(fruit_queue: List[int]) -> int:\n    \"\"\"\n    At the New York Welfare Relief Station, individuals gather daily at noon to enjoy fruit together. To foster communication between the elderly and the young, the station evaluates the \"age alternating queue\" formed by the participants. Each day, the New York Statistics Bureau counts the peak number of people who can effectively communicate, using this as an indicator to assess the contributions of welfare assistance stations. Your task is to help the Statistics Bureau by writing a program that determines the maximum length of subfruit_queueays where the ages alternate according to specific rules.\n\n    Given an fruit_queueay of integers representing the ages of individuals in the queue, a valid subfruit_queueay is defined by one of the following conditions:\n\n    For any index k in the subfruit_queueay:\n    If k is even, then a[k] > a[k + 1]\n    If k is odd, then a[k] < a[k + 1]\n    OR\n\n    For any index k in the subfruit_queueay:\n    If k is even, then a[k] < a[k + 1]\n    If k is odd, then a[k] > a[k + 1]\n    >>> age_alternating_queue([1,2,3,4])\n    2\n    >>> age_alternating_queue([7,6,2,13])\n    3\n    \"\"\"", "function_name": "age_alternating_queue", "parameters": ["fruit_queue"]}
{"id": 150, "difficulty_types": 1, "question": "from typing import List\n\ndef max_protection_fees(protection_fees: List) -> float:\n    \"\"\"\n    Thomas Shelby leads the Peaky Blinders, the largest gang in Birmingham. They manage the taverns and stores in some neighborhoods, collecting a monthly protection fee from each. However, discontent has grown among the businesses being charged. When a business is charged, they often complain to their adjacent business and incite rebellion. Help devise an optimal strategy for Thomas Shelby to maximize protection fee revenue while avoiding controversy.\n    Return the maximum possible pounds that the Peaky Blinders can collect without causing any controversy.\n    >>> [20,75,9,3,1]\n    0.78\n    >>> [2, 1, 1, 8, 3, 7]\n    0.17\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_protection_fees(protection_fees: List) -> float:\n    \"\"\"\n    Thomas Shelby leads the Peaky Blinders, the largest gang in Birmingham. They manage the taverns and stores in some neighborhoods, collecting a monthly protection fee from each. However, discontent has grown among the businesses being charged. When a business is charged, they often complain to their adjacent business and incite rebellion. Help devise an optimal strategy for Thomas Shelby to maximize protection fee revenue while avoiding controversy.\n    Return the maximum possible pounds that the Peaky Blinders can collect without causing any controversy.\n    >>> [20,75,9,3,1]\n    0.78\n    >>> [2, 1, 1, 8, 3, 7]\n    0.17\n    \"\"\"", "function_name": "max_protection_fees", "parameters": ["protection_fees"]}
{"id": 151, "difficulty_types": 2, "question": "from typing import List\n\ndef min_expend(nums: List[int]) -> int:\n    \"\"\"\n    A manager of a company signs a Fixed Price with Economic Price Adjustment Contract with a supplier. Given `nums` representing the changes in economic prices over recent days, where positive numbers indicate price increases and negative numbers indicate price decreases. The manager can choose any day to sign the contract, paying the price on that specific day. At the end of the procurement period, a refund or additional payment is made based on the final prices.\n    The goal is to determine the minimum expenditure the manager can achieve by choosing the optimal day to sign the contract.\n\n    >>> min_expend([-2, 1, -3, 4, -1, 2, 1, -5, 4])\n    -5\n    >>> min_expend([1, 5, 8, 0])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef min_expend(nums: List[int]) -> int:\n    \"\"\"\n    A manager of a company signs a Fixed Price with Economic Price Adjustment Contract with a supplier. Given `nums` representing the changes in economic prices over recent days, where positive numbers indicate price increases and negative numbers indicate price decreases. The manager can choose any day to sign the contract, paying the price on that specific day. At the end of the procurement period, a refund or additional payment is made based on the final prices.\n    The goal is to determine the minimum expenditure the manager can achieve by choosing the optimal day to sign the contract.\n\n    >>> min_expend([-2, 1, -3, 4, -1, 2, 1, -5, 4])\n    -5\n    >>> min_expend([1, 5, 8, 0])\n    0\n    \"\"\"", "function_name": "min_expend", "parameters": ["nums"]}
{"id": 152, "difficulty_types": 2, "question": "from typing import List\n\ndef min_delivery_cost(cost: List[List[int]], locations: List[int]) -> int:\n    \"\"\"A food delivery person wants to deliver orders to multiple customers in a city. The city can be represented as a\n    grid where each cell corresponds to a location. The delivery person needs to visit each customer's location once\n    and then return to the starting point. The cost of moving from one location to another is given by a cost matrix\n    where cost[i][j] represents the cost of moving from location i to location j.\n\n    Given the cost matrix cost and the list of customer locations to visit locations, your task is to find the\n    minimum total cost for the delivery person to visit all the customers and return to the starting point.\n\n    Constraints:\n    - 1 <= n <= 15, where n is the number of locations in the city.\n    - cost[i][j] represents the cost of moving from location i to location j, and cost[i][i] = 0 for all 1 <= i <= n.\n    - 1 <= locations[i] <= n for all 0 <= i < len(locations), representing the customer locations to visit.\n    - The starting point is always location 1.\n\n    Return the minimum total cost to visit all the customers and return to the starting point.\n\n    >>> min_delivery_cost([[0, 1, 1], [1, 0, 2], [1, 2, 0]], [1, 2, 3])\n    4\n    >>> min_delivery_cost([[0, 2, 3], [2, 0, 1], [3, 1, 0]], [1, 2, 3])\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef min_delivery_cost(cost: List[List[int]], locations: List[int]) -> int:\n    \"\"\"A food delivery person wants to deliver orders to multiple customers in a city. The city can be represented as a\n    grid where each cell corresponds to a location. The delivery person needs to visit each customer's location once\n    and then return to the starting point. The cost of moving from one location to another is given by a cost matrix\n    where cost[i][j] represents the cost of moving from location i to location j.\n\n    Given the cost matrix cost and the list of customer locations to visit locations, your task is to find the\n    minimum total cost for the delivery person to visit all the customers and return to the starting point.\n\n    Constraints:\n    - 1 <= n <= 15, where n is the number of locations in the city.\n    - cost[i][j] represents the cost of moving from location i to location j, and cost[i][i] = 0 for all 1 <= i <= n.\n    - 1 <= locations[i] <= n for all 0 <= i < len(locations), representing the customer locations to visit.\n    - The starting point is always location 1.\n\n    Return the minimum total cost to visit all the customers and return to the starting point.\n\n    >>> min_delivery_cost([[0, 1, 1], [1, 0, 2], [1, 2, 0]], [1, 2, 3])\n    4\n    >>> min_delivery_cost([[0, 2, 3], [2, 0, 1], [3, 1, 0]], [1, 2, 3])\n    6\n    \"\"\"", "function_name": "min_delivery_cost", "parameters": ["cost", "locations"]}
{"id": 153, "difficulty_types": 2, "question": "from typing import List\n\ndef jumping_map(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a n×n map, each cell has a height. You can only move to adjacent cells, and the height difference between the two cells should not exceed the target. You cannot go outside the map. Find the smallest target that satisfies the condition of moving from the top left corner (0,0) to the bottom right corner (n-1,n-1). Notice that n<=100 and the size of the map: 0<=arr[i][j]<=100000.\n    >>> jumping_map([[1,5],[6,2]])\n    4\n    >>> jumping_map([[1,5,9],[3,4,7],[6,8,1]])\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef jumping_map(arr: List[List[int]]) -> int:\n    \"\"\"\n    Given a n×n map, each cell has a height. You can only move to adjacent cells, and the height difference between the two cells should not exceed the target. You cannot go outside the map. Find the smallest target that satisfies the condition of moving from the top left corner (0,0) to the bottom right corner (n-1,n-1). Notice that n<=100 and the size of the map: 0<=arr[i][j]<=100000.\n    >>> jumping_map([[1,5],[6,2]])\n    4\n    >>> jumping_map([[1,5,9],[3,4,7],[6,8,1]])\n    6\n    \"\"\"", "function_name": "jumping_map", "parameters": ["arr"]}
{"id": 154, "difficulty_types": 2, "question": "from typing import List\n\ndef min_consumption(energy: List[List[int]], nutrition: List[List[int]], t: int) -> int:\n    \"\"\"\n    You are planning a robotic supply mission to a distant space station. There are two types of supply packs: energy packs and nutrition packs. Each energy pack provides a certain amount of fuel units and a certain amount of power output. Similarly, each nutrition pack provides a certain amount of nutrient units and a certain amount of vitality.\n\n    Given an array energy of length n representing the different energy packs, where energy[i][0] is the fuel units of the i-th energy pack and energy[i][1] is the power output of the i-th energy pack.\n\n    Given an array nutrition of length m representing the different nutrition packs, where nutrition[i][0] is the nutrient units of the i-th nutrition pack and nutrition[i][1] is the vitality of the i-th nutrition pack.\n\n    You need to select at most one pack from each set (one energy pack and one nutrition pack) and ensure that the total power output + vitality is at least T (a required threshold). Your goal is to minimize the total fuel units + nutrient units consumed.\n\n    Return the minimum total fuel and nutrients consumed while meeting or exceeding the power and vitality threshold.\n    >>> min_consumption([[10,10],[20,20]], [[20,30],[30,30]], 40)\n    30\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef min_consumption(energy: List[List[int]], nutrition: List[List[int]], t: int) -> int:\n    \"\"\"\n    You are planning a robotic supply mission to a distant space station. There are two types of supply packs: energy packs and nutrition packs. Each energy pack provides a certain amount of fuel units and a certain amount of power output. Similarly, each nutrition pack provides a certain amount of nutrient units and a certain amount of vitality.\n\n    Given an array energy of length n representing the different energy packs, where energy[i][0] is the fuel units of the i-th energy pack and energy[i][1] is the power output of the i-th energy pack.\n\n    Given an array nutrition of length m representing the different nutrition packs, where nutrition[i][0] is the nutrient units of the i-th nutrition pack and nutrition[i][1] is the vitality of the i-th nutrition pack.\n\n    You need to select at most one pack from each set (one energy pack and one nutrition pack) and ensure that the total power output + vitality is at least T (a required threshold). Your goal is to minimize the total fuel units + nutrient units consumed.\n\n    Return the minimum total fuel and nutrients consumed while meeting or exceeding the power and vitality threshold.\n    >>> min_consumption([[10,10],[20,20]], [[20,30],[30,30]], 40)\n    30\n    \"\"\"", "function_name": "min_consumption", "parameters": ["energy", "nutrition", "t"]}
{"id": 155, "difficulty_types": 2, "question": "from typing import List\n\ndef maximum_strength(investments: List[int], k: int) -> int:\n    \"\"\"\n    You are a financial analyst working for a company that manages multiple investment portfolios. Each portfolio consists of a series of investments, represented by an array of integers called \"investments,\" where each integer represents the profit or loss of a particular investment.\n\n    Your task is to select exactly k disjoint sub-portfolios from the \"investments\" array to maximize the overall strength of the selected sub-portfolios. The sub-portfolios must be chosen such that the last investment of each sub-portfolio appears before the first investment of the next sub-portfolio.\n\n    The strength of the selected sub-portfolios is calculated using a specific formula:\n\n    strength = k * sum(sub1) - (k - 1) * sum(sub2) + (k - 2) * sum(sub3) - ... - 2 * sum(sub{k-1}) + sum(subk)\n\n    where sum(subi) is the sum of the investments in the i-th sub-portfolio.\n\n    Your goal is to determine the maximum possible strength that can be obtained by selecting exactly k disjoint sub-portfolios from the \"investments\" array.\n\n    Note that the chosen sub-portfolios don't need to cover the entire \"investments\" array.\n\n    >>> maximum_strength(investments = [1000, 2000, 3000, -1000, 2000], k = 3)\n    22000\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef maximum_strength(investments: List[int], k: int) -> int:\n    \"\"\"\n    You are a financial analyst working for a company that manages multiple investment portfolios. Each portfolio consists of a series of investments, represented by an array of integers called \"investments,\" where each integer represents the profit or loss of a particular investment.\n\n    Your task is to select exactly k disjoint sub-portfolios from the \"investments\" array to maximize the overall strength of the selected sub-portfolios. The sub-portfolios must be chosen such that the last investment of each sub-portfolio appears before the first investment of the next sub-portfolio.\n\n    The strength of the selected sub-portfolios is calculated using a specific formula:\n\n    strength = k * sum(sub1) - (k - 1) * sum(sub2) + (k - 2) * sum(sub3) - ... - 2 * sum(sub{k-1}) + sum(subk)\n\n    where sum(subi) is the sum of the investments in the i-th sub-portfolio.\n\n    Your goal is to determine the maximum possible strength that can be obtained by selecting exactly k disjoint sub-portfolios from the \"investments\" array.\n\n    Note that the chosen sub-portfolios don't need to cover the entire \"investments\" array.\n\n    >>> maximum_strength(investments = [1000, 2000, 3000, -1000, 2000], k = 3)\n    22000\n    \"\"\"", "function_name": "maximum_strength", "parameters": ["investments", "k"]}
{"id": 156, "difficulty_types": 2, "question": "from typing import List\ndef process_warehouse(A: List[int], K: int, M: int) -> List[int]:\n    \"\"\"\n    You are given a list representing the quantities of items in the warehouse A, an integer K representing the number of shipments received, and an integer M that represents the increase factor for each shipment's quantity.\n\n    In each of the K shipments received:\n\n    1. Identify the Item with the Lowest Quantity: Find the item in the warehouse with the smallest quantity. If multiple items have the same lowest quantity, choose the item with the smallest index.\n    2. Update the Quantity: Increase this item's quantity by multiplying it with the specified M.\n    3. Repeat for K Shipments: Repeat the above two steps across all K shipments.\n\n    After processing all shipments, for each item's quantity in the warehouse:\n\n    4. Apply a Modulo Operation: This step ensures quantities remain manageable and within a specific range. Take each quantity modulo 10^9 + 7.\n\n    Finally, you need to return the updated list of item quantities in the warehouse.\n\n    >>> process_warehouse(A = [2, 1, 3, 5, 6], K = 5, M = 2)\n    [8, 4, 6, 5, 6]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef process_warehouse(A: List[int], K: int, M: int) -> List[int]:\n    \"\"\"\n    You are given a list representing the quantities of items in the warehouse A, an integer K representing the number of shipments received, and an integer M that represents the increase factor for each shipment's quantity.\n\n    In each of the K shipments received:\n\n    1. Identify the Item with the Lowest Quantity: Find the item in the warehouse with the smallest quantity. If multiple items have the same lowest quantity, choose the item with the smallest index.\n    2. Update the Quantity: Increase this item's quantity by multiplying it with the specified M.\n    3. Repeat for K Shipments: Repeat the above two steps across all K shipments.\n\n    After processing all shipments, for each item's quantity in the warehouse:\n\n    4. Apply a Modulo Operation: This step ensures quantities remain manageable and within a specific range. Take each quantity modulo 10^9 + 7.\n\n    Finally, you need to return the updated list of item quantities in the warehouse.\n\n    >>> process_warehouse(A = [2, 1, 3, 5, 6], K = 5, M = 2)\n    [8, 4, 6, 5, 6]\n    \"\"\"", "function_name": "process_warehouse", "parameters": ["A", "K", "M"]}
{"id": 157, "difficulty_types": 2, "question": "from typing import List\n\ndef calculate_MDP(array1: List[int], array2: List[int]) -> int:\n    \"\"\"Given two arrays, array1 and array2, you can remove any number of elements (including none) from each array, but the relative order of the remaining elements must stay the same. The resulting new arrays must have the same length.\n    Your task is to return the Maximum Dot Product (MDP) between the two non-empty new arrays.\n    The dot product of two arrays is calculated as follows: DP = sum(x_1 * y_1 + x_2 * y_2 + ... + x_n * y_n).\n    >>> calculate_MDP([3, 2, -1, 5], [1, 2, 1, 2])\n    18\n    >>> calculate_MDP([2, 0, 1], [1, 2, 3, 4])\n    10\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef calculate_MDP(array1: List[int], array2: List[int]) -> int:\n    \"\"\"Given two arrays, array1 and array2, you can remove any number of elements (including none) from each array, but the relative order of the remaining elements must stay the same. The resulting new arrays must have the same length.\n    Your task is to return the Maximum Dot Product (MDP) between the two non-empty new arrays.\n    The dot product of two arrays is calculated as follows: DP = sum(x_1 * y_1 + x_2 * y_2 + ... + x_n * y_n).\n    >>> calculate_MDP([3, 2, -1, 5], [1, 2, 1, 2])\n    18\n    >>> calculate_MDP([2, 0, 1], [1, 2, 3, 4])\n    10\n    \"\"\"", "function_name": "calculate_MDP", "parameters": ["array1", "array2"]}
{"id": 158, "difficulty_types": 2, "question": "from typing import List\ndef magician_farmer(a: List[List[int]], r:int) -> List[List[int]]:\n    \"\"\"\n    Anthony is a magician in the country side. He uses magic to help farmers in the village produce high-quality food.\n    Given an m x n matrix a representing the farmland of a farmer, each element represents a low-level agricultural product.\n    Anthony can use a magic upgrader to upgrade the product. The magic effective range of this upgrader is r. For each low-level product in a,\n    the upgrader can collect other products within the range r around a to synthesize high-level products. Given the matrix a and the range r, please return the matrix of magically upgraded high-level products.\n\n    >>> magician_farmer(a=[[2, 4, 6], [8, 10, 12], [14, 16, 18]], r=2)\n    [[90, 90, 90], [90, 90, 90], [90, 90, 90]]\n    >>> magician_farmer(a=[[1, 2, 3], [1, 2, 3], [1, 2, 3]], r=1)\n    [[6, 12, 10], [9, 18, 15], [6, 12, 10]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef magician_farmer(a: List[List[int]], r:int) -> List[List[int]]:\n    \"\"\"\n    Anthony is a magician in the country side. He uses magic to help farmers in the village produce high-quality food.\n    Given an m x n matrix a representing the farmland of a farmer, each element represents a low-level agricultural product.\n    Anthony can use a magic upgrader to upgrade the product. The magic effective range of this upgrader is r. For each low-level product in a,\n    the upgrader can collect other products within the range r around a to synthesize high-level products. Given the matrix a and the range r, please return the matrix of magically upgraded high-level products.\n\n    >>> magician_farmer(a=[[2, 4, 6], [8, 10, 12], [14, 16, 18]], r=2)\n    [[90, 90, 90], [90, 90, 90], [90, 90, 90]]\n    >>> magician_farmer(a=[[1, 2, 3], [1, 2, 3], [1, 2, 3]], r=1)\n    [[6, 12, 10], [9, 18, 15], [6, 12, 10]]\n    \"\"\"", "function_name": "magician_farmer", "parameters": ["a", "r"]}
{"id": 159, "difficulty_types": 2, "question": "from typing import List\ndef fly_across_mountains(mountains: List[List[int]]) -> int:\n    \"\"\"\n    In the game Black Myth: WuKong, the character can use a cloud to fly across different mountains in Chapter 6. You are given an n x n integer matrix, where each value [i][j] represents the height of the mountain at the point (i, j).\n\n    There are no clouds at the beginning of the game, and as the game progresses, the clouds will slowly\n    rise and take the charator to higher altitudes.\n    At any given time t, the height of the cloud in the sky is equal to t. The character can fly from one mountain to an adjacent mountain (up, down, left, or right) if and only if the heights of both mountains are less than or equal to the height of the cloud. The character can fly an infinite distance in zero time but must stay within the boundaries of the mountain.\n\n    Your task is to determine the least time t required for the character to fly from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1).\n\n    >>> fly_across_mountains([[0, 1, 2, 3, 4, 5], [49,48,49,50, 5], [12, 12, 12, 12, 15,] [11, 38, 39, 40, 41],[15, 14, 13, 12, 11]])\n    15\n    >>> fly_across_mountains([[[0,1,4,2,4],[244,233,29,50,5],[8,11,13,14,16],[11,17,18,19,20],[10,9,8,7,6]]])\n    16\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef fly_across_mountains(mountains: List[List[int]]) -> int:\n    \"\"\"\n    In the game Black Myth: WuKong, the character can use a cloud to fly across different mountains in Chapter 6. You are given an n x n integer matrix, where each value [i][j] represents the height of the mountain at the point (i, j).\n\n    There are no clouds at the beginning of the game, and as the game progresses, the clouds will slowly\n    rise and take the charator to higher altitudes.\n    At any given time t, the height of the cloud in the sky is equal to t. The character can fly from one mountain to an adjacent mountain (up, down, left, or right) if and only if the heights of both mountains are less than or equal to the height of the cloud. The character can fly an infinite distance in zero time but must stay within the boundaries of the mountain.\n\n    Your task is to determine the least time t required for the character to fly from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1).\n\n    >>> fly_across_mountains([[0, 1, 2, 3, 4, 5], [49,48,49,50, 5], [12, 12, 12, 12, 15,] [11, 38, 39, 40, 41],[15, 14, 13, 12, 11]])\n    15\n    >>> fly_across_mountains([[[0,1,4,2,4],[244,233,29,50,5],[8,11,13,14,16],[11,17,18,19,20],[10,9,8,7,6]]])\n    16\n    \"\"\"", "function_name": "fly_across_mountains", "parameters": ["mountains"]}
{"id": 160, "difficulty_types": 2, "question": "from typing import List\ndef dating_show(ages: List[int]) -> int:\n    \"\"\"\n    In a dating show, the organizer has established an interesting matching rule for guests based on their ages. Two guests with ages x and y can only be paired if the following condition is satisfied:\n\n    |x - y| < min(x, y)∣\n\n    If this condition is met, the guests can be paired, and their matching score is calculated using the XOR operation.\n\n    Paired guests with higher matching score will be encouraged to date in the future.\n\n    The objective is to determine the highest matching score possible among all valid paired guests.\n\n    Given an array ages of integers representing the ages of all guests, write a function that computes the highest matching score based on the above criteria.\n\n    >>> dating_show([1,2,3,4,5])\n    7\n    >>> dating_show([10,100])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef dating_show(ages: List[int]) -> int:\n    \"\"\"\n    In a dating show, the organizer has established an interesting matching rule for guests based on their ages. Two guests with ages x and y can only be paired if the following condition is satisfied:\n\n    |x - y| < min(x, y)∣\n\n    If this condition is met, the guests can be paired, and their matching score is calculated using the XOR operation.\n\n    Paired guests with higher matching score will be encouraged to date in the future.\n\n    The objective is to determine the highest matching score possible among all valid paired guests.\n\n    Given an array ages of integers representing the ages of all guests, write a function that computes the highest matching score based on the above criteria.\n\n    >>> dating_show([1,2,3,4,5])\n    7\n    >>> dating_show([10,100])\n    0\n    \"\"\"", "function_name": "dating_show", "parameters": ["ages"]}
{"id": 161, "difficulty_types": 3, "question": "from typing import List\n\ndef mario_kart(requirement: int) -> List[List[int]]:\n    \"\"\"\n    A group of friends playing Mario Kart. They want to unlock all the hidden characters, but each character has a specific \"unlock requirement\" based on their combined race scores. They decide to form teams based on their racing skills so that each team can unlock a particular character. Each player is assigned a unique positive integer representing their skill level.\n\n    Unlock Requirement: Each hidden character has a specific \"unlock requirement\" based on the combined race scores needed. \n    Combinations: They need to find all possible teams where the sum of their skill levels meets the \"unlock requirement\" for a specific character.\n    \n    To keep things organized, they decide to:\n    Sort each team in ascending order by their assigned skill numbers.\n    Sort the list of teams in ascending order based on the lowest skill number in each team.\n    Given the unlock requirement, the final result will be a list of all possible team combinations that can unlock each character, sorted in a way that makes it easy to understand.\n\n    >>> mario_kart(12)\n    [[3, 4, 5]]\n    >>> mario_kart(18)\n    [[3,4,5,6],[5,6,7]]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef mario_kart(requirement: int) -> List[List[int]]:\n    \"\"\"\n    A group of friends playing Mario Kart. They want to unlock all the hidden characters, but each character has a specific \"unlock requirement\" based on their combined race scores. They decide to form teams based on their racing skills so that each team can unlock a particular character. Each player is assigned a unique positive integer representing their skill level.\n\n    Unlock Requirement: Each hidden character has a specific \"unlock requirement\" based on the combined race scores needed. \n    Combinations: They need to find all possible teams where the sum of their skill levels meets the \"unlock requirement\" for a specific character.\n    \n    To keep things organized, they decide to:\n    Sort each team in ascending order by their assigned skill numbers.\n    Sort the list of teams in ascending order based on the lowest skill number in each team.\n    Given the unlock requirement, the final result will be a list of all possible team combinations that can unlock each character, sorted in a way that makes it easy to understand.\n\n    >>> mario_kart(12)\n    [[3, 4, 5]]\n    >>> mario_kart(18)\n    [[3,4,5,6],[5,6,7]]\n    \"\"\"", "function_name": "mario_kart", "parameters": ["requirement"]}
{"id": 162, "difficulty_types": 3, "question": "from typing import List\n\ndef optimal_sum(triangle: List[List[int]]) -> int:\n    \"\"\"\n    Given a triangle represented as a list of lists, where each inner list represents a row of integers, this function finds the minimum path sum from the top to the bottom of the triangle.\n\n    At each step, you can only move to adjacent nodes in the row below. For a node at index i, the adjacent nodes in the next row are at indices i and i + 1.\n\n    The function works by starting from the second-to-last row and moving upwards. For each element in a row, it updates the value to be the sum of the current value and the minimum value of its two children in the row below.\n\n    By the time the function reaches the top row, the single element in that row will contain the minimum path sum from the top to the bottom of the triangle.\n\n    >>> optimal_sum([[-10]])\n    -10\n    >>> optimal_sum([[1], [2, 3], [4, 5, 6]])\n    7\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef optimal_sum(triangle: List[List[int]]) -> int:\n    \"\"\"\n    Given a triangle represented as a list of lists, where each inner list represents a row of integers, this function finds the minimum path sum from the top to the bottom of the triangle.\n\n    At each step, you can only move to adjacent nodes in the row below. For a node at index i, the adjacent nodes in the next row are at indices i and i + 1.\n\n    The function works by starting from the second-to-last row and moving upwards. For each element in a row, it updates the value to be the sum of the current value and the minimum value of its two children in the row below.\n\n    By the time the function reaches the top row, the single element in that row will contain the minimum path sum from the top to the bottom of the triangle.\n\n    >>> optimal_sum([[-10]])\n    -10\n    >>> optimal_sum([[1], [2, 3], [4, 5, 6]])\n    7\n    \"\"\"", "function_name": "optimal_sum", "parameters": ["triangle"]}
{"id": 163, "difficulty_types": 3, "question": "from typing import List\n\ndef modulo_matrix(X: List[int], m: int) -> int:\n    \"\"\"\n    Given a matrix A, where the first row is defined as follows:\n\n\n    A(0,0) = 0\n    A(0,1) = 233\n    A(0,2) = 2333\n    A(0,3) = 23333\n    ... (The pattern continues, with each element being the previous element concatenated with \"233\")\n    And the rest of the matrix is defined by the following recurrence relation:\n\n\n    A(i,j) = A(i-1,j) + A(i,j-1)\n    Given an array X of n integers, where X[i] represents A(i+1,0). (For example, X[0] represents A(1,0), X[1] represents A(2,0), and so on.) and a positive integer m. Calculate the value of A(n,m) modulo 666666.\n    >>> modulo_matrix([1], 1)\n    234\n    >>> modulo_matrix([0, 0], 2)\n    2799\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef modulo_matrix(X: List[int], m: int) -> int:\n    \"\"\"\n    Given a matrix A, where the first row is defined as follows:\n\n\n    A(0,0) = 0\n    A(0,1) = 233\n    A(0,2) = 2333\n    A(0,3) = 23333\n    ... (The pattern continues, with each element being the previous element concatenated with \"233\")\n    And the rest of the matrix is defined by the following recurrence relation:\n\n\n    A(i,j) = A(i-1,j) + A(i,j-1)\n    Given an array X of n integers, where X[i] represents A(i+1,0). (For example, X[0] represents A(1,0), X[1] represents A(2,0), and so on.) and a positive integer m. Calculate the value of A(n,m) modulo 666666.\n    >>> modulo_matrix([1], 1)\n    234\n    >>> modulo_matrix([0, 0], 2)\n    2799\n    \"\"\"", "function_name": "modulo_matrix", "parameters": ["X", "m"]}
{"id": 164, "difficulty_types": 3, "question": "def skip_nine(n: int) -> int:\n    \"\"\"Wukong and his monkey friends are playing a fun counting game: they start counting from 1 one by one, but there's a special rule—they must skip any number that contains the digit \"9\".\n    For example, they count: \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", but skip \"9\". The next number they say should be \"10\", and they continue this pattern.\n    But they want to make this game more challenging, given a number n, can they determine the nth number in this sequence where all numbers containing the digit \"9\" are excluded?\n    >>> skip_nine(10)\n    11\n    >>> skip_nine(1031)\n    1365\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef skip_nine(n: int) -> int:\n    \"\"\"Wukong and his monkey friends are playing a fun counting game: they start counting from 1 one by one, but there's a special rule—they must skip any number that contains the digit \"9\".\n    For example, they count: \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", but skip \"9\". The next number they say should be \"10\", and they continue this pattern.\n    But they want to make this game more challenging, given a number n, can they determine the nth number in this sequence where all numbers containing the digit \"9\" are excluded?\n    >>> skip_nine(10)\n    11\n    >>> skip_nine(1031)\n    1365\n    \"\"\"", "function_name": "skip_nine", "parameters": ["n"]}
{"id": 165, "difficulty_types": 3, "question": "def koroks_game(l: int, r: int) -> int:\n    \"\"\"Link encountered a strange Korok in a maze, and in order to obtain the Korok's seed, he needs to play a game first. For this game, Link must randomly choose two integers from the Korok's pocket, say l and r such that l < r.\n    The Korok will use magic to generate a set of seed, which labels all integers from l to r respectively.\n    In each of Link's actions, he can only select 3 seeds whose numbers are pairwise mutually co-prime, and then he can obtain them. Suppose the numbers are a, b, c, they should satisfy gcd(a,b)=gcd(b,c)=gcd(a,c)=1, where gcd(x,y) means the greatest common divisor of integers x and y.\n    Give the boundary integers l, r, output the maximum number of seeds that Link can obtain?\n    >>> koroks_game(1, 3)\n    3\n    >>> koroks_game(10, 21)\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef koroks_game(l: int, r: int) -> int:\n    \"\"\"Link encountered a strange Korok in a maze, and in order to obtain the Korok's seed, he needs to play a game first. For this game, Link must randomly choose two integers from the Korok's pocket, say l and r such that l < r.\n    The Korok will use magic to generate a set of seed, which labels all integers from l to r respectively.\n    In each of Link's actions, he can only select 3 seeds whose numbers are pairwise mutually co-prime, and then he can obtain them. Suppose the numbers are a, b, c, they should satisfy gcd(a,b)=gcd(b,c)=gcd(a,c)=1, where gcd(x,y) means the greatest common divisor of integers x and y.\n    Give the boundary integers l, r, output the maximum number of seeds that Link can obtain?\n    >>> koroks_game(1, 3)\n    3\n    >>> koroks_game(10, 21)\n    3\n    \"\"\"", "function_name": "koroks_game", "parameters": ["l", "r"]}
{"id": 166, "difficulty_types": 3, "question": "def koroks_game2(u: int, k: int) -> int:\n    \"\"\"Link encountered a mysterious Korok in a maze, who has set up a challenging game for him. The Korok holds a magical seed, and initially, this seed is marked with a number n. Link's goal is to split the seed until every seed is marked with the number 1, in order to win the Korok's seed.\n    However, the Korok has set a rule: in each move, Link can choose a seed marked with the number u, and split it into no more than k new seeds. The sum of the numbers marked on these new seeds must equal u. Each split makes the numbers on the seeds smaller, but Link must minimize the number of splits to complete the task efficiently.\n    Link must figure out the minimum number of moves required to mark all the seeds with the number 1. Only then can he break the Korok's magic and win the valuable seed. Give the seed integers u, k, output the minimize number for Link to achieve this challenge.\n    >>> koroks_game(1, 5)\n    0\n    >>> koroks_game(5, 2)\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef koroks_game2(u: int, k: int) -> int:\n    \"\"\"Link encountered a mysterious Korok in a maze, who has set up a challenging game for him. The Korok holds a magical seed, and initially, this seed is marked with a number n. Link's goal is to split the seed until every seed is marked with the number 1, in order to win the Korok's seed.\n    However, the Korok has set a rule: in each move, Link can choose a seed marked with the number u, and split it into no more than k new seeds. The sum of the numbers marked on these new seeds must equal u. Each split makes the numbers on the seeds smaller, but Link must minimize the number of splits to complete the task efficiently.\n    Link must figure out the minimum number of moves required to mark all the seeds with the number 1. Only then can he break the Korok's magic and win the valuable seed. Give the seed integers u, k, output the minimize number for Link to achieve this challenge.\n    >>> koroks_game(1, 5)\n    0\n    >>> koroks_game(5, 2)\n    4\n    \"\"\"", "function_name": "koroks_game2", "parameters": ["u", "k"]}
{"id": 167, "difficulty_types": 3, "question": "def special_stone_game(n: int) -> str:\n    \"\"\"Alice and Bob are playing a game of picking stones. The rules of the game are as follows: There are n stones in total, and each time, a player can only pick p^k stones, where p is a prime number and k is a natural number, and p^k must be less than or equal to the number of stones remaining. The player who picks the last stone wins.\n\n    Alice goes first, and the question is whether she has a winning strategy.\n\n    If she has a winning strategy, output `YES`; otherwise, output `NO`.\n    >>> special_stone_game(2)\n    'YES'\n    >>> special_stone_game(6)\n    'NO'\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef special_stone_game(n: int) -> str:\n    \"\"\"Alice and Bob are playing a game of picking stones. The rules of the game are as follows: There are n stones in total, and each time, a player can only pick p^k stones, where p is a prime number and k is a natural number, and p^k must be less than or equal to the number of stones remaining. The player who picks the last stone wins.\n\n    Alice goes first, and the question is whether she has a winning strategy.\n\n    If she has a winning strategy, output `YES`; otherwise, output `NO`.\n    >>> special_stone_game(2)\n    'YES'\n    >>> special_stone_game(6)\n    'NO'\n    \"\"\"", "function_name": "special_stone_game", "parameters": ["n"]}
{"id": 168, "difficulty_types": 3, "question": "def chessboard_game_winner(n: int) -> str:\n    \"\"\"Given an n x n chessboard, a piece is placed in one corner. Tom and Jerry take turns moving the piece. Each turn, they can only move the piece one square up, down, left, or right, and the square moved to must not have been visited before. The player who cannot move the piece anymore loses.\n\n    If Tom moves first and both players use the best possible strategy, who will win in the end? Output 'Tom' or 'Jerry'.\n    >>> chessboard_game_winner(2)\n    'Tom'\n    >>> chessboard_game_winner(3)\n    'Jerry'\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef chessboard_game_winner(n: int) -> str:\n    \"\"\"Given an n x n chessboard, a piece is placed in one corner. Tom and Jerry take turns moving the piece. Each turn, they can only move the piece one square up, down, left, or right, and the square moved to must not have been visited before. The player who cannot move the piece anymore loses.\n\n    If Tom moves first and both players use the best possible strategy, who will win in the end? Output 'Tom' or 'Jerry'.\n    >>> chessboard_game_winner(2)\n    'Tom'\n    >>> chessboard_game_winner(3)\n    'Jerry'\n    \"\"\"", "function_name": "chessboard_game_winner", "parameters": ["n"]}
{"id": 169, "difficulty_types": 3, "question": "def number_game_strategy(A: int, B: int) -> str:\n    \"\"\"Jerry and Tom, are playing a numerical game. Given two positive integers A and B, starting with Jerry, the player subtracts a positive integer multiple of the smaller number from the larger number, ensuring the result is not less than 0. Then it's Tom's turn to do the same operation with the newly obtained number and the smaller of A and B ... until one of them reaches 0, declaring him the winner. Below is their game process using the numbers (24, 15):\n    Initial: (24, 15),\n    Jerry: (15, 9),\n    Tom: (9, 6),\n    Jerry: (6, 3),\n    Tom: (3, 0),\n    Tom wins the game.\n\n    Now, assuming they play perfectly, who will win? Output winner's name in string.\n    >>> number_game_strategy(24, 15)\n    'Tom'\n    >>> number_game_strategy(20, 12)\n    'Jerry'\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef number_game_strategy(A: int, B: int) -> str:\n    \"\"\"Jerry and Tom, are playing a numerical game. Given two positive integers A and B, starting with Jerry, the player subtracts a positive integer multiple of the smaller number from the larger number, ensuring the result is not less than 0. Then it's Tom's turn to do the same operation with the newly obtained number and the smaller of A and B ... until one of them reaches 0, declaring him the winner. Below is their game process using the numbers (24, 15):\n    Initial: (24, 15),\n    Jerry: (15, 9),\n    Tom: (9, 6),\n    Jerry: (6, 3),\n    Tom: (3, 0),\n    Tom wins the game.\n\n    Now, assuming they play perfectly, who will win? Output winner's name in string.\n    >>> number_game_strategy(24, 15)\n    'Tom'\n    >>> number_game_strategy(20, 12)\n    'Jerry'\n    \"\"\"", "function_name": "number_game_strategy", "parameters": ["A", "B"]}
{"id": 170, "difficulty_types": 3, "question": "def calendar_game(year:int, month: int, day: int) -> str:\n    \"\"\"Alice and Bob are playing a game where they first randomly select a date between 2000.1.1 and 2024.8.24. They then take turns performing operations on this date:\n\n    1. Add 1 to the day of the month, for example, 2000.1.1, changes to 2000.1.2;\n    2. Add 1 to the month, for example, 2000.1.1, changes to 2000.2.1.\n\n    If the day exceeds the number of days in that month, the date rolls over to the first day of the next month. If the month exceeds 12, it rolls over to January of the next year. Moreover, if an operation results in an invalid date like changing 2000.1.31, to 2000.2.31, such an operation is illegal and is not allowed. All operations must also consider the rules of the calendar and leap years.\n\n    The player who first changes the date to 2024.8.25, wins. If a player goes beyond this date, it does not count as a victory.\n\n    Each game starts with Alice making the first move. The question is, does she have a winning strategy? Output 'YES' or 'NO'.\n    >>> calendar_game(2001, 9, 5)\n    'YES'\n    >>> calendar_game(2024, 8, 24)\n    'YES'\n    >>> calendar_game(2001, 10, 3)\n    'NO'\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef calendar_game(year:int, month: int, day: int) -> str:\n    \"\"\"Alice and Bob are playing a game where they first randomly select a date between 2000.1.1 and 2024.8.24. They then take turns performing operations on this date:\n\n    1. Add 1 to the day of the month, for example, 2000.1.1, changes to 2000.1.2;\n    2. Add 1 to the month, for example, 2000.1.1, changes to 2000.2.1.\n\n    If the day exceeds the number of days in that month, the date rolls over to the first day of the next month. If the month exceeds 12, it rolls over to January of the next year. Moreover, if an operation results in an invalid date like changing 2000.1.31, to 2000.2.31, such an operation is illegal and is not allowed. All operations must also consider the rules of the calendar and leap years.\n\n    The player who first changes the date to 2024.8.25, wins. If a player goes beyond this date, it does not count as a victory.\n\n    Each game starts with Alice making the first move. The question is, does she have a winning strategy? Output 'YES' or 'NO'.\n    >>> calendar_game(2001, 9, 5)\n    'YES'\n    >>> calendar_game(2024, 8, 24)\n    'YES'\n    >>> calendar_game(2001, 10, 3)\n    'NO'\n    \"\"\"", "function_name": "calendar_game", "parameters": ["year", "month", "day"]}
{"id": 171, "difficulty_types": 4, "question": "from typing import List\ndef min_stations(supply_station_map: List[int]) -> int:\n        \"\"\"\n        :type supply_station_map: List[int]\n        :rtype: int\n        James is participating in a 100km race. At the 10th kilometer, he is exhausted, and he enters the first supply station to replenish himself. The staff at the supply station told James that he could replenish his energy at supply stations located every 10km. Each supply station can only support James for a certain number of kilometers, and it costs him an extra hour to enter each one. James' team doctor provided a map detailing the maximum distance each supply station's supplies could support him. The energy from each supply station cannot be accumulated. Upon entering a new station, James uses up all the energy from the previous station and takes in the supplies from the current one.\n\n        Your task is to devise a strategy for James to enter the supply stations such that he can complete the race in visiting the fewest aid stations possible.\n\n        Input:\n\n        supply_station_map: An array of length 8, where supply_station_map[i] represents the maximum distance the supplies at the i-th supply station can support James. supply_station_map[0] is the current supply station James is at.\n\n        Output:\n\n        Return the minimum number of times James needs to visit the supply stations to complete the remaining race in total. If it is impossible for James to finish the race, return -1.\n\n        >> min_stations([20,5,5,20,40,10,10,10])\n        -1\n\n        >> min_stations([20,5,10,20,40,10,5,10])\n        4\n\n        >> min_stations([40,5,10,20,40,10,5,10])\n        2\n\n        >> min_stations([40,10,70,10,10,10,5,10])\n        2\n        \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef min_stations(supply_station_map: List[int]) -> int:\n        \"\"\"\n        :type supply_station_map: List[int]\n        :rtype: int\n        James is participating in a 100km race. At the 10th kilometer, he is exhausted, and he enters the first supply station to replenish himself. The staff at the supply station told James that he could replenish his energy at supply stations located every 10km. Each supply station can only support James for a certain number of kilometers, and it costs him an extra hour to enter each one. James' team doctor provided a map detailing the maximum distance each supply station's supplies could support him. The energy from each supply station cannot be accumulated. Upon entering a new station, James uses up all the energy from the previous station and takes in the supplies from the current one.\n\n        Your task is to devise a strategy for James to enter the supply stations such that he can complete the race in visiting the fewest aid stations possible.\n\n        Input:\n\n        supply_station_map: An array of length 8, where supply_station_map[i] represents the maximum distance the supplies at the i-th supply station can support James. supply_station_map[0] is the current supply station James is at.\n\n        Output:\n\n        Return the minimum number of times James needs to visit the supply stations to complete the remaining race in total. If it is impossible for James to finish the race, return -1.\n\n        >> min_stations([20,5,5,20,40,10,10,10])\n        -1\n\n        >> min_stations([20,5,10,20,40,10,5,10])\n        4\n\n        >> min_stations([40,5,10,20,40,10,5,10])\n        2\n\n        >> min_stations([40,10,70,10,10,10,5,10])\n        2\n        \"\"\"", "function_name": "min_stations", "parameters": ["supply_station_map"]}
{"id": 172, "difficulty_types": 4, "question": "from typing import List\nimport sys\n\ndef weighted_dag(edges: List[List[int]]) -> int:\n    \"\"\"\n    Given a directed graph where each edge is represented by a triple, for example, [u, v, w] represents an edge with weight w from u to v. Calculate the minimum number of edges that need to be added to ensure that the sum of the weights of the edges pointing to each node is equal to the sum of the weights of the edges pointing out from that node. In other words, the total weight of the edges pointing to a node should be equal to the total weight of the edges pointing out from that node.\n\n    >>> weighted_dag([[0,1,10],[1,0,1],[1,2,5],[2,0,5]])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport sys\n\ndef weighted_dag(edges: List[List[int]]) -> int:\n    \"\"\"\n    Given a directed graph where each edge is represented by a triple, for example, [u, v, w] represents an edge with weight w from u to v. Calculate the minimum number of edges that need to be added to ensure that the sum of the weights of the edges pointing to each node is equal to the sum of the weights of the edges pointing out from that node. In other words, the total weight of the edges pointing to a node should be equal to the total weight of the edges pointing out from that node.\n\n    >>> weighted_dag([[0,1,10],[1,0,1],[1,2,5],[2,0,5]])\n    1\n    \"\"\"", "function_name": "weighted_dag", "parameters": ["edges"]}
{"id": 173, "difficulty_types": 4, "question": "from typing import List\nfrom math import atan2, pi, radians\n\n\ndef rotate_light(points: List[List[int]], angle: int) -> int:\n    \"\"\"\n    Given a set of 2D coordinate points, a light beam is emitted from the origin. The light beam has a fixed angle and can rotate around the origin. Return the maximum number of coordinate points that the light beam can illuminate.\n    >>> rotate_light([[0, 1], [1, 1], [2, 1]], 90)\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nfrom math import atan2, pi, radians\n\n\ndef rotate_light(points: List[List[int]], angle: int) -> int:\n    \"\"\"\n    Given a set of 2D coordinate points, a light beam is emitted from the origin. The light beam has a fixed angle and can rotate around the origin. Return the maximum number of coordinate points that the light beam can illuminate.\n    >>> rotate_light([[0, 1], [1, 1], [2, 1]], 90)\n    3\n    \"\"\"", "function_name": "rotate_light", "parameters": ["points", "angle"]}
{"id": 174, "difficulty_types": 4, "question": "from typing import List,Tuple\n\n\ndef virtual_meeting(schedule: List[List[int]]) -> List[Tuple]:\n    \"\"\"\n    Imagine you are the newly appointed meeting coordinator for a global tech company, Mihayou. The company has recently transitioned to a fully remote work model, and as a result, coordinating meetings across different teams has become increasingly challenging. Each team operates in different time zones and has unique schedules, making it difficult to find common free time slots for virtual meetings.\n\n    Each team has a list of non-overlapping time slots when they are available for meetings, and these time slots are sorted in order. Your task is to develop a system that can efficiently find the common free time slots across all teams.\n\n    Each team's availability is represented by a one-dimensional array, where every two numbers represent an interval. For example, [3,4,12,16] means this team is available from [3,4] and [12,16]. Note that the answer should not include intervals like [6,6], because their length is 0.\n\n    Return a list of common free time slots across all teams, sorted in order. The length of schedule and schedule[i] ranges from [1, 100].\n    >>> virtual_meeting([[1,2,5,6],[1,3],[4,10]])\n    [(3, 4)]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List,Tuple\n\n\ndef virtual_meeting(schedule: List[List[int]]) -> List[Tuple]:\n    \"\"\"\n    Imagine you are the newly appointed meeting coordinator for a global tech company, Mihayou. The company has recently transitioned to a fully remote work model, and as a result, coordinating meetings across different teams has become increasingly challenging. Each team operates in different time zones and has unique schedules, making it difficult to find common free time slots for virtual meetings.\n\n    Each team has a list of non-overlapping time slots when they are available for meetings, and these time slots are sorted in order. Your task is to develop a system that can efficiently find the common free time slots across all teams.\n\n    Each team's availability is represented by a one-dimensional array, where every two numbers represent an interval. For example, [3,4,12,16] means this team is available from [3,4] and [12,16]. Note that the answer should not include intervals like [6,6], because their length is 0.\n\n    Return a list of common free time slots across all teams, sorted in order. The length of schedule and schedule[i] ranges from [1, 100].\n    >>> virtual_meeting([[1,2,5,6],[1,3],[4,10]])\n    [(3, 4)]\n    \"\"\"", "function_name": "virtual_meeting", "parameters": ["schedule"]}
{"id": 175, "difficulty_types": 4, "question": "from typing import List\ndef auction_bidding(quotes: List[int]) -> int:\n    \"\"\"\n    Tom has participated in a weird auction, but despite always placing the highest bids, he never wins the items he desires. He discovers that the auction host uses a unique bidding strategy that confuses many participants.\n\n    In this special auction:\n    The host asks his assistants to provide a set of basic bids, represented by an array of integers called quotes.\n    Instead of accepting the highest bid, the host prefer the most smart bidder. The host looks for the first bidder who quotes the lowest price that does not appear in the quotes array.\n    Write a function to help Tom determine the lowest price he can bid that is not present in the quotes array. Tom aims to win the auction by quoting this lowest price quickly.\n    auction_bidding(quotes = [1,2,2,2,3,4,0])\n    >>> 5\n    auction_bidding(quotes = [3,4,5,6,1])\n    >>> 2\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef auction_bidding(quotes: List[int]) -> int:\n    \"\"\"\n    Tom has participated in a weird auction, but despite always placing the highest bids, he never wins the items he desires. He discovers that the auction host uses a unique bidding strategy that confuses many participants.\n\n    In this special auction:\n    The host asks his assistants to provide a set of basic bids, represented by an array of integers called quotes.\n    Instead of accepting the highest bid, the host prefer the most smart bidder. The host looks for the first bidder who quotes the lowest price that does not appear in the quotes array.\n    Write a function to help Tom determine the lowest price he can bid that is not present in the quotes array. Tom aims to win the auction by quoting this lowest price quickly.\n    auction_bidding(quotes = [1,2,2,2,3,4,0])\n    >>> 5\n    auction_bidding(quotes = [3,4,5,6,1])\n    >>> 2\n    \"\"\"", "function_name": "auction_bidding", "parameters": ["quotes"]}
{"id": 176, "difficulty_types": 4, "question": "from typing import List\ndef recycling_promotion(num_initial, num_exchange, product):\n    \"\"\"\n    Xiao Ming's local supermarket offers a variety of products, including [\"Mineral Water\", \"Coke\", \"Cooking Oil\", \"Beer\", \"Fruits\"].\n    In an effort to promote environmental sustainability, the supermarket encourages customers to recycle their used products. They have initiated a promotional activity that allows customers to exchange used products for new products.\n\n    Your goal is to calculate the total number of the products that Xiao Ming can have, considering both the initially purchased products and the products obtained through exchanges.\n\n    Example:\n    For instance, if num_initial = 9 and num_exchange = 3, Xiao Ming purchased 9 bottles of mineral water, the process would be as follows:\n\n    Start with 9 bottles: drink them all. (9 empty bottles left)\n    Exchange 9 empty bottles for 3 new bottles.\n    Drink the exchanged 3 bottles, resulting in 3 empty bottles.\n    Exchange 3 empty bottles for 1 more bottle.\n    Drink that bottle, resulting in 1 empty bottle.\n    In total, Xiao Ming drinks 13 bottles of water.\n\n    >>> recycling_promotion(9,3,'water')\n    13\n    >>> recycling_promotion(5,3,'water')\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef recycling_promotion(num_initial, num_exchange, product):\n    \"\"\"\n    Xiao Ming's local supermarket offers a variety of products, including [\"Mineral Water\", \"Coke\", \"Cooking Oil\", \"Beer\", \"Fruits\"].\n    In an effort to promote environmental sustainability, the supermarket encourages customers to recycle their used products. They have initiated a promotional activity that allows customers to exchange used products for new products.\n\n    Your goal is to calculate the total number of the products that Xiao Ming can have, considering both the initially purchased products and the products obtained through exchanges.\n\n    Example:\n    For instance, if num_initial = 9 and num_exchange = 3, Xiao Ming purchased 9 bottles of mineral water, the process would be as follows:\n\n    Start with 9 bottles: drink them all. (9 empty bottles left)\n    Exchange 9 empty bottles for 3 new bottles.\n    Drink the exchanged 3 bottles, resulting in 3 empty bottles.\n    Exchange 3 empty bottles for 1 more bottle.\n    Drink that bottle, resulting in 1 empty bottle.\n    In total, Xiao Ming drinks 13 bottles of water.\n\n    >>> recycling_promotion(9,3,'water')\n    13\n    >>> recycling_promotion(5,3,'water')\n    6\n    \"\"\"", "function_name": "recycling_promotion", "parameters": ["num_initial", "num_exchange", "product"]}
{"id": 177, "difficulty_types": 4, "question": "from typing import List\n\ndef is_safe_route_possible(x_target: int, y_target: int, storms: List[List[int]]) -> bool:\n    \"\"\"A shipping company is planning a route across a rectangular sea area, which stretches from coordinates (0, 0) to (x_target, y_target). However, several powerful storms have formed at various locations in the sea. Each storm is circular, and its position and size are described by a list, where each storm is given as [x_i, y_i, r_i], indicating its center and radius.\n    The company needs to determine if a ship can sail from the bottom-left corner (0, 0) to the top-right corner (x_target, y_target) without entering or touching any of the storm-affected areas. The ship must remain inside the rectangle at all times, except at the starting and ending points.\n    Return true if a safe route exists, otherwise return false.\n    >>> is_safe_route_possible(4, 4, [[2, 2, 1]])\n    True\n    >>> is_safe_route_possible(3, 4, [[2, 1, 1], [1, 2, 1]])\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef is_safe_route_possible(x_target: int, y_target: int, storms: List[List[int]]) -> bool:\n    \"\"\"A shipping company is planning a route across a rectangular sea area, which stretches from coordinates (0, 0) to (x_target, y_target). However, several powerful storms have formed at various locations in the sea. Each storm is circular, and its position and size are described by a list, where each storm is given as [x_i, y_i, r_i], indicating its center and radius.\n    The company needs to determine if a ship can sail from the bottom-left corner (0, 0) to the top-right corner (x_target, y_target) without entering or touching any of the storm-affected areas. The ship must remain inside the rectangle at all times, except at the starting and ending points.\n    Return true if a safe route exists, otherwise return false.\n    >>> is_safe_route_possible(4, 4, [[2, 2, 1]])\n    True\n    >>> is_safe_route_possible(3, 4, [[2, 1, 1], [1, 2, 1]])\n    False\n    \"\"\"", "function_name": "is_safe_route_possible", "parameters": ["x_target", "y_target", "storms"]}
{"id": 178, "difficulty_types": 4, "question": "from typing import List\ndef find_pier_location(L:int, N:int, x: List[int], r: List[int]) -> int:\n    \"\"\"In a coastal town, there is a long boardwalk stretching along the shoreline, with a total length of L meters. The coordinates along the boardwalk range from 0 to L. There are N houses situated along the boardwalk, with the i-th house located at coordinate x_i, and it is home to r_i residents.\n    The town council has decided to build a pier along the boardwalk for residents to easily access boats. The council wants to select a location for the pier such that the total walking distance for all the residents from their homes to the pier is minimized.\n    Please output the minimum total walinking distance.\n    >>> find_pier_location(10, 2, [0, 10], [1, 3])\n    10\n    >>> find_pier_location(20, 3, [0, 10, 19], [5, 1, 4])\n    86\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef find_pier_location(L:int, N:int, x: List[int], r: List[int]) -> int:\n    \"\"\"In a coastal town, there is a long boardwalk stretching along the shoreline, with a total length of L meters. The coordinates along the boardwalk range from 0 to L. There are N houses situated along the boardwalk, with the i-th house located at coordinate x_i, and it is home to r_i residents.\n    The town council has decided to build a pier along the boardwalk for residents to easily access boats. The council wants to select a location for the pier such that the total walking distance for all the residents from their homes to the pier is minimized.\n    Please output the minimum total walinking distance.\n    >>> find_pier_location(10, 2, [0, 10], [1, 3])\n    10\n    >>> find_pier_location(20, 3, [0, 10, 19], [5, 1, 4])\n    86\n    \"\"\"", "function_name": "find_pier_location", "parameters": ["L", "N", "x", "r"]}
{"id": 179, "difficulty_types": 4, "question": "def measure_grain(m: int, n: int, k: int) -> bool:\n    \"\"\"You are a farmer, and you have two grain bags that can hold m kilograms and n kilograms of grain, respectively. You have an unlimited supply of grain. Your goal is to accurately measure out exactly k kilograms of grain. You can perform the following operations:\n    1. Fill either grain bag to its full capacity: You can fill one of the grain bags to its maximum capacity.\n    2. Empty either grain bag completely: You can empty all the grain from one of the grain bags, making it completely empty.\n    3. Pour grain from one bag into the other: You can pour grain from one grain bag into the other until the receiving bag is full, or the bag you are pouring from is empty.\n    >>> measure_grain(5, 3, 4)\n    True\n    >>> measure_grain(4, 6, 3)\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef measure_grain(m: int, n: int, k: int) -> bool:\n    \"\"\"You are a farmer, and you have two grain bags that can hold m kilograms and n kilograms of grain, respectively. You have an unlimited supply of grain. Your goal is to accurately measure out exactly k kilograms of grain. You can perform the following operations:\n    1. Fill either grain bag to its full capacity: You can fill one of the grain bags to its maximum capacity.\n    2. Empty either grain bag completely: You can empty all the grain from one of the grain bags, making it completely empty.\n    3. Pour grain from one bag into the other: You can pour grain from one grain bag into the other until the receiving bag is full, or the bag you are pouring from is empty.\n    >>> measure_grain(5, 3, 4)\n    True\n    >>> measure_grain(4, 6, 3)\n    False\n    \"\"\"", "function_name": "measure_grain", "parameters": ["m", "n", "k"]}
{"id": 180, "difficulty_types": 4, "question": "def line_intersection_numbers(N: int) -> int:\n    \"\"\"Assuming there are N lines on a plane and no three lines intersect at the same point, how many possible numbers of intersection points are there? Note that 1 <= N <= 25.\n    >>> line_intersection_numbers(2)\n    2\n    >>> line_intersection_numbers(4)\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef line_intersection_numbers(N: int) -> int:\n    \"\"\"Assuming there are N lines on a plane and no three lines intersect at the same point, how many possible numbers of intersection points are there? Note that 1 <= N <= 25.\n    >>> line_intersection_numbers(2)\n    2\n    >>> line_intersection_numbers(4)\n    5\n    \"\"\"", "function_name": "line_intersection_numbers", "parameters": ["N"]}
{"id": 181, "difficulty_types": 5, "question": "def minimum_operation_to_finish(num: int):\n    \"\"\"\n    Alice and Bob are playing a game. Assume there are num stones. When the number of stones is even, Alice will take away half of the stones. If the number of stones is odd, Bob will either add one stone or take one away. The game ends when there is only one stone left. Please help them calculate the minimum number of operations combined that they need to perform to end the game.\n    >>> 3\n    2\n    >>> 7\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef minimum_operation_to_finish(num: int):\n    \"\"\"\n    Alice and Bob are playing a game. Assume there are num stones. When the number of stones is even, Alice will take away half of the stones. If the number of stones is odd, Bob will either add one stone or take one away. The game ends when there is only one stone left. Please help them calculate the minimum number of operations combined that they need to perform to end the game.\n    >>> 3\n    2\n    >>> 7\n    4\n    \"\"\"", "function_name": "minimum_operation_to_finish", "parameters": ["num"]}
{"id": 182, "difficulty_types": 5, "question": "from typing import List\n\ndef max_sum_submatrix(matrix: List[List[int]], k: int) -> int:\n    \"\"\"Given a matrix where each element indicates the pollution level of a block, and an integer k, return the maximum pollution sum of a contiguous submatrix (rectangular region) such that the sum does not exceed k. If no such submatrix exists, return False.\n    >>> max_sum_submatrix([[1, 0, 1], [0, -2, 3]], 2)\n    2\n    >>> max_sum_submatrix([[2, 2, -1]], 3)\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_sum_submatrix(matrix: List[List[int]], k: int) -> int:\n    \"\"\"Given a matrix where each element indicates the pollution level of a block, and an integer k, return the maximum pollution sum of a contiguous submatrix (rectangular region) such that the sum does not exceed k. If no such submatrix exists, return False.\n    >>> max_sum_submatrix([[1, 0, 1], [0, -2, 3]], 2)\n    2\n    >>> max_sum_submatrix([[2, 2, -1]], 3)\n    3\n    \"\"\"", "function_name": "max_sum_submatrix", "parameters": ["matrix", "k"]}
{"id": 183, "difficulty_types": 5, "question": "def install_fence(trees: list[list[int]]) -> set[tuple[int, int]]:\n    \"\"\"\n    There are many trees in the garden, and we have an array of trees where trees[i] = [xi, yi] represents the position of a tree in the garden.\n    The farmer plans to enclose the entire garden with the shortest length of rope. The garden is considered well-enclosed only when all trees are inside the fence.\n    Output the coordinates of the trees that are exactly on the boundary of the fence.\n\n    Contraints:\n    - If multiple trees are aligned along the same line (colinear), only the outermost trees are considered to be on the boundary of the fence. Output the minimal convex hull that encloses all the trees.\n    >>> install_fence([[0, 0], [2, 0], [1, 1], [2, 2]])\n    {(2, 0), (2, 2), (0, 0)}\n    >>> install_fence([[0, 0], [1, 0], [1, 1]])\n    {(1, 0), (1, 1), (0, 0)}\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef install_fence(trees: list[list[int]]) -> set[tuple[int, int]]:\n    \"\"\"\n    There are many trees in the garden, and we have an array of trees where trees[i] = [xi, yi] represents the position of a tree in the garden.\n    The farmer plans to enclose the entire garden with the shortest length of rope. The garden is considered well-enclosed only when all trees are inside the fence.\n    Output the coordinates of the trees that are exactly on the boundary of the fence.\n\n    Contraints:\n    - If multiple trees are aligned along the same line (colinear), only the outermost trees are considered to be on the boundary of the fence. Output the minimal convex hull that encloses all the trees.\n    >>> install_fence([[0, 0], [2, 0], [1, 1], [2, 2]])\n    {(2, 0), (2, 2), (0, 0)}\n    >>> install_fence([[0, 0], [1, 0], [1, 1]])\n    {(1, 0), (1, 1), (0, 0)}\n    \"\"\"", "function_name": "install_fence", "parameters": ["trees"]}
{"id": 184, "difficulty_types": 5, "question": "def count_farm_field_divisions(n: int, m: int) -> int:\n    \"\"\"\n    A farmer has a rectangular field with m rows and n columns, divided into a grid of cells.\n    The farmer wants to divide this field into two connected regions under the following conditions:\n    - Each region is connected; that is, within a region, you can move from any cell to any other cell\n      by moving up, down, left, or right to adjacent cells within the same region.\n    - Each region must contain at least one cell that is on the outer edge of the field.\n    Calculate and return the total number of ways the farmer can divide the field according to these rules.\n    Constraints:\n    - 1 <= a <= 6\n    - 1 <= b <= 6\n    >>> count_farm_field_divisions(2, 2)\n    4\n    >>> count_farm_field_divisions(3, 3)\n    24\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef count_farm_field_divisions(n: int, m: int) -> int:\n    \"\"\"\n    A farmer has a rectangular field with m rows and n columns, divided into a grid of cells.\n    The farmer wants to divide this field into two connected regions under the following conditions:\n    - Each region is connected; that is, within a region, you can move from any cell to any other cell\n      by moving up, down, left, or right to adjacent cells within the same region.\n    - Each region must contain at least one cell that is on the outer edge of the field.\n    Calculate and return the total number of ways the farmer can divide the field according to these rules.\n    Constraints:\n    - 1 <= a <= 6\n    - 1 <= b <= 6\n    >>> count_farm_field_divisions(2, 2)\n    4\n    >>> count_farm_field_divisions(3, 3)\n    24\n    \"\"\"", "function_name": "count_farm_field_divisions", "parameters": ["n", "m"]}
{"id": 185, "difficulty_types": 5, "question": "def word_maze(grid: list[list[str]], target: str) -> bool:\n    \"\"\"\n    Jack is facing the challenge of the letter maze. Imagine him standing before a grid of letters where each cell contains a single letter.\n    His task is to find the target word hidden within the grid. Jack can start at any cell and can move in the four cardinal directions (up, down, left, right).\n    However, he can not revisit any cell while searching for the same word.\n\n    We should write a function that will return True if Jack can find the target word in the grid, and False otherwise.\n\n    >>> word_maze([['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], \"ABCCED\")\n    True\n    >>> word_maze([['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], \"ABCB\")\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef word_maze(grid: list[list[str]], target: str) -> bool:\n    \"\"\"\n    Jack is facing the challenge of the letter maze. Imagine him standing before a grid of letters where each cell contains a single letter.\n    His task is to find the target word hidden within the grid. Jack can start at any cell and can move in the four cardinal directions (up, down, left, right).\n    However, he can not revisit any cell while searching for the same word.\n\n    We should write a function that will return True if Jack can find the target word in the grid, and False otherwise.\n\n    >>> word_maze([['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], \"ABCCED\")\n    True\n    >>> word_maze([['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], \"ABCB\")\n    False\n    \"\"\"", "function_name": "word_maze", "parameters": ["grid", "target"]}
{"id": 186, "difficulty_types": 5, "question": "from typing import List\n\ndef compress_string(s: List[str]) -> List[int]:\n    \"\"\"\n    There is a word compression method for a string array s. We initialize the compressed string as s[0], then concatenate the compressed string with s[1], ensuring that the overlapping suffix of the compressed string and the prefix of s[1] do not repeat. For example, \"aba\" + \"cba\" --> \"abacba\", and \"aba\" + \"bac\" --> \"abac\". We then concatenate the compressed string with the remaining strings in the array s in sequence to obtain the final compressed string.\n\n    Given the string array s, please output the first occurrence position of each string in s within the final compressed string.\n\n    >>> compress_string([\"aaa\",\"bb\",\"cc\"])\n    [0, 3, 5]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef compress_string(s: List[str]) -> List[int]:\n    \"\"\"\n    There is a word compression method for a string array s. We initialize the compressed string as s[0], then concatenate the compressed string with s[1], ensuring that the overlapping suffix of the compressed string and the prefix of s[1] do not repeat. For example, \"aba\" + \"cba\" --> \"abacba\", and \"aba\" + \"bac\" --> \"abac\". We then concatenate the compressed string with the remaining strings in the array s in sequence to obtain the final compressed string.\n\n    Given the string array s, please output the first occurrence position of each string in s within the final compressed string.\n\n    >>> compress_string([\"aaa\",\"bb\",\"cc\"])\n    [0, 3, 5]\n    \"\"\"", "function_name": "compress_string", "parameters": ["s"]}
{"id": 187, "difficulty_types": 5, "question": "from typing import List\n\n\ndef clean_river(atk1: List[int], atk2: List[int]) -> int:\n    \"\"\"\n    You are an environmental scientist tasked with cleaning up a series of polluted sites along a river. Each site has a primary pollution level (corresponding to atk1[]) and also affects its neighboring sites with additional pollution (corresponding to atk2[]). When you clean up a site, you're exposed to its primary pollution plus the additional pollution from the two adjacent sites.\n\n    The goal is to determine the order in which to clean the sites to minimize your total pollution exposure.\n\n    >>> clean_river([10, 20, 30, 40, 50], [5, 10, 15, 20, 25])\n    200\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef clean_river(atk1: List[int], atk2: List[int]) -> int:\n    \"\"\"\n    You are an environmental scientist tasked with cleaning up a series of polluted sites along a river. Each site has a primary pollution level (corresponding to atk1[]) and also affects its neighboring sites with additional pollution (corresponding to atk2[]). When you clean up a site, you're exposed to its primary pollution plus the additional pollution from the two adjacent sites.\n\n    The goal is to determine the order in which to clean the sites to minimize your total pollution exposure.\n\n    >>> clean_river([10, 20, 30, 40, 50], [5, 10, 15, 20, 25])\n    200\n    \"\"\"", "function_name": "clean_river", "parameters": ["atk1", "atk2"]}
{"id": 188, "difficulty_types": 5, "question": "from typing import List\nimport bisect\ndef peak_view(viewership: List[int], queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    You are a data analyst working for a popular video streaming platform. The platform allows users to watch videos and tracks the viewership data for each video. A peak in viewership is defined as a time point where the number of viewers is greater than the previous and next time points.\n\n    You are given an array viewership representing the number of viewers at each time point for a particular video. Additionally, you have a 2D array queries representing two types of queries:\n\n    1. queries[i] = [1, starti, endi]: Determine the count of peak viewership moments within the time range [starti, endi] (inclusive) for the video.\n    2. queries[i] = [2, timei, valuei]: Update the viewership count at time point timei to valuei.\n\n    Your task is to process these queries and return an array `answer` containing the results of the queries of the first type in the order they appear.\n\n    Notes:\n    - The first and the last time points of the video or a time range cannot be considered as peak viewership moments.\n\n    >>> peak_view(viewership = [3000, 1000, 4000, 2000, 5000], queries = [[2, 3, 4000], [1, 0, 4]])\n    [0]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport bisect\ndef peak_view(viewership: List[int], queries: List[List[int]]) -> List[int]:\n    \"\"\"\n    You are a data analyst working for a popular video streaming platform. The platform allows users to watch videos and tracks the viewership data for each video. A peak in viewership is defined as a time point where the number of viewers is greater than the previous and next time points.\n\n    You are given an array viewership representing the number of viewers at each time point for a particular video. Additionally, you have a 2D array queries representing two types of queries:\n\n    1. queries[i] = [1, starti, endi]: Determine the count of peak viewership moments within the time range [starti, endi] (inclusive) for the video.\n    2. queries[i] = [2, timei, valuei]: Update the viewership count at time point timei to valuei.\n\n    Your task is to process these queries and return an array `answer` containing the results of the queries of the first type in the order they appear.\n\n    Notes:\n    - The first and the last time points of the video or a time range cannot be considered as peak viewership moments.\n\n    >>> peak_view(viewership = [3000, 1000, 4000, 2000, 5000], queries = [[2, 3, 4000], [1, 0, 4]])\n    [0]\n    \"\"\"", "function_name": "peak_view", "parameters": ["viewership", "queries"]}
{"id": 189, "difficulty_types": 5, "question": "from typing import List\ndef winter_melon_guard(corridor: List[int], n:int)->bool:\n    \"\"\"\n    In the game Plants vs. Zombies, players can place winter melon guards in a corridor to prevent zombies from attacking. A skilled player, Xiao Ming, has a strategy that improves the efficiency of blocking zombies by maintaining at least one gap between each pair of winter melon guards.\n    You are given an array \"corridor\", where each element represents a position in the corridor:\n    1 indicates the presence of a winter melon guard at that position.\n    0 indicates an empty space where a guard can potentially be placed.\n    Xiao Ming wants to plant n new winter melon guards in the corridor. Your task is to determine if it is possible to plant exactly n guards while adhering to his strategy that efficiently block the zombies.\n\n    >>> winter_melon_guard([1,0,0,0,0,1,0,0,0,1], 1)\n    True\n    >>> winter_melon_guard([1,0,0,0,0,1,0,0,0,1], 4)\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef winter_melon_guard(corridor: List[int], n:int)->bool:\n    \"\"\"\n    In the game Plants vs. Zombies, players can place winter melon guards in a corridor to prevent zombies from attacking. A skilled player, Xiao Ming, has a strategy that improves the efficiency of blocking zombies by maintaining at least one gap between each pair of winter melon guards.\n    You are given an array \"corridor\", where each element represents a position in the corridor:\n    1 indicates the presence of a winter melon guard at that position.\n    0 indicates an empty space where a guard can potentially be placed.\n    Xiao Ming wants to plant n new winter melon guards in the corridor. Your task is to determine if it is possible to plant exactly n guards while adhering to his strategy that efficiently block the zombies.\n\n    >>> winter_melon_guard([1,0,0,0,0,1,0,0,0,1], 1)\n    True\n    >>> winter_melon_guard([1,0,0,0,0,1,0,0,0,1], 4)\n    False\n    \"\"\"", "function_name": "winter_melon_guard", "parameters": ["corridor", "n"]}
{"id": 190, "difficulty_types": 5, "question": "from typing import List\ndef count_valid_permutations(n: int, tasks: List[List[int]]) -> int:\n    \"\"\"You are given an integer n and a 2D array tasks, where each task tasks[i] = [limit_i, inv_count_i] describes a specific task's limit and the required number of inversions.\n    In the context of this problem, an inversion refers to a pair of indices (i, j) in a sequence seq such that i < j and seq[i] > seq[j].\n    Your objective is to find the number of different ways to arrange the numbers from 0 to n - 1 (a permutation of these numbers) such that, for each task i, the subarray seq[0..limit_i] contains exactly inv_count_i inversions.\n    Result could be very large, return it modulo 10^9 + 7\n    >>> count_valid_permutations([[2,1],[0,0]])\n    2\n    >>> count_valid_permutations([[2,1],[1,1],[0,0]])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef count_valid_permutations(n: int, tasks: List[List[int]]) -> int:\n    \"\"\"You are given an integer n and a 2D array tasks, where each task tasks[i] = [limit_i, inv_count_i] describes a specific task's limit and the required number of inversions.\n    In the context of this problem, an inversion refers to a pair of indices (i, j) in a sequence seq such that i < j and seq[i] > seq[j].\n    Your objective is to find the number of different ways to arrange the numbers from 0 to n - 1 (a permutation of these numbers) such that, for each task i, the subarray seq[0..limit_i] contains exactly inv_count_i inversions.\n    Result could be very large, return it modulo 10^9 + 7\n    >>> count_valid_permutations([[2,1],[0,0]])\n    2\n    >>> count_valid_permutations([[2,1],[1,1],[0,0]])\n    1\n    \"\"\"", "function_name": "count_valid_permutations", "parameters": ["n", "tasks"]}
{"id": 191, "difficulty_types": 6, "question": "from typing import List\n\ndef max_sum_subsequence(nums: List[int], queries: List[List[int]]) -> int:\n    \"\"\"You are a financial analyst working for a company that manages investment portfolios. The company has a list of\n    potential investments, represented by an array nums, where each element represents the projected return of an investment.\n\n    The company receives a series of queries from clients, represented by a 2D array queries, where each query\n    queries[i] = [posi, xi] indicates that the client wants to update the projected return of the investment at index posi\n    to xi and then calculate the maximum sum of a subsequence of the updated investment returns, where no two adjacent\n    investments are selected.\n\n    Your task is to process each query and return the sum of the maximum subsequence sums for all queries, modulo 10^9 + 7.\n\n    Constraints:\n    - 1 <= nums.length <= 5 * 10^4\n    - -10^5 <= nums[i] <= 10^5\n    - 1 <= queries.length <= 5 * 10^4\n    - queries[i] == [posi, xi]\n    - 0 <= posi <= nums.length - 1\n    - -10^5 <= xi <= 10^5\n\n    Return the sum of the maximum subsequence sums for all queries, modulo 10^9 + 7.\n\n    >>> max_sum_subsequence([3, 5, 9], [[1, -2], [0, -3]])\n    21\n    >>> max_sum_subsequence([0, -1], [[0, -5]])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_sum_subsequence(nums: List[int], queries: List[List[int]]) -> int:\n    \"\"\"You are a financial analyst working for a company that manages investment portfolios. The company has a list of\n    potential investments, represented by an array nums, where each element represents the projected return of an investment.\n\n    The company receives a series of queries from clients, represented by a 2D array queries, where each query\n    queries[i] = [posi, xi] indicates that the client wants to update the projected return of the investment at index posi\n    to xi and then calculate the maximum sum of a subsequence of the updated investment returns, where no two adjacent\n    investments are selected.\n\n    Your task is to process each query and return the sum of the maximum subsequence sums for all queries, modulo 10^9 + 7.\n\n    Constraints:\n    - 1 <= nums.length <= 5 * 10^4\n    - -10^5 <= nums[i] <= 10^5\n    - 1 <= queries.length <= 5 * 10^4\n    - queries[i] == [posi, xi]\n    - 0 <= posi <= nums.length - 1\n    - -10^5 <= xi <= 10^5\n\n    Return the sum of the maximum subsequence sums for all queries, modulo 10^9 + 7.\n\n    >>> max_sum_subsequence([3, 5, 9], [[1, -2], [0, -3]])\n    21\n    >>> max_sum_subsequence([0, -1], [[0, -5]])\n    0\n    \"\"\"", "function_name": "max_sum_subsequence", "parameters": ["nums", "queries"]}
{"id": 192, "difficulty_types": 6, "question": "from typing import List\nimport heapq\n\ndef delivery_cost(num_stations: int, air_routes: List[int], source_station: int, target_station: int, max_time_steps: int) -> int:\n    \"\"\"\n    James, a supply chain manager, needs to optimize transportation routes for parts delivery. Traditionally, parts were shipped directly. Now, they want to leverage economies of scale by using multi-stop routes with air and land freight options.  Air freight is faster but more expensive, while land freight is slower and cheaper (half the cost of air freight, but takes twice the time). Given a network of stations, air freight routes (source, destination, cost), a source station, a target station, and a maximum allowed delivery time, develop an algorithm that finds the minimum cost to deliver a part within the time constraint. If no route exists within the time limit, return -1.\n\n    Input:\n    num_stations: The total number of logistics stations.\n    air_routes: A 2D array where air_routes[i] represents an air freight route as [source, destination, cost].\n    source_station: Starting station.\n    target_station: Destination station.\n    max_time_steps: The maximum allowed time for delivery.\n\n    Output: Minimum cost to deliver the part within the time constraint, or -1 if no route exists.\n\n    Constraints:\n    Air travel takes 1 time step per route.\n    Land travel takes 2 time steps per route.\n\n    >>> delivery_cost(5, [[0,1,20],[0,2,100],[0,3,9000],[2,3,600],[2,4,200]], 0, 3, 1)\n    9000\n    >>> delivery_cost(5, [[0,1,20],[0,2,100],[3,4,600]], 0, 4, 4)\n    -1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport heapq\n\ndef delivery_cost(num_stations: int, air_routes: List[int], source_station: int, target_station: int, max_time_steps: int) -> int:\n    \"\"\"\n    James, a supply chain manager, needs to optimize transportation routes for parts delivery. Traditionally, parts were shipped directly. Now, they want to leverage economies of scale by using multi-stop routes with air and land freight options.  Air freight is faster but more expensive, while land freight is slower and cheaper (half the cost of air freight, but takes twice the time). Given a network of stations, air freight routes (source, destination, cost), a source station, a target station, and a maximum allowed delivery time, develop an algorithm that finds the minimum cost to deliver a part within the time constraint. If no route exists within the time limit, return -1.\n\n    Input:\n    num_stations: The total number of logistics stations.\n    air_routes: A 2D array where air_routes[i] represents an air freight route as [source, destination, cost].\n    source_station: Starting station.\n    target_station: Destination station.\n    max_time_steps: The maximum allowed time for delivery.\n\n    Output: Minimum cost to deliver the part within the time constraint, or -1 if no route exists.\n\n    Constraints:\n    Air travel takes 1 time step per route.\n    Land travel takes 2 time steps per route.\n\n    >>> delivery_cost(5, [[0,1,20],[0,2,100],[0,3,9000],[2,3,600],[2,4,200]], 0, 3, 1)\n    9000\n    >>> delivery_cost(5, [[0,1,20],[0,2,100],[3,4,600]], 0, 4, 4)\n    -1\n    \"\"\"", "function_name": "delivery_cost", "parameters": ["num_stations", "air_routes", "source_station", "target_station", "max_time_steps"]}
{"id": 193, "difficulty_types": 6, "question": "from typing import List\n\ndef file_master(n: int, left: int, right: int, weight: List[int]) -> int:\n    \"\"\"\n    You are a data analyst tasked with consolidating multiple data files scattered across various directories. Each file contains a certain amount of information, represented by its size (in bytes). Your goal is to merge all these files into a single, comprehensive file, which will simplify your analysis.\n\n    Rules of the Merge:\n    1. Files Arrangement: The files are arranged in n separate units in a linear sequence.\n    2. Merging Criteria:\n    2.1 You can merge x consecutive files, where left <= x <= right.\n    2.2 The cost of merging these x files is the sum of their sizes.\n    \n    Objective: Your objective is to find the minimum cost required to merge all the files into one. However, if it's impossible to merge them according to the specified rules, you should return 0.\n\n    Input Parameters:\n    n: The total number of data files.\n    left: The minimum number of consecutive files you can merge at once.\n    right: The maximum number of consecutive files you can merge at once.\n    size: An array representing the sizes of each file.\n\n    >>> file_master(4,2,2,[1,2,3,4])\n    19\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef file_master(n: int, left: int, right: int, weight: List[int]) -> int:\n    \"\"\"\n    You are a data analyst tasked with consolidating multiple data files scattered across various directories. Each file contains a certain amount of information, represented by its size (in bytes). Your goal is to merge all these files into a single, comprehensive file, which will simplify your analysis.\n\n    Rules of the Merge:\n    1. Files Arrangement: The files are arranged in n separate units in a linear sequence.\n    2. Merging Criteria:\n    2.1 You can merge x consecutive files, where left <= x <= right.\n    2.2 The cost of merging these x files is the sum of their sizes.\n    \n    Objective: Your objective is to find the minimum cost required to merge all the files into one. However, if it's impossible to merge them according to the specified rules, you should return 0.\n\n    Input Parameters:\n    n: The total number of data files.\n    left: The minimum number of consecutive files you can merge at once.\n    right: The maximum number of consecutive files you can merge at once.\n    size: An array representing the sizes of each file.\n\n    >>> file_master(4,2,2,[1,2,3,4])\n    19\n    \"\"\"", "function_name": "file_master", "parameters": ["n", "left", "right", "weight"]}
{"id": 194, "difficulty_types": 6, "question": "from typing import List\n\ndef max_customer_flow(arrive_time: List[str], leave_time: List[str]) -> int:\n    \"\"\"Consider better preparation for a incoming party in the restaurant, the manager needs to know the maximum customer flow at that day, which is the maximum number of people having fun in the restaurant at the same time.\n    This number not only helps the manager improve customer experience and can also optimize staff scheduling.\n    Recently, the manager designed a survey and distribute it to all the party participants. Those who received the survey filled in their arrival and departure times.\n    After organizing the data, we now have two arrays: arrive_time and leave_time, where the i-th person arrives at the restaurant at arrive_time[i] and leaves at leave_time[i], return the maximum customer flow in this party.\n    Constraints: The times in the arrays should be given in a HH:MM format (e.g., \"6:10\" for 6:10 AM). If a time format is incorrect, we will skip that person’s data\n    >>> max_customer_flow([\"6:10\", \"6:20\", \"7:00\", \"7:30\"], [\"6:30\", \"7:00\", \"7:20\", \"8:00\"])\n    2\n    >>> max_customer_flow([\"17:50\", \"18:20\", \"18:30\", \"15:15\"], [\"19:00\", \"20:00\", \"18:40\", \"18:30\"])\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef max_customer_flow(arrive_time: List[str], leave_time: List[str]) -> int:\n    \"\"\"Consider better preparation for a incoming party in the restaurant, the manager needs to know the maximum customer flow at that day, which is the maximum number of people having fun in the restaurant at the same time.\n    This number not only helps the manager improve customer experience and can also optimize staff scheduling.\n    Recently, the manager designed a survey and distribute it to all the party participants. Those who received the survey filled in their arrival and departure times.\n    After organizing the data, we now have two arrays: arrive_time and leave_time, where the i-th person arrives at the restaurant at arrive_time[i] and leaves at leave_time[i], return the maximum customer flow in this party.\n    Constraints: The times in the arrays should be given in a HH:MM format (e.g., \"6:10\" for 6:10 AM). If a time format is incorrect, we will skip that person’s data\n    >>> max_customer_flow([\"6:10\", \"6:20\", \"7:00\", \"7:30\"], [\"6:30\", \"7:00\", \"7:20\", \"8:00\"])\n    2\n    >>> max_customer_flow([\"17:50\", \"18:20\", \"18:30\", \"15:15\"], [\"19:00\", \"20:00\", \"18:40\", \"18:30\"])\n    3\n    \"\"\"", "function_name": "max_customer_flow", "parameters": ["arrive_time", "leave_time"]}
{"id": 195, "difficulty_types": 6, "question": "from typing import List\n\ndef panda_base_merging(panda_bases: List[List[int]]) -> List[str]:\n    \"\"\"\n    In Sichuan, there are multiple giant panda bases, and the Panda Base Headquarters has decided to merge these bases into two. To determine which bases should be merged, we need to calculate a score for each pair of panda bases based on the age distribution of the pandas in each base.\n\n    Given two arrays representing the ages of pandas in two bases:\n\n    Base A: agesA = [a1, a2, ..., an]\n    Base B: agesB = [b1, b2, ..., bm]\n    The score between Base A and Base B is calculated as follows:\n\n    1. Identify the common ages between the two bases.\n    2. The score is defined as the ratio of the number of common ages to the total number of unique ages across both bases.\n\n    The input will be a 2D list, where each sub-array represents the age distribution of pandas in a base. The index of each sub-array represents the number of each panda base. The output should be a 1D list of strings in the format \"X,Y: score\" for each pair of bases where the score is greater than 0. The values of X and Y are the indices of the bases in the input list. The results should be returned in ascending order. Round the score to 4 decimals\n\n    >>> panda_base_merging([[2, 4, 8], [2, 4, 6, 10, 11], [3, 4, 5]])\n    [\"0,1: 0.3333\", \"0,2: 0.2\", \"1,2: 0.1428\"]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef panda_base_merging(panda_bases: List[List[int]]) -> List[str]:\n    \"\"\"\n    In Sichuan, there are multiple giant panda bases, and the Panda Base Headquarters has decided to merge these bases into two. To determine which bases should be merged, we need to calculate a score for each pair of panda bases based on the age distribution of the pandas in each base.\n\n    Given two arrays representing the ages of pandas in two bases:\n\n    Base A: agesA = [a1, a2, ..., an]\n    Base B: agesB = [b1, b2, ..., bm]\n    The score between Base A and Base B is calculated as follows:\n\n    1. Identify the common ages between the two bases.\n    2. The score is defined as the ratio of the number of common ages to the total number of unique ages across both bases.\n\n    The input will be a 2D list, where each sub-array represents the age distribution of pandas in a base. The index of each sub-array represents the number of each panda base. The output should be a 1D list of strings in the format \"X,Y: score\" for each pair of bases where the score is greater than 0. The values of X and Y are the indices of the bases in the input list. The results should be returned in ascending order. Round the score to 4 decimals\n\n    >>> panda_base_merging([[2, 4, 8], [2, 4, 6, 10, 11], [3, 4, 5]])\n    [\"0,1: 0.3333\", \"0,2: 0.2\", \"1,2: 0.1428\"]\n    \"\"\"", "function_name": "panda_base_merging", "parameters": ["panda_bases"]}
{"id": 196, "difficulty_types": 6, "question": "from typing import List\n\n\ndef linguistic_expert(words: List[str]) -> str:\n    \"\"\"\n    In the realm of linguistics, understanding the order of letters in a language is crucial for various applications, such as creating dictionaries, designing efficient text processing algorithms, and deciphering encoded messages. Traditional languages like English have a well-defined alphabetical order, which is used to sort words in dictionaries. However, when dealing with newly discovered or artificially created languages, the order of the letters may not be immediately apparent.\n\n    You are a linguist who has discovered a new language that uses Latin letters. This language has its own unique rules for sorting words in a dictionary. Your task is to deduce the order of the letters in this language based on a given list of words that are already sorted according to the language's dictionary rules.\n\n    You will receive a non-empty list of words from the dictionary, where the words are sorted in dictionary order according to the rules of this new language. Your goal is to deduce the order of the letters in this language.\n\n    Assumptions and Constraints:\n    1. Lowercase Letters: All letters in the words are lowercase.\n    2. Lexicographical Order: At the first differing letter, if the letter in word s comes before the letter in word t in the given list order, then s is lexicographically smaller than t.\n    3. Prefix Rule: If string a is a prefix of string b and b comes before a in the list, then the order is invalid.\n    4. Invalid Order: If the order is invalid, return an empty string.\n    5. Multiple Valid Orders: There may be multiple valid letter orders; return the smallest in normal lexicographical order.\n    6. Default Order: A string's letters are considered to be of the same rank and are sorted according to human dictionary order.\n\n    >>> linguistic_expert([\"abc\", \"abcd\", \"abce\"])\n    \"abcde\"\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef linguistic_expert(words: List[str]) -> str:\n    \"\"\"\n    In the realm of linguistics, understanding the order of letters in a language is crucial for various applications, such as creating dictionaries, designing efficient text processing algorithms, and deciphering encoded messages. Traditional languages like English have a well-defined alphabetical order, which is used to sort words in dictionaries. However, when dealing with newly discovered or artificially created languages, the order of the letters may not be immediately apparent.\n\n    You are a linguist who has discovered a new language that uses Latin letters. This language has its own unique rules for sorting words in a dictionary. Your task is to deduce the order of the letters in this language based on a given list of words that are already sorted according to the language's dictionary rules.\n\n    You will receive a non-empty list of words from the dictionary, where the words are sorted in dictionary order according to the rules of this new language. Your goal is to deduce the order of the letters in this language.\n\n    Assumptions and Constraints:\n    1. Lowercase Letters: All letters in the words are lowercase.\n    2. Lexicographical Order: At the first differing letter, if the letter in word s comes before the letter in word t in the given list order, then s is lexicographically smaller than t.\n    3. Prefix Rule: If string a is a prefix of string b and b comes before a in the list, then the order is invalid.\n    4. Invalid Order: If the order is invalid, return an empty string.\n    5. Multiple Valid Orders: There may be multiple valid letter orders; return the smallest in normal lexicographical order.\n    6. Default Order: A string's letters are considered to be of the same rank and are sorted according to human dictionary order.\n\n    >>> linguistic_expert([\"abc\", \"abcd\", \"abce\"])\n    \"abcde\"\n    \"\"\"", "function_name": "linguistic_expert", "parameters": ["words"]}
{"id": 197, "difficulty_types": 6, "question": "from typing import List\ndef maximum_number_of_deliveries(dx: int, dy: int, positions: List[List[int]]) -> int:\n    \"\"\"\n    A delivery company has a 50 x 50 grid representing a city. There is one delivery driver and some packages at different locations on the grid. You are given two integers dx and dy where (dx, dy) denotes the position of the delivery driver, and a 2D array positions where positions[i] = [xi, yi] denotes the position of the packages on the grid.\n\n    The delivery company wants to optimize the delivery process. In each turn:\n\n    * The delivery driver selects a package that still exists on the grid and delivers it in the fewest possible moves. Note that the driver can select any package, it might not be one that can be delivered in the least number of moves.\n    * In the process of delivering the selected package, the driver may pass other packages without delivering them. Only the selected package can be delivered in this turn.\n\n    The company wants to maximize the sum of the number of moves made by the delivery driver until all packages are delivered.\n\n    Return the maximum total number of moves the delivery driver can make to deliver all packages, assuming the driver follows the optimal delivery strategy.\n\n    Note that in one move, the delivery driver can move to eight possible positions on the grid, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\n    >>> maximum_number_of_deliveries(dx = 1, dy = 1, positions = [[0,0]])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef maximum_number_of_deliveries(dx: int, dy: int, positions: List[List[int]]) -> int:\n    \"\"\"\n    A delivery company has a 50 x 50 grid representing a city. There is one delivery driver and some packages at different locations on the grid. You are given two integers dx and dy where (dx, dy) denotes the position of the delivery driver, and a 2D array positions where positions[i] = [xi, yi] denotes the position of the packages on the grid.\n\n    The delivery company wants to optimize the delivery process. In each turn:\n\n    * The delivery driver selects a package that still exists on the grid and delivers it in the fewest possible moves. Note that the driver can select any package, it might not be one that can be delivered in the least number of moves.\n    * In the process of delivering the selected package, the driver may pass other packages without delivering them. Only the selected package can be delivered in this turn.\n\n    The company wants to maximize the sum of the number of moves made by the delivery driver until all packages are delivered.\n\n    Return the maximum total number of moves the delivery driver can make to deliver all packages, assuming the driver follows the optimal delivery strategy.\n\n    Note that in one move, the delivery driver can move to eight possible positions on the grid, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\n    >>> maximum_number_of_deliveries(dx = 1, dy = 1, positions = [[0,0]])\n    4\n    \"\"\"", "function_name": "maximum_number_of_deliveries", "parameters": ["dx", "dy", "positions"]}
{"id": 198, "difficulty_types": 6, "question": "from typing import List\ndef make_perfect_scene(s: str, assistant_requirements: List[List[int]]) -> List[bool]:\n    \"\"\"\n    Wesley Anderson, a renowned director, is famous for creating perfectly symmetrical images. To train his skills, he arranges even number of objects in a scene, each represented by a character in a string s. The characters are numbered from left to right, forming the arrangement of objects.\n\n    Wesley's assistant provides him with specific constraints on which objects he can rearrange. For each task, the assistant specifies four integers: i, j, f, and k, where 0<i<j<|s|/2 and |s|/2<f<k<n. ​\n    This indicates that Wesley can reposition the objects from the i-th to the j-th positions and from the f-th to the k-th positions. The goal is to determine whether Wesley can achieve a perfectly symmetrical scene by rearranging the positions of these objects..\n\n    >>> make_perfect_scene(s = \"acgcgt\", assistant_requirements = [[1,2,4,5]])\n    [True]\n    >>> make_perfect_scene(s = \"atcgatcgat\", assistant_requirements = [[0,2,8,9]])\n    [False]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef make_perfect_scene(s: str, assistant_requirements: List[List[int]]) -> List[bool]:\n    \"\"\"\n    Wesley Anderson, a renowned director, is famous for creating perfectly symmetrical images. To train his skills, he arranges even number of objects in a scene, each represented by a character in a string s. The characters are numbered from left to right, forming the arrangement of objects.\n\n    Wesley's assistant provides him with specific constraints on which objects he can rearrange. For each task, the assistant specifies four integers: i, j, f, and k, where 0<i<j<|s|/2 and |s|/2<f<k<n. ​\n    This indicates that Wesley can reposition the objects from the i-th to the j-th positions and from the f-th to the k-th positions. The goal is to determine whether Wesley can achieve a perfectly symmetrical scene by rearranging the positions of these objects..\n\n    >>> make_perfect_scene(s = \"acgcgt\", assistant_requirements = [[1,2,4,5]])\n    [True]\n    >>> make_perfect_scene(s = \"atcgatcgat\", assistant_requirements = [[0,2,8,9]])\n    [False]\n    \"\"\"", "function_name": "make_perfect_scene", "parameters": ["s", "assistant_requirements"]}
{"id": 199, "difficulty_types": 6, "question": "from typing import List\ndef min_fence_area_for_trees(grid: List[List[int]]) -> int:\n    \"\"\"You are tasked with analyzing a 2D plot representing a landscape. The landscape is represented by a grid of 0s and 1s, where 1 indicates a tree, and 0 indicates empty land. Your goal is to enclose all the trees by drawing 3 non-overlapping rectangular fences, each having a non-zero area, and aligned with the grid's horizontal and vertical axes.\n    The challenge is to ensure that all the trees (represented by 1s) are fully enclosed within the 3 rectangular fences.\n    Return the minimum total area covered by these fences.\n    Note that the fences are allowed to touch but must not overlap.\n    >>> min_fence_area_for_trees([[1,1,1,0],[0,1,0,1]])\n    5\n    >>> min_fence_area_for_trees([[1,1,1],[1,1,0]])\n    5\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef min_fence_area_for_trees(grid: List[List[int]]) -> int:\n    \"\"\"You are tasked with analyzing a 2D plot representing a landscape. The landscape is represented by a grid of 0s and 1s, where 1 indicates a tree, and 0 indicates empty land. Your goal is to enclose all the trees by drawing 3 non-overlapping rectangular fences, each having a non-zero area, and aligned with the grid's horizontal and vertical axes.\n    The challenge is to ensure that all the trees (represented by 1s) are fully enclosed within the 3 rectangular fences.\n    Return the minimum total area covered by these fences.\n    Note that the fences are allowed to touch but must not overlap.\n    >>> min_fence_area_for_trees([[1,1,1,0],[0,1,0,1]])\n    5\n    >>> min_fence_area_for_trees([[1,1,1],[1,1,0]])\n    5\n    \"\"\"", "function_name": "min_fence_area_for_trees", "parameters": ["grid"]}
{"id": 200, "difficulty_types": 6, "question": "def check_password(s: str) -> int:\n    \"\"\"\n    In the ever-evolving world of cybersecurity, creating strong passwords is crucial to protect sensitive information. To determine if a password is strong, it must meet the following conditions:\n\n    1.It does not contain three consecutive repeating characters (e.g., \"...aaa...\" is a weak password, but \"...aa...a...\" is a strong password, assuming it meets the other conditions). \n    2. It contains at least one lowercase letter, one uppercase letter, and one digit.\n    3. It is at least 6 characters long but no more than 20 characters.\n\n    As a security analyst, you have been tasked with developing a tool to evaluate the strength of passwords and suggest the minimum number of changes required to make them strong. You need to write a function check_password() that takes a string s as input and returns the minimum number of changes required to make it a strong password. If s is already a strong password, return 0.\n\n    Notice that inserting, deleting, or replacing any character is considered one change.\n\n    >>> check_password(\"abc\")\n    3\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef check_password(s: str) -> int:\n    \"\"\"\n    In the ever-evolving world of cybersecurity, creating strong passwords is crucial to protect sensitive information. To determine if a password is strong, it must meet the following conditions:\n\n    1.It does not contain three consecutive repeating characters (e.g., \"...aaa...\" is a weak password, but \"...aa...a...\" is a strong password, assuming it meets the other conditions). \n    2. It contains at least one lowercase letter, one uppercase letter, and one digit.\n    3. It is at least 6 characters long but no more than 20 characters.\n\n    As a security analyst, you have been tasked with developing a tool to evaluate the strength of passwords and suggest the minimum number of changes required to make them strong. You need to write a function check_password() that takes a string s as input and returns the minimum number of changes required to make it a strong password. If s is already a strong password, return 0.\n\n    Notice that inserting, deleting, or replacing any character is considered one change.\n\n    >>> check_password(\"abc\")\n    3\n    \"\"\"", "function_name": "check_password", "parameters": ["s"]}
{"id": 201, "difficulty_types": 7, "question": "from typing import List\nimport bisect\n\ndef human_pyramid(height: List[int], weight: List[int]) -> int:       \n    \"\"\"\n    The circus wants to determine the maximum number of people that can be stacked in a human pyramid (also known as a \"human tower\" or \"diabolo\") based on their heights and weights.\n\n    In a human pyramid, one person stands on the shoulders of another. For practical and aesthetic reasons, the person on top should be slightly shorter and lighter than the person below.\n\n    The function takes two lists, `height` and `weight`. The heights and weights are paired, meaning that `height[i]` and `weight[i]` correspond to the same person.\n\n    The function sorts the members based on their heights in ascending order and weights in descending order. It then iterates through the sorted members and uses a dynamic programming approach to find the longest increasing subsequence of weights, subject to the constraint that each person must be lighter than the person below them.\n\n    The length of the longest increasing subsequence represents the maximum number of people that can be stacked in the human pyramid.\n\n    Examples:\n    >>> human_pyramid([65, 70, 56, 75, 60, 68], [100, 150, 90, 190, 95, 110])\n    6\n    >>> human_pyramid([60, 60, 60, 60], [100, 200, 150, 180])\n    1\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport bisect\n\ndef human_pyramid(height: List[int], weight: List[int]) -> int:       \n    \"\"\"\n    The circus wants to determine the maximum number of people that can be stacked in a human pyramid (also known as a \"human tower\" or \"diabolo\") based on their heights and weights.\n\n    In a human pyramid, one person stands on the shoulders of another. For practical and aesthetic reasons, the person on top should be slightly shorter and lighter than the person below.\n\n    The function takes two lists, `height` and `weight`. The heights and weights are paired, meaning that `height[i]` and `weight[i]` correspond to the same person.\n\n    The function sorts the members based on their heights in ascending order and weights in descending order. It then iterates through the sorted members and uses a dynamic programming approach to find the longest increasing subsequence of weights, subject to the constraint that each person must be lighter than the person below them.\n\n    The length of the longest increasing subsequence represents the maximum number of people that can be stacked in the human pyramid.\n\n    Examples:\n    >>> human_pyramid([65, 70, 56, 75, 60, 68], [100, 150, 90, 190, 95, 110])\n    6\n    >>> human_pyramid([60, 60, 60, 60], [100, 200, 150, 180])\n    1\n    \"\"\"", "function_name": "human_pyramid", "parameters": ["height", "weight"]}
{"id": 202, "difficulty_types": 7, "question": "def max_altitude_in_view(heights: List[int], limit: int) -> List[int]:\n    \"\"\"\n    Imagine a scenario where there's a virtual scenic telescope located inside a technology museum. \n    This telescope enables observers to examine the terrain conditions of specific latitude regions. \n    The altitude data for this latitude is stored in an array called heights, where each heights[i] represents the altitude at the corresponding position. \n    The task is to find and return the highest altitude value observable within the telescope's viewing range, defined by the variable limit.\n    >>> max_altitude_in_view([14,2,27,-5,28,13,39], 3)\n    [27,27,28,28,39]\n    >>> max_altitude_in_view([5, 3, 8, 2, 6], 2)\n    [5, 8, 8, 6]\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef max_altitude_in_view(heights: List[int], limit: int) -> List[int]:\n    \"\"\"\n    Imagine a scenario where there's a virtual scenic telescope located inside a technology museum. \n    This telescope enables observers to examine the terrain conditions of specific latitude regions. \n    The altitude data for this latitude is stored in an array called heights, where each heights[i] represents the altitude at the corresponding position. \n    The task is to find and return the highest altitude value observable within the telescope's viewing range, defined by the variable limit.\n    >>> max_altitude_in_view([14,2,27,-5,28,13,39], 3)\n    [27,27,28,28,39]\n    >>> max_altitude_in_view([5, 3, 8, 2, 6], 2)\n    [5, 8, 8, 6]\n    \"\"\"", "function_name": "max_altitude_in_view", "parameters": ["heights", "limit"]}
{"id": 203, "difficulty_types": 7, "question": "from typing import List\nimport math\n\ndef suspicion_score(scores: List[int]) -> float:\n    \"\"\"\n    Conan is a detective investigating a mysterious crime. He has a list of suspects, each with a unique characteristic (represented by a number). To solve the crime, He need to consider every possible group of suspects, from single individuals to the entire group. For each group, He calculates a suspicion score by multiplying their individual characteristics together.\n\n\n    However, these suspicion scores can get extremely large, making it difficult to compare them. To make things easier, Conan decides to take the logarithm of each score. This compresses the numbers, making them easier to manage. Finally, to get a comprehensive suspicion level for all possible groups, Conan will add up the logarithms of all the suspicion scores. If the input list is empty, return -1.\n    >>> suspicion_scores([1, 2, 3])\n    7.167037876912\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\nimport math\n\ndef suspicion_score(scores: List[int]) -> float:\n    \"\"\"\n    Conan is a detective investigating a mysterious crime. He has a list of suspects, each with a unique characteristic (represented by a number). To solve the crime, He need to consider every possible group of suspects, from single individuals to the entire group. For each group, He calculates a suspicion score by multiplying their individual characteristics together.\n\n\n    However, these suspicion scores can get extremely large, making it difficult to compare them. To make things easier, Conan decides to take the logarithm of each score. This compresses the numbers, making them easier to manage. Finally, to get a comprehensive suspicion level for all possible groups, Conan will add up the logarithms of all the suspicion scores. If the input list is empty, return -1.\n    >>> suspicion_scores([1, 2, 3])\n    7.167037876912\n    \"\"\"", "function_name": "suspicion_score", "parameters": ["scores"]}
{"id": 204, "difficulty_types": 7, "question": "from typing import List\n\ndef resolve_address(ip_addresses: List[str]) -> dict:\n    \"\"\"\n    In a busy tech company, the developers needed to convert IP addresses into hostnames for their network monitoring system. This would help the operations team better understand connected devices. The team gathered to brainstorm a solution: a function that takes a list of potential correct IP addresses (the given address could be illegal) and returns a dictionary mapping each valid IP to its hostname. If a hostname couldn’t be found, the value would be None.\n    >>> resolve_address(['8.8.8.8'])\n    {'8.8.8.8': 'dns.google'}\n    >>> resolve_address(['lol'])\n    {'lol': None}\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef resolve_address(ip_addresses: List[str]) -> dict:\n    \"\"\"\n    In a busy tech company, the developers needed to convert IP addresses into hostnames for their network monitoring system. This would help the operations team better understand connected devices. The team gathered to brainstorm a solution: a function that takes a list of potential correct IP addresses (the given address could be illegal) and returns a dictionary mapping each valid IP to its hostname. If a hostname couldn’t be found, the value would be None.\n    >>> resolve_address(['8.8.8.8'])\n    {'8.8.8.8': 'dns.google'}\n    >>> resolve_address(['lol'])\n    {'lol': None}\n    \"\"\"", "function_name": "resolve_address", "parameters": ["ip_addresses"]}
{"id": 205, "difficulty_types": 7, "question": "def word_frequency(text: str):\n    \"\"\"\n    As the tech lead of a digital publishing startup, you need to develop a text analysis tool to optimize content readability and SEO. The focus is on creating a robust word frequency calculator that addresses common challenges like punctuation and stopwords. The tool will process input texts by converting them to lowercase, stripping away punctuation marks, and filtering out stopwords such as 'the', 'and', and 'is'. This preprocessing step ensures that the frequency counts accurately reflect meaningful words, enhancing the utility of analysis for writers seeking to improve their content's discoverability and engagement.\n\n    >>> word_frequency('This is a test. This is only a test.')\n    {'test': 2}\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef word_frequency(text: str):\n    \"\"\"\n    As the tech lead of a digital publishing startup, you need to develop a text analysis tool to optimize content readability and SEO. The focus is on creating a robust word frequency calculator that addresses common challenges like punctuation and stopwords. The tool will process input texts by converting them to lowercase, stripping away punctuation marks, and filtering out stopwords such as 'the', 'and', and 'is'. This preprocessing step ensures that the frequency counts accurately reflect meaningful words, enhancing the utility of analysis for writers seeking to improve their content's discoverability and engagement.\n\n    >>> word_frequency('This is a test. This is only a test.')\n    {'test': 2}\n    \"\"\"", "function_name": "word_frequency", "parameters": ["text"]}
{"id": 206, "difficulty_types": 7, "question": "from functools import lru_cache\n\n\ndef treasure_hoard(n: int, m: int) -> bool:\n    \"\"\"\n    In the \"Treasure Hoard\" game, two adventurers take turns collecting gold coins from a dragon's lair. Each turn, an adventurer can grab any number of coins from 1 to 10. The adventurer who collects enough coins to reach or exceed 100 gold pieces wins the game and escapes with the treasure.\n\n    However, the dragon has enchanted its hoard. Once a specific number of coins has been taken, that exact amount cannot be taken again by either adventurer. For example, if one adventurer takes 7 coins, neither adventurer can take exactly 7 coins in any future turn.\n\n    Now, let's say the dragon's lair contains coins in stacks numbered from 1 to n. The adventurers need to collect at least m coins to break the dragon's spell and escape.\n\n    Given two integers n and m, representing the highest numbered stack of coins and the amount needed to break the spell, determine if the first adventurer can guarantee a win, assuming both adventurers use optimal strategy.\n\n    >>> treasure_hoard(10, 11)\n    False\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom functools import lru_cache\n\n\ndef treasure_hoard(n: int, m: int) -> bool:\n    \"\"\"\n    In the \"Treasure Hoard\" game, two adventurers take turns collecting gold coins from a dragon's lair. Each turn, an adventurer can grab any number of coins from 1 to 10. The adventurer who collects enough coins to reach or exceed 100 gold pieces wins the game and escapes with the treasure.\n\n    However, the dragon has enchanted its hoard. Once a specific number of coins has been taken, that exact amount cannot be taken again by either adventurer. For example, if one adventurer takes 7 coins, neither adventurer can take exactly 7 coins in any future turn.\n\n    Now, let's say the dragon's lair contains coins in stacks numbered from 1 to n. The adventurers need to collect at least m coins to break the dragon's spell and escape.\n\n    Given two integers n and m, representing the highest numbered stack of coins and the amount needed to break the spell, determine if the first adventurer can guarantee a win, assuming both adventurers use optimal strategy.\n\n    >>> treasure_hoard(10, 11)\n    False\n    \"\"\"", "function_name": "treasure_hoard", "parameters": ["n", "m"]}
{"id": 207, "difficulty_types": 7, "question": "from typing import List\n\n\ndef delivery_drone(target: int, original: int, distance: List[int], apply: List[int]) -> int:\n    \"\"\"\n    Imagine an electric delivery drone making a long-distance journey: A delivery drone is flying on a direct route, starting with a fully charged battery.\n\n    There are n charging stations along this route. The i-th charging station is distance[i] units away from the starting point and can provide apply[i] units of charge.\n\n    The drone consumes 1 unit of battery charge for every 1 unit of distance it flies. Assume the drone's battery can hold an infinite amount of charge.\n\n    The delivery destination is target units away from the starting point. Can the drone reach the destination? If yes, return the minimum number of recharging stops needed; otherwise, return -1.\n\n    All charging stations are in the direction of the drone's flight path.\n\n    >>> delivery_drone(50, 10, [10, 20, 30, 40], [10, 10, 10, 10])\n    4\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef delivery_drone(target: int, original: int, distance: List[int], apply: List[int]) -> int:\n    \"\"\"\n    Imagine an electric delivery drone making a long-distance journey: A delivery drone is flying on a direct route, starting with a fully charged battery.\n\n    There are n charging stations along this route. The i-th charging station is distance[i] units away from the starting point and can provide apply[i] units of charge.\n\n    The drone consumes 1 unit of battery charge for every 1 unit of distance it flies. Assume the drone's battery can hold an infinite amount of charge.\n\n    The delivery destination is target units away from the starting point. Can the drone reach the destination? If yes, return the minimum number of recharging stops needed; otherwise, return -1.\n\n    All charging stations are in the direction of the drone's flight path.\n\n    >>> delivery_drone(50, 10, [10, 20, 30, 40], [10, 10, 10, 10])\n    4\n    \"\"\"", "function_name": "delivery_drone", "parameters": ["target", "original", "distance", "apply"]}
{"id": 208, "difficulty_types": 7, "question": "from typing import List\n\ndef count_array(session: List[int]) -> int:\n    \"\"\"\n    You are a data analyst working for a company that tracks user engagement on their website. The company wants to analyze user sessions to identify patterns and improve user experience. Each user session is represented as an array of positive integers, where each integer represents the time spent by the user on a particular page.\n\n    The company is interested in finding the number of subsessions within each user session, where the first and last pages visited in the subsession have the longest duration among all the pages in that subsession.\n\n    Given an array of positive integers representing a user session, your task is to count the number of subsessions that satisfy the given criteria.\n\n    >>> count_array(session = [5, 10, 8, 8, 6])\n    6\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef count_array(session: List[int]) -> int:\n    \"\"\"\n    You are a data analyst working for a company that tracks user engagement on their website. The company wants to analyze user sessions to identify patterns and improve user experience. Each user session is represented as an array of positive integers, where each integer represents the time spent by the user on a particular page.\n\n    The company is interested in finding the number of subsessions within each user session, where the first and last pages visited in the subsession have the longest duration among all the pages in that subsession.\n\n    Given an array of positive integers representing a user session, your task is to count the number of subsessions that satisfy the given criteria.\n\n    >>> count_array(session = [5, 10, 8, 8, 6])\n    6\n    \"\"\"", "function_name": "count_array", "parameters": ["session"]}
{"id": 209, "difficulty_types": 7, "question": "def solve_equation(equation: str):\n    \"\"\"\n    James has too much homework involving solving equations. To speed up the process, he decides to write a program to help him solve them.\n    These equations include the operations '+', '-', '*', and '/', as well as the variable x and its coefficients.\n    The equations are in the form \"A = B\", where both A and B are expressions containing integers and the variable x.\n    Given such an equation, output the value of x.\n\n    If the equation has no solution or infinite solutions, return None\n    \n    >>> solve_equation(\"x+5-3+x=6+x-2\")\n    2\n    >>> solve_equation(\"2*x=x\")\n    0\n    >>> solve_equation(\"x=x\")\n    None\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef solve_equation(equation: str):\n    \"\"\"\n    James has too much homework involving solving equations. To speed up the process, he decides to write a program to help him solve them.\n    These equations include the operations '+', '-', '*', and '/', as well as the variable x and its coefficients.\n    The equations are in the form \"A = B\", where both A and B are expressions containing integers and the variable x.\n    Given such an equation, output the value of x.\n\n    If the equation has no solution or infinite solutions, return None\n    \n    >>> solve_equation(\"x+5-3+x=6+x-2\")\n    2\n    >>> solve_equation(\"2*x=x\")\n    0\n    >>> solve_equation(\"x=x\")\n    None\n    \"\"\"", "function_name": "solve_equation", "parameters": ["equation"]}
{"id": 210, "difficulty_types": 7, "question": "from typing import List\ndef poverty_alleviation(annual_incomes: List[int]) -> int:\n    \"\"\"\n    The poverty alleviation team aims to help poor households in a village escape poverty. They have developed a strategy that involves dividing the village population into two groups, with the requirement that these groups assist each other. To facilitate effective communication and cooperation, the team wants to minimize the income disparity between the two groups.\n\n    Given a list of integers representing the annual incomes of the village's population (where negative numbers indicate liabilities), your goal is to divide this list into two groups. The objective is to minimize the absolute difference between the total incomes of the two groups.\n\n    >>> poverty_alleviation([30,90,70,30])\n    20\n    >>> poverty_alleviation([20, -10, 0, 40, -20, -90])\n    0\n    \"\"\"", "prompt": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\ndef poverty_alleviation(annual_incomes: List[int]) -> int:\n    \"\"\"\n    The poverty alleviation team aims to help poor households in a village escape poverty. They have developed a strategy that involves dividing the village population into two groups, with the requirement that these groups assist each other. To facilitate effective communication and cooperation, the team wants to minimize the income disparity between the two groups.\n\n    Given a list of integers representing the annual incomes of the village's population (where negative numbers indicate liabilities), your goal is to divide this list into two groups. The objective is to minimize the absolute difference between the total incomes of the two groups.\n\n    >>> poverty_alleviation([30,90,70,30])\n    20\n    >>> poverty_alleviation([20, -10, 0, 40, -20, -90])\n    0\n    \"\"\"", "function_name": "poverty_alleviation", "parameters": ["annual_incomes"]}
